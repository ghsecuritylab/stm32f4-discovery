
demo.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
08002f6c l    d  .rodata	00000000 .rodata
08003084 l    d  .init_array	00000000 .init_array
0800308c l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000854 l    d  .bss	00000000 .bss
20000948 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 /tmp/ccWqKKRS.o
08000328 l       .text	00000000 LoopCopyDataInit
08000320 l       .text	00000000 CopyDataInit
0800033c l       .text	00000000 LoopFillZerobss
08000336 l       .text	00000000 FillZerobss
08000368 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08002f54 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 __do_global_dtors_aux
20000854 l       .bss	00000000 completed.8122
0800308c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001ac l     F .text	00000000 frame_dummy
20000858 l       .bss	00000000 object.8127
08003088 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 syscalls.c
20000874 l     O .bss	00000004 heap_end.8965
00000000 l    df *ABS*	00000000 usart.c
00000000 l    df *ABS*	00000000 console.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 error.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 stm32f4xx_it.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_spi.c
08000d90 l     F .text	0000008c SPI_WaitFlagStateUntilTimeout
08000e1c l     F .text	00000020 SPI_CheckFlag_BSY
00000000 l    df *ABS*	00000000 stm32f4xx_hal_uart.c
080011ac l     F .text	00000238 UART_SetConfig
080013e4 l     F .text	00000050 UART_WaitOnFlagUntilTimeout.constprop.2
00000000 l    df *ABS*	00000000 stm32f4_discovery.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080017f0 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 findfp.c
0800181c l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_I2C_Init
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
08003090 l       .fini_array	00000000 __fini_array_end
20000854 l       .bss	00000000 __bss_start__
00000000 l       *UND*	00000000 HAL_I2C_DeInit
00000000 l       *UND*	00000000 HAL_I2C_Mem_Read
20000948 l       .bss	00000000 __bss_end__
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
0800308c l       .fini_array	00000000 __fini_array_start
0800308c l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 HAL_I2C_GetState
08003084 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08003084 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 HAL_I2C_Mem_Write
08003084 l       .init_array	00000000 __preinit_array_start
00000000 l       *UND*	00000000 HAL_DMA_Abort_IT
00000000 l       *UND*	00000000 free
08000368  w    F .text	00000002 RTC_Alarm_IRQHandler
0800305f g     O .rodata	00000010 APBAHBPrescTable
08000368  w    F .text	00000002 HASH_RNG_IRQHandler
08000368  w    F .text	00000002 EXTI2_IRQHandler
08000368  w    F .text	00000002 TIM8_CC_IRQHandler
08002f30 g     F .text	00000024 _isatty_r
08001720 g     F .text	00000064 _puts_r
08002dd8 g     F .text	00000028 _lseek_r
08000a24 g     F .text	00000002 DebugMon_Handler
0800068c g     F .text	00000046 printf
08000a34 g     F .text	00000030 HAL_RCC_GetPCLK1Freq
08000b18 g     F .text	00000060 HAL_NVIC_SetPriority
08000368  w    F .text	00000002 TIM1_CC_IRQHandler
08000a64 g     F .text	00000030 HAL_RCC_GetPCLK2Freq
080029f8 g     F .text	00000020 __sseek
0800190c g     F .text	0000000a __sinit
08000368  w    F .text	00000002 DMA2_Stream5_IRQHandler
08000a1a g     F .text	00000002 HardFault_Handler
08000368  w    F .text	00000002 DMA1_Stream5_IRQHandler
08002588 g     F .text	00000002 __malloc_unlock
08000a28 g     F .text	00000004 SysTick_Handler
08000d6c g     F .text	00000008 HAL_GPIO_WritePin
08000368  w    F .text	00000002 PVD_IRQHandler
08000368  w    F .text	00000002 SDIO_IRQHandler
080024bc g     F .text	000000c6 memmove
08000368  w    F .text	00000002 TAMP_STAMP_IRQHandler
08003090 g       *ABS*	00000000 _sidata
08000618 g     F .text	00000074 ts_formatlength
08000a26 g     F .text	00000002 PendSV_Handler
08000a18 g     F .text	00000002 NMI_Handler
08003084 g       .init_array	00000000 __exidx_end
08000368  w    F .text	00000002 CAN2_RX1_IRQHandler
08000368  w    F .text	00000002 EXTI3_IRQHandler
08001618 g     F .text	0000001c BSP_LED_Off
08000368  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
08000d78 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
08000a94  w    F .text	00000002 HAL_MspInit
08000368  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08002f08 g     F .text	00000028 _fstat_r
20000944 g     O .bss	00000004 errno
08002f6c g       .text	00000000 _etext
20000854 g       .bss	00000000 _sbss
08000368  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
08000368  w    F .text	00000002 I2C3_ER_IRQHandler
080006d4 g     F .text	000000cc my_log
08000ba4 g     F .text	000001c8 HAL_GPIO_Init
080001e4 g     F .text	00000134 memcpy
08001810 g     F .text	0000000c _cleanup_r
08000a2c g     F .text	00000006 EXTI0_IRQHandler
08000368  w    F .text	00000002 I2C2_EV_IRQHandler
08001784 g     F .text	00000010 puts
08000368  w    F .text	00000002 DMA1_Stream2_IRQHandler
08000368  w    F .text	00000002 CAN1_RX0_IRQHandler
08000368  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
08000368  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
00000000  w      *UND*	00000000 malloc
0800045a g     F .text	0000000a _fstat
08000a20 g     F .text	00000002 UsageFault_Handler
08000368  w    F .text	00000002 CAN2_SCE_IRQHandler
20000880 g     O .bss	00000004 __malloc_top_pad
08000368  w    F .text	00000002 DMA2_Stream2_IRQHandler
08001b98 g     F .text	00000318 __sfvwrite_r
08003070 g     O .rodata	00000008 GPIO_PIN
20000000 g       .data	00000000 _sdata
08000368  w    F .text	00000002 SPI1_IRQHandler
08002978 g     F .text	00000024 _sbrk_r
08000368  w    F .text	00000002 TIM6_DAC_IRQHandler
08002ee0 g     F .text	00000028 _read_r
08000368  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08000368  w    F .text	00000002 DCMI_IRQHandler
08002bd4 g     F .text	00000084 _fclose_r
08000368  w    F .text	00000002 CAN2_RX0_IRQHandler
2000087c g     O .bss	00000004 __malloc_max_sbrked_mem
08000b78 g     F .text	0000002c HAL_SYSTICK_Config
08003084 g       .init_array	00000000 __exidx_start
08000368  w    F .text	00000002 DMA2_Stream3_IRQHandler
08000464 g     F .text	00000004 _isatty
0800307c g     O .rodata	00000004 _global_impure_ptr
0800258c g     F .text	000003ec _realloc_r
08001634 g     F .text	00000050 __libc_init_array
08000420 g     F .text	00000034 _sbrk
08000e3c g     F .text	00000080 HAL_SPI_Init
08000368  w    F .text	00000002 USART6_IRQHandler
08002f54 g     F .text	00000000 _init
08000800 g     F .text	00000080 HAL_SPI_MspInit
08000368  w    F .text	00000002 USART3_IRQHandler
08001920 g     F .text	0000002c __libc_fini_array
20000948 g       .bss	00000000 _ebss
08000318  w    F .text	00000038 Reset_Handler
08000368  w    F .text	00000002 CAN1_RX1_IRQHandler
08000368  w    F .text	00000002 UART5_IRQHandler
08000368  w    F .text	00000002 DMA2_Stream0_IRQHandler
08000ac0 g     F .text	00000034 HAL_Init
08000880 g     F .text	00000088 write
08000ebe g     F .text	0000002c HAL_SPI_DeInit
08000368  w    F .text	00000002 TIM4_IRQHandler
08000558 g     F .text	000000c0 ts_formatstring
00000000  w      *UND*	00000000 __deregister_frame_info
08000d74  w    F .text	00000002 HAL_GPIO_EXTI_Callback
20000948 g       ._user_heap_stack	00000000 end
08000368  w    F .text	00000002 I2C1_EV_IRQHandler
08000368  w    F .text	00000002 DMA1_Stream6_IRQHandler
08000ebc  w    F .text	00000002 HAL_SPI_MspDeInit
080015fc g     F .text	0000001c BSP_LED_On
08000368  w    F .text	00000002 DMA1_Stream1_IRQHandler
08000368  w    F .text	00000002 UART4_IRQHandler
08001918 g     F .text	00000002 __sfp_lock_acquire
08002428 g     F .text	00000092 memchr
080019e8 g     F .text	000001b0 _free_r
20000004 g     O .data	00000010 GPIO_PORT
08000368  w    F .text	00000002 TIM3_IRQHandler
08000368  w    F .text	00000002 RCC_IRQHandler
08000368  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
08000368 g       .text	00000002 Default_Handler
20000850 g     O .data	00000004 __malloc_sbrk_base
08000468 g     F .text	00000004 _lseek
08000368  w    F .text	00000002 EXTI15_10_IRQHandler
08002b0c g     F .text	000000a4 __register_exitproc
08000368  w    F .text	00000002 ADC_IRQHandler
08000af4 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
20000884 g     O .bss	00000028 __malloc_current_mallinfo
08000368  w    F .text	00000002 DMA1_Stream7_IRQHandler
08000368  w    F .text	00000002 TIM7_IRQHandler
08002bb0 g     F .text	00000024 _close_r
08000368  w    F .text	00000002 CAN2_TX_IRQHandler
08000368  w    F .text	00000002 TIM5_IRQHandler
08000368  w    F .text	00000002 DMA2_Stream7_IRQHandler
08000368  w    F .text	00000002 I2C3_EV_IRQHandler
08002a48 g     F .text	000000c4 __swsetup_r
08000368  w    F .text	00000002 EXTI9_5_IRQHandler
08001490 g     F .text	000000b6 HAL_UART_Transmit
08000368  w    F .text	00000002 RTC_WKUP_IRQHandler
20000444 g     O .data	00000408 __malloc_av_
0800299c g     F .text	00000022 __sread
08000368  w    F .text	00000002 ETH_WKUP_IRQHandler
0800037c g     F .text	0000000c HAL_GetTick
08002584 g     F .text	00000002 __malloc_lock
08002dac g     F .text	0000002c _fflush_r
08000368  w    F .text	00000002 SPI2_IRQHandler
08000368  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
08001684 g     F .text	0000009a memset
08000a1c g     F .text	00000002 MemManage_Handler
08000388 g     F .text	00000080 main
20000878 g     O .bss	00000004 __malloc_max_total_mem
08000368  w    F .text	00000002 DMA1_Stream0_IRQHandler
08000eea g     F .text	000002c2 HAL_SPI_TransmitReceive
080038e4 g       *ABS*	00000000 _siccmram
08000368  w    F .text	00000002 CAN1_TX_IRQHandler
08000a22 g     F .text	00000002 SVC_Handler
08002a18 g     F .text	00000008 __sclose
08001f04 g     F .text	00000524 _malloc_r
08000524 g     F .text	00000034 ts_itoa
00000000  w      *UND*	00000000 __libc_fini
08000368  w    F .text	00000002 EXTI4_IRQHandler
0800194c g     F .text	0000009c _malloc_trim_r
08000930 g     F .text	000000e8 SystemInit
08002f60 g     F .text	00000000 _fini
080004a8 g     F .text	0000007c HAL_UART_MspInit
08001804 g     F .text	0000000c atexit
08002a20 g     F .text	00000028 _write_r
10000000 g       .ccmram	00000000 _eccmram
08000a98  w    F .text	00000028 HAL_InitTick
08000368  w    F .text	00000002 FSMC_IRQHandler
08000368  w    F .text	00000002 ETH_IRQHandler
20000440 g     O .data	00000004 _impure_ptr
08002c58 g     F .text	00000154 __sflush_r
0800036c g     F .text	00000010 HAL_IncTick
08000368  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
08000368  w    F .text	00000002 WWDG_IRQHandler
08000368  w    F .text	00000002 TIM2_IRQHandler
08000368  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08000368  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
08000368  w    F .text	00000002 OTG_HS_IRQHandler
2001ffff g       *ABS*	00000000 _estack
08000368  w    F .text	00000002 EXTI1_IRQHandler
08000408 g     F .text	00000018 _write
20000854 g       .data	00000000 _edata
200008ac g     O .bss	00000040 huart2
10000000 g       .ccmram	00000000 _sccmram
08000470 g     F .text	00000038 USART2_UART_Init
08000368  w    F .text	00000002 USART2_IRQHandler
080029c0 g     F .text	00000038 __swrite
2000084c g     O .data	00000004 __malloc_trim_threshold
08000000 g     O .isr_vector	00000000 g_pfnVectors
08001eb0 g     F .text	00000052 _fwalk_reent
08000368  w    F .text	00000002 I2C2_ER_IRQHandler
0800191c g     F .text	00000002 __sfp_lock_release
08001548 g     F .text	000000b4 BSP_LED_Init
08000368  w    F .text	00000002 DMA2_Stream1_IRQHandler
0800046c g     F .text	00000004 _read
08000368  w    F .text	00000002 CAN1_SCE_IRQHandler
08000368  w    F .text	00000002 FLASH_IRQHandler
08000368  w    F .text	00000002 DMA2_Stream4_IRQHandler
08000a1e g     F .text	00000002 BusFault_Handler
08000368  w    F .text	00000002 USART1_IRQHandler
08002e00 g     F .text	000000e0 __smakebuf_r
08001794 g     F .text	0000005c strlen
08000368  w    F .text	00000002 OTG_FS_IRQHandler
08000368  w    F .text	00000002 SPI3_IRQHandler
08000368  w    F .text	00000002 DMA1_Stream4_IRQHandler
08001434 g     F .text	0000005c HAL_UART_Init
08000368  w    F .text	00000002 I2C1_ER_IRQHandler
080007a0 g     F .text	00000060 SPI_Init
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00000000  w      *UND*	00000000 __register_frame_info
08000368  w    F .text	00000002 DMA2_Stream6_IRQHandler
200008ec g     O .bss	00000058 hspi
08000368  w    F .text	00000002 DMA1_Stream3_IRQHandler
08000454 g     F .text	00000006 _close
20000870 g     O .bss	00000004 my_tick
08000908 g     F .text	00000028 Error_Handler



Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000854 	.word	0x20000854
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f54 	.word	0x08002f54

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08002f54 	.word	0x08002f54
 80001d8:	20000858 	.word	0x20000858
 80001dc:	20000854 	.word	0x20000854
 80001e0:	00000000 	.word	0x00000000

080001e4 <memcpy>:
 80001e4:	4684      	mov	ip, r0
 80001e6:	ea41 0300 	orr.w	r3, r1, r0
 80001ea:	f013 0303 	ands.w	r3, r3, #3
 80001ee:	d16d      	bne.n	80002cc <memcpy+0xe8>
 80001f0:	3a40      	subs	r2, #64	; 0x40
 80001f2:	d341      	bcc.n	8000278 <memcpy+0x94>
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000270:	f840 3b04 	str.w	r3, [r0], #4
 8000274:	3a40      	subs	r2, #64	; 0x40
 8000276:	d2bd      	bcs.n	80001f4 <memcpy+0x10>
 8000278:	3230      	adds	r2, #48	; 0x30
 800027a:	d311      	bcc.n	80002a0 <memcpy+0xbc>
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	f851 3b04 	ldr.w	r3, [r1], #4
 8000298:	f840 3b04 	str.w	r3, [r0], #4
 800029c:	3a10      	subs	r2, #16
 800029e:	d2ed      	bcs.n	800027c <memcpy+0x98>
 80002a0:	320c      	adds	r2, #12
 80002a2:	d305      	bcc.n	80002b0 <memcpy+0xcc>
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	3a04      	subs	r2, #4
 80002ae:	d2f9      	bcs.n	80002a4 <memcpy+0xc0>
 80002b0:	3204      	adds	r2, #4
 80002b2:	d008      	beq.n	80002c6 <memcpy+0xe2>
 80002b4:	07d2      	lsls	r2, r2, #31
 80002b6:	bf1c      	itt	ne
 80002b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002bc:	f800 3b01 	strbne.w	r3, [r0], #1
 80002c0:	d301      	bcc.n	80002c6 <memcpy+0xe2>
 80002c2:	880b      	ldrh	r3, [r1, #0]
 80002c4:	8003      	strh	r3, [r0, #0]
 80002c6:	4660      	mov	r0, ip
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	2a08      	cmp	r2, #8
 80002ce:	d313      	bcc.n	80002f8 <memcpy+0x114>
 80002d0:	078b      	lsls	r3, r1, #30
 80002d2:	d08d      	beq.n	80001f0 <memcpy+0xc>
 80002d4:	f010 0303 	ands.w	r3, r0, #3
 80002d8:	d08a      	beq.n	80001f0 <memcpy+0xc>
 80002da:	f1c3 0304 	rsb	r3, r3, #4
 80002de:	1ad2      	subs	r2, r2, r3
 80002e0:	07db      	lsls	r3, r3, #31
 80002e2:	bf1c      	itt	ne
 80002e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e8:	f800 3b01 	strbne.w	r3, [r0], #1
 80002ec:	d380      	bcc.n	80001f0 <memcpy+0xc>
 80002ee:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002f2:	f820 3b02 	strh.w	r3, [r0], #2
 80002f6:	e77b      	b.n	80001f0 <memcpy+0xc>
 80002f8:	3a04      	subs	r2, #4
 80002fa:	d3d9      	bcc.n	80002b0 <memcpy+0xcc>
 80002fc:	3a01      	subs	r2, #1
 80002fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000302:	f800 3b01 	strb.w	r3, [r0], #1
 8000306:	d2f9      	bcs.n	80002fc <memcpy+0x118>
 8000308:	780b      	ldrb	r3, [r1, #0]
 800030a:	7003      	strb	r3, [r0, #0]
 800030c:	784b      	ldrb	r3, [r1, #1]
 800030e:	7043      	strb	r3, [r0, #1]
 8000310:	788b      	ldrb	r3, [r1, #2]
 8000312:	7083      	strb	r3, [r0, #2]
 8000314:	4660      	mov	r0, ip
 8000316:	4770      	bx	lr

08000318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000350 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800031c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800031e:	e003      	b.n	8000328 <LoopCopyDataInit>

08000320 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000322:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000324:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000326:	3104      	adds	r1, #4

08000328 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800032c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800032e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000330:	d3f6      	bcc.n	8000320 <CopyDataInit>
  ldr  r2, =_sbss
 8000332:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000334:	e002      	b.n	800033c <LoopFillZerobss>

08000336 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000336:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000338:	f842 3b04 	str.w	r3, [r2], #4

0800033c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800033e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000340:	d3f9      	bcc.n	8000336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000342:	f000 faf5 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000346:	f001 f975 	bl	8001634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800034a:	f000 f81d 	bl	8000388 <main>
  bx  lr    
 800034e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000350:	2001ffff 	.word	0x2001ffff
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000354:	08003090 	.word	0x08003090
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800035c:	20000854 	.word	0x20000854
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000360:	20000854 	.word	0x20000854
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000364:	20000948 	.word	0x20000948

08000368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <HAL_IncTick>:
uint32_t    my_tick = 0;

/* Private functions ---------------------------------------------------------*/
void HAL_IncTick(void)
{
  my_tick++;
 800036c:	4a02      	ldr	r2, [pc, #8]	; (8000378 <HAL_IncTick+0xc>)
 800036e:	6813      	ldr	r3, [r2, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	6013      	str	r3, [r2, #0]
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	20000870 	.word	0x20000870

0800037c <HAL_GetTick>:
}

uint32_t HAL_GetTick(void)
{
  return my_tick;
}
 800037c:	4b01      	ldr	r3, [pc, #4]	; (8000384 <HAL_GetTick+0x8>)
 800037e:	6818      	ldr	r0, [r3, #0]
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	20000870 	.word	0x20000870

08000388 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000388:	b508      	push	{r3, lr}
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 800038a:	f000 fb99 	bl	8000ac0 <HAL_Init>
 
  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 800038e:	2001      	movs	r0, #1
 8000390:	f001 f8da 	bl	8001548 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000394:	2000      	movs	r0, #0
 8000396:	f001 f8d7 	bl	8001548 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 800039a:	2002      	movs	r0, #2
 800039c:	f001 f8d4 	bl	8001548 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80003a0:	2003      	movs	r0, #3
 80003a2:	f001 f8d1 	bl	8001548 <BSP_LED_Init>
  
  /* Configure the system clock to 84 MHz */
 // SystemClock_Config();

  SysTick_Config(SystemCoreClock/ 100);
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <main+0x68>)
 80003a8:	2264      	movs	r2, #100	; 0x64
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	3b01      	subs	r3, #1
 80003b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b6:	d209      	bcs.n	80003cc <main+0x44>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b8:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <main+0x6c>)
 80003ba:	6053      	str	r3, [r2, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <main+0x70>)
 80003be:	21f0      	movs	r1, #240	; 0xf0
 80003c0:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c4:	2300      	movs	r3, #0
 80003c6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c8:	2307      	movs	r3, #7
 80003ca:	6013      	str	r3, [r2, #0]

  USART2_UART_Init();
 80003cc:	f000 f850 	bl	8000470 <USART2_UART_Init>
  my_log(0,MODULE_MAIN,"UART initialized successfully\r\n");
 80003d0:	490a      	ldr	r1, [pc, #40]	; (80003fc <main+0x74>)
 80003d2:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <main+0x78>)
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 f97d 	bl	80006d4 <my_log>


  my_log(0,MODULE_MAIN,"SPI init\r\n");
 80003da:	4908      	ldr	r1, [pc, #32]	; (80003fc <main+0x74>)
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <main+0x7c>)
 80003de:	2000      	movs	r0, #0
 80003e0:	f000 f978 	bl	80006d4 <my_log>
  SPI_Init();
 80003e4:	f000 f9dc 	bl	80007a0 <SPI_Init>

  //my_log(0,MODULE_MAIN,"Main loop...\r\n");

  write();
 80003e8:	f000 fa4a 	bl	8000880 <write>
while(1)
{

}
 80003ec:	e7fe      	b.n	80003ec <main+0x64>
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000
 80003f4:	e000e010 	.word	0xe000e010
 80003f8:	e000ed00 	.word	0xe000ed00
 80003fc:	08002f6c 	.word	0x08002f6c
 8000400:	08002f71 	.word	0x08002f71
 8000404:	08002f91 	.word	0x08002f91

08000408 <_write>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8000408:	b510      	push	{r4, lr}
	/* Implement your write code here, this is used by puts and printf for example */
    HAL_UART_Transmit ( &huart2 , (uint8_t*)ptr , len , 300 );
 800040a:	f44f 7396 	mov.w	r3, #300	; 0x12c
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 800040e:	4614      	mov	r4, r2
	/* Implement your write code here, this is used by puts and printf for example */
    HAL_UART_Transmit ( &huart2 , (uint8_t*)ptr , len , 300 );
 8000410:	4802      	ldr	r0, [pc, #8]	; (800041c <_write+0x14>)
 8000412:	b292      	uxth	r2, r2
 8000414:	f001 f83c 	bl	8001490 <HAL_UART_Transmit>
	return len;
}
 8000418:	4620      	mov	r0, r4
 800041a:	bd10      	pop	{r4, pc}
 800041c:	200008ac 	.word	0x200008ac

08000420 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <_sbrk+0x28>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	b90a      	cbnz	r2, 800042a <_sbrk+0xa>
		heap_end = &end;
 8000426:	4a09      	ldr	r2, [pc, #36]	; (800044c <_sbrk+0x2c>)
 8000428:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800042a:	681b      	ldr	r3, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800042c:	466a      	mov	r2, sp
 800042e:	4418      	add	r0, r3
 8000430:	4290      	cmp	r0, r2
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000432:	bf89      	itett	hi
 8000434:	4b06      	ldrhi	r3, [pc, #24]	; (8000450 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000436:	4a04      	ldrls	r2, [pc, #16]	; (8000448 <_sbrk+0x28>)
	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000438:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800043a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;
 800043e:	bf96      	itet	ls
 8000440:	6010      	strls	r0, [r2, #0]
	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000442:	601a      	strhi	r2, [r3, #0]
		return (caddr_t) -1;
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
 8000444:	4618      	movls	r0, r3
}
 8000446:	4770      	bx	lr
 8000448:	20000874 	.word	0x20000874
 800044c:	20000948 	.word	0x20000948
 8000450:	20000944 	.word	0x20000944

08000454 <_close>:

int _close(int file)
{
	return -1;
}
 8000454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000458:	4770      	bx	lr

0800045a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800045a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000460:	2000      	movs	r0, #0
 8000462:	4770      	bx	lr

08000464 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000464:	2001      	movs	r0, #1
 8000466:	4770      	bx	lr

08000468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000468:	2000      	movs	r0, #0
 800046a:	4770      	bx	lr

0800046c <_read>:

int _read(int file, char *ptr, int len)
{
	return 0;
}
 800046c:	2000      	movs	r0, #0
 800046e:	4770      	bx	lr

08000470 <USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART5 init function */

void USART2_UART_Init(void)
{
 8000470:	b508      	push	{r3, lr}
  huart2.Instance = USARTx;
 8000472:	480b      	ldr	r0, [pc, #44]	; (80004a0 <USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <USART2_UART_Init+0x34>)
 8000476:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800047a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800047e:	220c      	movs	r2, #12

void USART2_UART_Init(void)
{
  huart2.Instance = USARTx;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000480:	2300      	movs	r3, #0
 8000482:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000484:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000486:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000488:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800048c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800048e:	f000 ffd1 	bl	8001434 <HAL_UART_Init>
 8000492:	b118      	cbz	r0, 800049c <USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
 8000498:	f000 ba36 	b.w	8000908 <Error_Handler>
 800049c:	bd08      	pop	{r3, pc}
 800049e:	bf00      	nop
 80004a0:	200008ac 	.word	0x200008ac
 80004a4:	40004400 	.word	0x40004400

080004a8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004a8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USARTx)
 80004aa:	6802      	ldr	r2, [r0, #0]
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <HAL_UART_MspInit+0x74>)
 80004ae:	429a      	cmp	r2, r3
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004b0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USARTx)
 80004b2:	d12d      	bne.n	8000510 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART5_MspInit 0 */

    USARTx_RX_GPIO_CLK_ENABLE();
 80004b4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80004b8:	2200      	movs	r2, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = USARTx_TX_PIN|USARTx_RX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80004be:	4818      	ldr	r0, [pc, #96]	; (8000520 <HAL_UART_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USARTx)
  {
  /* USER CODE BEGIN USART5_MspInit 0 */

    USARTx_RX_GPIO_CLK_ENABLE();
 80004c0:	f041 0101 	orr.w	r1, r1, #1
 80004c4:	6319      	str	r1, [r3, #48]	; 0x30
 80004c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80004c8:	f001 0101 	and.w	r1, r1, #1
 80004cc:	9100      	str	r1, [sp, #0]
 80004ce:	9900      	ldr	r1, [sp, #0]
    USARTx_TX_GPIO_CLK_ENABLE();
 80004d0:	9201      	str	r2, [sp, #4]
 80004d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80004d4:	f041 0101 	orr.w	r1, r1, #1
 80004d8:	6319      	str	r1, [r3, #48]	; 0x30
 80004da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80004dc:	f001 0101 	and.w	r1, r1, #1
 80004e0:	9101      	str	r1, [sp, #4]
 80004e2:	9901      	ldr	r1, [sp, #4]
  /* USER CODE END USART5_MspInit 0 */
    /* Peripheral clock enable */
    USARTx_CLK_ENABLE();
 80004e4:	9202      	str	r2, [sp, #8]
 80004e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80004e8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80004ec:	6419      	str	r1, [r3, #64]	; 0x40
 80004ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PB3     ------> USART5_TX
    PB4     ------> USART5_RX 
    */
    GPIO_InitStruct.Pin = USARTx_TX_PIN|USARTx_RX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	9205      	str	r2, [sp, #20]

    USARTx_RX_GPIO_CLK_ENABLE();
    USARTx_TX_GPIO_CLK_ENABLE();
  /* USER CODE END USART5_MspInit 0 */
    /* Peripheral clock enable */
    USARTx_CLK_ENABLE();
 80004f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	9b02      	ldr	r3, [sp, #8]

    /**USART5 GPIO Configuration    
    PB3     ------> USART5_TX
    PB4     ------> USART5_RX 
    */
    GPIO_InitStruct.Pin = USARTx_TX_PIN|USARTx_RX_PIN;
 80004fa:	230c      	movs	r3, #12
 80004fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	2302      	movs	r3, #2
 8000500:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000502:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000504:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = USARTx_TX_PIN|USARTx_RX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000506:	2307      	movs	r3, #7
 8000508:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800050a:	f000 fb4b 	bl	8000ba4 <HAL_GPIO_Init>
 800050e:	e001      	b.n	8000514 <HAL_UART_MspInit+0x6c>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }
  else {
    Error_Handler();
 8000510:	f000 f9fa 	bl	8000908 <Error_Handler>
  }
}
 8000514:	b009      	add	sp, #36	; 0x24
 8000516:	f85d fb04 	ldr.w	pc, [sp], #4
 800051a:	bf00      	nop
 800051c:	40004400 	.word	0x40004400
 8000520:	40020000 	.word	0x40020000

08000524 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000524:	b570      	push	{r4, r5, r6, lr}
	int div = 1;
 8000526:	2301      	movs	r3, #1
	while (d/div >= base)
 8000528:	fbb1 f4f3 	udiv	r4, r1, r3
 800052c:	4294      	cmp	r4, r2
 800052e:	d301      	bcc.n	8000534 <ts_itoa+0x10>
		div *= base;
 8000530:	4353      	muls	r3, r2
 8000532:	e7f9      	b.n	8000528 <ts_itoa+0x4>

	while (div != 0)
 8000534:	b17b      	cbz	r3, 8000556 <ts_itoa+0x32>
	{
		int num = d/div;
 8000536:	fbb1 f4f3 	udiv	r4, r1, r3
 800053a:	6805      	ldr	r5, [r0, #0]
		d = d%div;
		div /= base;
		if (num > 9)
 800053c:	2c09      	cmp	r4, #9
		div *= base;

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
 800053e:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
 8000542:	f105 0601 	add.w	r6, r5, #1
 8000546:	bfcc      	ite	gt
 8000548:	3437      	addgt	r4, #55	; 0x37
		else
			*((*buf)++) = num + '0';
 800054a:	3430      	addle	r4, #48	; 0x30
	{
		int num = d/div;
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
 800054c:	6006      	str	r6, [r0, #0]

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
		div /= base;
 800054e:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 8000552:	702c      	strb	r4, [r5, #0]
 8000554:	e7ee      	b.n	8000534 <ts_itoa+0x10>
	}
}
 8000556:	bd70      	pop	{r4, r5, r6, pc}

08000558 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000558:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800055a:	460c      	mov	r4, r1
 800055c:	9001      	str	r0, [sp, #4]
	char *start_buf = buf;
 800055e:	4605      	mov	r5, r0
	while(*fmt)
 8000560:	7823      	ldrb	r3, [r4, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d052      	beq.n	800060c <ts_formatstring+0xb4>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000566:	2b25      	cmp	r3, #37	; 0x25
 8000568:	d14a      	bne.n	8000600 <ts_formatstring+0xa8>
		{
			switch (*(++fmt))
 800056a:	7863      	ldrb	r3, [r4, #1]
 800056c:	2b64      	cmp	r3, #100	; 0x64
 800056e:	d01d      	beq.n	80005ac <ts_formatstring+0x54>
 8000570:	d80a      	bhi.n	8000588 <ts_formatstring+0x30>
 8000572:	2b58      	cmp	r3, #88	; 0x58
 8000574:	d03b      	beq.n	80005ee <ts_formatstring+0x96>
 8000576:	2b63      	cmp	r3, #99	; 0x63
 8000578:	d011      	beq.n	800059e <ts_formatstring+0x46>
 800057a:	2b25      	cmp	r3, #37	; 0x25
 800057c:	d13e      	bne.n	80005fc <ts_formatstring+0xa4>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 800057e:	9901      	ldr	r1, [sp, #4]
 8000580:	1c48      	adds	r0, r1, #1
 8000582:	9001      	str	r0, [sp, #4]
 8000584:	700b      	strb	r3, [r1, #0]
				  break;
 8000586:	e039      	b.n	80005fc <ts_formatstring+0xa4>
	while(*fmt)
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 8000588:	2b73      	cmp	r3, #115	; 0x73
 800058a:	d01e      	beq.n	80005ca <ts_formatstring+0x72>
 800058c:	d802      	bhi.n	8000594 <ts_formatstring+0x3c>
 800058e:	2b69      	cmp	r3, #105	; 0x69
 8000590:	d00c      	beq.n	80005ac <ts_formatstring+0x54>
 8000592:	e033      	b.n	80005fc <ts_formatstring+0xa4>
 8000594:	2b75      	cmp	r3, #117	; 0x75
 8000596:	d025      	beq.n	80005e4 <ts_formatstring+0x8c>
 8000598:	2b78      	cmp	r3, #120	; 0x78
 800059a:	d028      	beq.n	80005ee <ts_formatstring+0x96>
 800059c:	e02e      	b.n	80005fc <ts_formatstring+0xa4>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800059e:	9b01      	ldr	r3, [sp, #4]
 80005a0:	1c59      	adds	r1, r3, #1
 80005a2:	9101      	str	r1, [sp, #4]
 80005a4:	6811      	ldr	r1, [r2, #0]
 80005a6:	7019      	strb	r1, [r3, #0]
 80005a8:	3204      	adds	r2, #4
				break;
 80005aa:	e027      	b.n	80005fc <ts_formatstring+0xa4>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80005ac:	6811      	ldr	r1, [r2, #0]
					if (val < 0)
 80005ae:	2900      	cmp	r1, #0
					{
						val *= -1;
						*buf++ = '-';
 80005b0:	bfb8      	it	lt
 80005b2:	9b01      	ldrlt	r3, [sp, #4]
				*buf++ = va_arg(va, int);
				break;
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80005b4:	f102 0604 	add.w	r6, r2, #4
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
 80005b8:	bfbf      	itttt	lt
 80005ba:	1c5a      	addlt	r2, r3, #1
 80005bc:	9201      	strlt	r2, [sp, #4]
 80005be:	222d      	movlt	r2, #45	; 0x2d
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
 80005c0:	4249      	neglt	r1, r1
						*buf++ = '-';
 80005c2:	bfb8      	it	lt
 80005c4:	701a      	strblt	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80005c6:	a801      	add	r0, sp, #4
 80005c8:	e00f      	b.n	80005ea <ts_formatstring+0x92>
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80005ca:	6813      	ldr	r3, [r2, #0]
 80005cc:	1d11      	adds	r1, r2, #4
					while (*arg)
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	b132      	cbz	r2, 80005e0 <ts_formatstring+0x88>
					{
						*buf++ = *arg++;
 80005d2:	9a01      	ldr	r2, [sp, #4]
 80005d4:	1c50      	adds	r0, r2, #1
 80005d6:	9001      	str	r0, [sp, #4]
 80005d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80005dc:	7010      	strb	r0, [r2, #0]
 80005de:	e7f6      	b.n	80005ce <ts_formatstring+0x76>
					ts_itoa(&buf, val, 10);
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80005e0:	460a      	mov	r2, r1
 80005e2:	e00b      	b.n	80005fc <ts_formatstring+0xa4>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80005e4:	6811      	ldr	r1, [r2, #0]
 80005e6:	1d16      	adds	r6, r2, #4
 80005e8:	a801      	add	r0, sp, #4
 80005ea:	220a      	movs	r2, #10
 80005ec:	e003      	b.n	80005f6 <ts_formatstring+0x9e>
				break;
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80005ee:	1d16      	adds	r6, r2, #4
 80005f0:	6811      	ldr	r1, [r2, #0]
 80005f2:	a801      	add	r0, sp, #4
 80005f4:	2210      	movs	r2, #16
 80005f6:	f7ff ff95 	bl	8000524 <ts_itoa>
 80005fa:	4632      	mov	r2, r6
				break;
			  case '%':
				  *buf++ = '%';
				  break;
			}
			fmt++;
 80005fc:	3402      	adds	r4, #2
 80005fe:	e7af      	b.n	8000560 <ts_formatstring+0x8>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000600:	9901      	ldr	r1, [sp, #4]
 8000602:	1c48      	adds	r0, r1, #1
 8000604:	9001      	str	r0, [sp, #4]
 8000606:	3401      	adds	r4, #1
 8000608:	700b      	strb	r3, [r1, #0]
 800060a:	e7a9      	b.n	8000560 <ts_formatstring+0x8>
		}
	}
	*buf = 0;
 800060c:	9a01      	ldr	r2, [sp, #4]
 800060e:	7013      	strb	r3, [r2, #0]

	return (int)(buf - start_buf);
}
 8000610:	9801      	ldr	r0, [sp, #4]
 8000612:	1b40      	subs	r0, r0, r5
 8000614:	b002      	add	sp, #8
 8000616:	bd70      	pop	{r4, r5, r6, pc}

08000618 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8000618:	b570      	push	{r4, r5, r6, lr}
	int length = 0;
 800061a:	2300      	movs	r3, #0
	while (*fmt)
 800061c:	7802      	ldrb	r2, [r0, #0]
 800061e:	b39a      	cbz	r2, 8000688 <ts_formatlength+0x70>
	{
		if (*fmt == '%')
 8000620:	2a25      	cmp	r2, #37	; 0x25
 8000622:	d12a      	bne.n	800067a <ts_formatlength+0x62>
		{
			++fmt;
			switch (*fmt)
 8000624:	7842      	ldrb	r2, [r0, #1]
 8000626:	2a69      	cmp	r2, #105	; 0x69
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 8000628:	f100 0501 	add.w	r5, r0, #1
			switch (*fmt)
 800062c:	d014      	beq.n	8000658 <ts_formatlength+0x40>
 800062e:	d806      	bhi.n	800063e <ts_formatlength+0x26>
 8000630:	2a63      	cmp	r2, #99	; 0x63
 8000632:	d00e      	beq.n	8000652 <ts_formatlength+0x3a>
 8000634:	2a64      	cmp	r2, #100	; 0x64
 8000636:	d00f      	beq.n	8000658 <ts_formatlength+0x40>
 8000638:	2a58      	cmp	r2, #88	; 0x58
 800063a:	d11b      	bne.n	8000674 <ts_formatlength+0x5c>
 800063c:	e016      	b.n	800066c <ts_formatlength+0x54>
 800063e:	2a75      	cmp	r2, #117	; 0x75
 8000640:	d00a      	beq.n	8000658 <ts_formatlength+0x40>
 8000642:	2a78      	cmp	r2, #120	; 0x78
 8000644:	d012      	beq.n	800066c <ts_formatlength+0x54>
 8000646:	2a73      	cmp	r2, #115	; 0x73
 8000648:	d114      	bne.n	8000674 <ts_formatlength+0x5c>
				  length += 11;
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800064a:	6808      	ldr	r0, [r1, #0]
 800064c:	1d0c      	adds	r4, r1, #4
 800064e:	4601      	mov	r1, r0
			  		  while (*str++)
 8000650:	e005      	b.n	800065e <ts_formatlength+0x46>
		{
			++fmt;
			switch (*fmt)
			{
			  case 'c':
		  		  va_arg(va, int);
 8000652:	1d0c      	adds	r4, r1, #4
				  ++length;
 8000654:	1c5a      	adds	r2, r3, #1
				  break;
 8000656:	e013      	b.n	8000680 <ts_formatlength+0x68>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8000658:	f103 020b 	add.w	r2, r3, #11
 800065c:	e008      	b.n	8000670 <ts_formatlength+0x58>
 800065e:	1a1a      	subs	r2, r3, r0
 8000660:	440a      	add	r2, r1
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
			  		  while (*str++)
 8000662:	f811 6b01 	ldrb.w	r6, [r1], #1
 8000666:	2e00      	cmp	r6, #0
 8000668:	d1f9      	bne.n	800065e <ts_formatlength+0x46>
 800066a:	e009      	b.n	8000680 <ts_formatlength+0x68>
			  	  }
				  break;
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800066c:	f103 0208 	add.w	r2, r3, #8
				  va_arg(va, unsigned int);
 8000670:	1d0c      	adds	r4, r1, #4
				  break;
 8000672:	e005      	b.n	8000680 <ts_formatlength+0x68>
			  default:
				  ++length;
 8000674:	1c5a      	adds	r2, r3, #1
				  break;
 8000676:	460c      	mov	r4, r1
 8000678:	e002      	b.n	8000680 <ts_formatlength+0x68>
			}
		}
		else
		{
			++length;
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	460c      	mov	r4, r1
 800067e:	4605      	mov	r5, r0
		}
		++fmt;
 8000680:	1c68      	adds	r0, r5, #1
 8000682:	4621      	mov	r1, r4
 8000684:	4613      	mov	r3, r2
 8000686:	e7c9      	b.n	800061c <ts_formatlength+0x4>
	}
	return length;
}
 8000688:	4618      	mov	r0, r3
 800068a:	bd70      	pop	{r4, r5, r6, pc}

0800068c <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 800068c:	b40f      	push	{r0, r1, r2, r3}
 800068e:	b5b0      	push	{r4, r5, r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	f107 0418 	add.w	r4, r7, #24
 8000698:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 800069c:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 800069e:	4621      	mov	r1, r4
 80006a0:	4628      	mov	r0, r5
 80006a2:	f7ff ffb9 	bl	8000618 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 80006a6:	3007      	adds	r0, #7
 80006a8:	f020 0007 	bic.w	r0, r0, #7
 80006ac:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 80006b0:	4629      	mov	r1, r5
 80006b2:	4622      	mov	r2, r4
 80006b4:	4668      	mov	r0, sp
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
	va_end(va);
	{
		char buf[length];
		va_start(va, fmt);
 80006b6:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 80006b8:	f7ff ff4e 	bl	8000558 <ts_formatstring>
		length = _write(1, buf, length);
 80006bc:	4669      	mov	r1, sp
	length = ts_formatlength(fmt, va);
	va_end(va);
	{
		char buf[length];
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 80006be:	4602      	mov	r2, r0
		length = _write(1, buf, length);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff fea1 	bl	8000408 <_write>
		va_end(va);
	}
	return length;
}
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80006ce:	b004      	add	sp, #16
 80006d0:	4770      	bx	lr
	...

080006d4 <my_log>:


int my_log ( int level , char *name, const char *fmt, ... ) {
 80006d4:	b40c      	push	{r2, r3}
 80006d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80006e2:	460e      	mov	r6, r1
 80006e4:	f854 8b04 	ldr.w	r8, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 80006e8:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 80006ea:	4621      	mov	r1, r4
	}
	return length;
}


int my_log ( int level , char *name, const char *fmt, ... ) {
 80006ec:	4605      	mov	r5, r0
	int length = 0;
	va_list va;
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
 80006ee:	4640      	mov	r0, r8
 80006f0:	f7ff ff92 	bl	8000618 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 80006f4:	3007      	adds	r0, #7
 80006f6:	f020 0007 	bic.w	r0, r0, #7
 80006fa:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 80006fe:	4622      	mov	r2, r4
 8000700:	4641      	mov	r1, r8
 8000702:	4668      	mov	r0, sp
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
	va_end(va);
	{
		char buf[length];
		va_start(va, fmt);
 8000704:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 8000706:	f7ff ff27 	bl	8000558 <ts_formatstring>
        printf ( "[%d.%d]  " , my_tick/1000 , my_tick % 1000 );
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <my_log+0xb0>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	length = ts_formatlength(fmt, va);
	va_end(va);
	{
		char buf[length];
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 8000712:	4604      	mov	r4, r0
        printf ( "[%d.%d]  " , my_tick/1000 , my_tick % 1000 );
 8000714:	fbb2 f1f3 	udiv	r1, r2, r3
 8000718:	481b      	ldr	r0, [pc, #108]	; (8000788 <my_log+0xb4>)
 800071a:	fb03 2211 	mls	r2, r3, r1, r2
	va_list va;
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
	va_end(va);
	{
		char buf[length];
 800071e:	46e9      	mov	r9, sp
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
        printf ( "[%d.%d]  " , my_tick/1000 , my_tick % 1000 );
 8000720:	f7ff ffb4 	bl	800068c <printf>

        if ( name )
 8000724:	b13e      	cbz	r6, 8000736 <my_log+0x62>
            _write(1, name, strlen(name) );
 8000726:	4630      	mov	r0, r6
 8000728:	f001 f834 	bl	8001794 <strlen>
 800072c:	4631      	mov	r1, r6
 800072e:	4602      	mov	r2, r0
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff fe69 	bl	8000408 <_write>

        if ( level == 0 ) _write(1, " [I]  " , 6 );
 8000736:	b915      	cbnz	r5, 800073e <my_log+0x6a>
 8000738:	2001      	movs	r0, #1
 800073a:	4914      	ldr	r1, [pc, #80]	; (800078c <my_log+0xb8>)
 800073c:	e00d      	b.n	800075a <my_log+0x86>
        else if ( level == 1 ) _write(1, " [W]  ", 6 );
 800073e:	2d01      	cmp	r5, #1
 8000740:	d102      	bne.n	8000748 <my_log+0x74>
 8000742:	4628      	mov	r0, r5
 8000744:	4912      	ldr	r1, [pc, #72]	; (8000790 <my_log+0xbc>)
 8000746:	e008      	b.n	800075a <my_log+0x86>
        else if ( level == 2 ) _write(1, " [E]  ", 6 );
 8000748:	2d02      	cmp	r5, #2
 800074a:	d102      	bne.n	8000752 <my_log+0x7e>
 800074c:	2001      	movs	r0, #1
 800074e:	4911      	ldr	r1, [pc, #68]	; (8000794 <my_log+0xc0>)
 8000750:	e003      	b.n	800075a <my_log+0x86>
        else if ( level == 3 ) _write(1, " [F]  ", 6 );
 8000752:	2d03      	cmp	r5, #3
 8000754:	d104      	bne.n	8000760 <my_log+0x8c>
 8000756:	4910      	ldr	r1, [pc, #64]	; (8000798 <my_log+0xc4>)
 8000758:	2001      	movs	r0, #1
 800075a:	2206      	movs	r2, #6
 800075c:	f7ff fe54 	bl	8000408 <_write>
		length = _write(1, buf, length);
 8000760:	4649      	mov	r1, r9
 8000762:	4622      	mov	r2, r4
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff fe4f 	bl	8000408 <_write>
        _write(1, "\r", 2);
 800076a:	490c      	ldr	r1, [pc, #48]	; (800079c <my_log+0xc8>)

        if ( level == 0 ) _write(1, " [I]  " , 6 );
        else if ( level == 1 ) _write(1, " [W]  ", 6 );
        else if ( level == 2 ) _write(1, " [E]  ", 6 );
        else if ( level == 3 ) _write(1, " [F]  ", 6 );
		length = _write(1, buf, length);
 800076c:	4604      	mov	r4, r0
        _write(1, "\r", 2);
 800076e:	2202      	movs	r2, #2
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff fe49 	bl	8000408 <_write>
		va_end(va);
	}
	return length;
}
 8000776:	4620      	mov	r0, r4
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000780:	b002      	add	sp, #8
 8000782:	4770      	bx	lr
 8000784:	20000870 	.word	0x20000870
 8000788:	08002f9c 	.word	0x08002f9c
 800078c:	08002fa6 	.word	0x08002fa6
 8000790:	08002fad 	.word	0x08002fad
 8000794:	08002fb4 	.word	0x08002fb4
 8000798:	08002fbb 	.word	0x08002fbb
 800079c:	0800305d 	.word	0x0800305d

080007a0 <SPI_Init>:
#define SPI_MODULE "spi"

SPI_HandleTypeDef  hspi;

int16_t SPI_Init(void)
{
 80007a0:	b513      	push	{r0, r1, r4, lr}

	HAL_SPI_DeInit(&hspi);
 80007a2:	4c15      	ldr	r4, [pc, #84]	; (80007f8 <SPI_Init+0x58>)
 80007a4:	4620      	mov	r0, r4
 80007a6:	f000 fb8a 	bl	8000ebe <HAL_SPI_DeInit>

	SPI1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	4a13      	ldr	r2, [pc, #76]	; (80007fc <SPI_Init+0x5c>)
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80007b2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80007b6:	6451      	str	r1, [r2, #68]	; 0x44
 80007b8:	6c52      	ldr	r2, [r2, #68]	; 0x44

	hspi.Init.Mode = SPI_MODE_MASTER;
	hspi.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	60a3      	str	r3, [r4, #8]
int16_t SPI_Init(void)
{

	HAL_SPI_DeInit(&hspi);

	SPI1_CLK_ENABLE();
 80007bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80007c0:	9201      	str	r2, [sp, #4]

	hspi.Init.Mode = SPI_MODE_MASTER;
	hspi.Init.Direction = SPI_DIRECTION_2LINES;
	hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c2:	60e3      	str	r3, [r4, #12]
	hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c4:	6123      	str	r3, [r4, #16]
	hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c6:	6163      	str	r3, [r4, #20]
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c8:	6223      	str	r3, [r4, #32]
	//hspi.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;      
	//hspi.Init.CRCPolynomial = 7;
	hspi.Init.NSS = SPI_NSS_SOFT;      
 80007ca:	f44f 7300 	mov.w	r3, #512	; 0x200
int16_t SPI_Init(void)
{

	HAL_SPI_DeInit(&hspi);

	SPI1_CLK_ENABLE();
 80007ce:	9a01      	ldr	r2, [sp, #4]
	hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
	hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
	//hspi.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;      
	//hspi.Init.CRCPolynomial = 7;
	hspi.Init.NSS = SPI_NSS_SOFT;      
 80007d0:	61a3      	str	r3, [r4, #24]

	HAL_SPI_DeInit(&hspi);

	SPI1_CLK_ENABLE();

	hspi.Init.Mode = SPI_MODE_MASTER;
 80007d2:	f44f 7282 	mov.w	r2, #260	; 0x104
	hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
	//hspi.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;      
	//hspi.Init.CRCPolynomial = 7;
	hspi.Init.NSS = SPI_NSS_SOFT;      
	hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;                   
 80007d6:	2308      	movs	r3, #8

	if(HAL_SPI_Init(&hspi) != HAL_OK) {
 80007d8:	4620      	mov	r0, r4

	HAL_SPI_DeInit(&hspi);

	SPI1_CLK_ENABLE();

	hspi.Init.Mode = SPI_MODE_MASTER;
 80007da:	6062      	str	r2, [r4, #4]
	hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
	//hspi.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;      
	//hspi.Init.CRCPolynomial = 7;
	hspi.Init.NSS = SPI_NSS_SOFT;      
	hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;                   
 80007dc:	61e3      	str	r3, [r4, #28]

	if(HAL_SPI_Init(&hspi) != HAL_OK) {
 80007de:	f000 fb2d 	bl	8000e3c <HAL_SPI_Init>
 80007e2:	b108      	cbz	r0, 80007e8 <SPI_Init+0x48>
    	Error_Handler();
 80007e4:	f000 f890 	bl	8000908 <Error_Handler>
	}
  
	__HAL_SPI_ENABLE(&hspi);
 80007e8:	6822      	ldr	r2, [r4, #0]
 80007ea:	6813      	ldr	r3, [r2, #0]


	return 0;
}
 80007ec:	2000      	movs	r0, #0

	if(HAL_SPI_Init(&hspi) != HAL_OK) {
    	Error_Handler();
	}
  
	__HAL_SPI_ENABLE(&hspi);
 80007ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f2:	6013      	str	r3, [r2, #0]


	return 0;
}
 80007f4:	b002      	add	sp, #8
 80007f6:	bd10      	pop	{r4, pc}
 80007f8:	200008ec 	.word	0x200008ec
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *h)
{
 8000800:	b530      	push	{r4, r5, lr}
 8000802:	b08d      	sub	sp, #52	; 0x34
	if(h==NULL) {
 8000804:	b920      	cbnz	r0, 8000810 <HAL_SPI_MspInit+0x10>
		my_log(0,SPI_MODULE,"hspi is null");
 8000806:	4919      	ldr	r1, [pc, #100]	; (800086c <HAL_SPI_MspInit+0x6c>)
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <HAL_SPI_MspInit+0x70>)
 800080a:	f7ff ff63 	bl	80006d4 <my_log>
 800080e:	e02b      	b.n	8000868 <HAL_SPI_MspInit+0x68>
		return;
	}

	SPI1_GPIOA_CLK_ENABLE();
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Pin = SPI1_MOSI_PIN | SPI1_SCK_PIN | SPI1_MISO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(SPI1_PORTA_GPIO_PORT, &GPIO_InitStruct);
 8000812:	4819      	ldr	r0, [pc, #100]	; (8000878 <HAL_SPI_MspInit+0x78>)
	if(h==NULL) {
		my_log(0,SPI_MODULE,"hspi is null");
		return;
	}

	SPI1_GPIOA_CLK_ENABLE();
 8000814:	2400      	movs	r4, #0
 8000816:	9400      	str	r4, [sp, #0]
 8000818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800081a:	f042 0201 	orr.w	r2, r2, #1
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
 8000820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000822:	f002 0201 	and.w	r2, r2, #1
 8000826:	9200      	str	r2, [sp, #0]
 8000828:	9a00      	ldr	r2, [sp, #0]
	SPI1_GPIOE_CLK_ENABLE();
 800082a:	9401      	str	r4, [sp, #4]
 800082c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800082e:	f042 0210 	orr.w	r2, r2, #16
 8000832:	631a      	str	r2, [r3, #48]	; 0x30
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30

	GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = SPI1_MOSI_PIN | SPI1_SCK_PIN | SPI1_MISO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	9404      	str	r4, [sp, #16]
		my_log(0,SPI_MODULE,"hspi is null");
		return;
	}

	SPI1_GPIOA_CLK_ENABLE();
	SPI1_GPIOE_CLK_ENABLE();
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	9b01      	ldr	r3, [sp, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = SPI1_MOSI_PIN | SPI1_SCK_PIN | SPI1_MISO_PIN;
 8000840:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2502      	movs	r5, #2
	SPI1_GPIOA_CLK_ENABLE();
	SPI1_GPIOE_CLK_ENABLE();

	GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = SPI1_MOSI_PIN | SPI1_SCK_PIN | SPI1_MISO_PIN;
 8000844:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(SPI1_PORTA_GPIO_PORT, &GPIO_InitStruct);
 8000846:	a902      	add	r1, sp, #8

    GPIO_InitStruct.Pin = SPI1_MOSI_PIN | SPI1_SCK_PIN | SPI1_MISO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000848:	2305      	movs	r3, #5
 800084a:	9306      	str	r3, [sp, #24]
	SPI1_GPIOE_CLK_ENABLE();

	GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = SPI1_MOSI_PIN | SPI1_SCK_PIN | SPI1_MISO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800084e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(SPI1_PORTA_GPIO_PORT, &GPIO_InitStruct);
 8000850:	f000 f9a8 	bl	8000ba4 <HAL_GPIO_Init>

	GPIO_InitTypeDef GPIO_InitStructE;
    GPIO_InitStructE.Pin = SPI1_CS_PIN;
 8000854:	2308      	movs	r3, #8
 8000856:	9307      	str	r3, [sp, #28]
    GPIO_InitStructE.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructE.Pull  = GPIO_NOPULL;
  	GPIO_InitStructE.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(SPI1_PORTE_GPIO_PORT, &GPIO_InitStructE);
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <HAL_SPI_MspInit+0x7c>)
    HAL_GPIO_Init(SPI1_PORTA_GPIO_PORT, &GPIO_InitStruct);

	GPIO_InitTypeDef GPIO_InitStructE;
    GPIO_InitStructE.Pin = SPI1_CS_PIN;
    GPIO_InitStructE.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructE.Pull  = GPIO_NOPULL;
 800085a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(SPI1_PORTA_GPIO_PORT, &GPIO_InitStruct);

	GPIO_InitTypeDef GPIO_InitStructE;
    GPIO_InitStructE.Pin = SPI1_CS_PIN;
    GPIO_InitStructE.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
    GPIO_InitStructE.Pull  = GPIO_NOPULL;
  	GPIO_InitStructE.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(SPI1_PORTE_GPIO_PORT, &GPIO_InitStructE);
 800085e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(SPI1_PORTA_GPIO_PORT, &GPIO_InitStruct);

	GPIO_InitTypeDef GPIO_InitStructE;
    GPIO_InitStructE.Pin = SPI1_CS_PIN;
    GPIO_InitStructE.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	9308      	str	r3, [sp, #32]
    GPIO_InitStructE.Pull  = GPIO_NOPULL;
  	GPIO_InitStructE.Speed = GPIO_SPEED_FAST;
 8000862:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(SPI1_PORTE_GPIO_PORT, &GPIO_InitStructE);
 8000864:	f000 f99e 	bl	8000ba4 <HAL_GPIO_Init>

}
 8000868:	b00d      	add	sp, #52	; 0x34
 800086a:	bd30      	pop	{r4, r5, pc}
 800086c:	08002fc2 	.word	0x08002fc2
 8000870:	08002fc6 	.word	0x08002fc6
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	40021000 	.word	0x40021000

08000880 <write>:

uint8_t write()
{
 8000880:	b5f0      	push	{r4, r5, r6, r7, lr}


  my_log(0,SPI_MODULE,"SPI tx/rx\r\n");
 8000882:	4d1b      	ldr	r5, [pc, #108]	; (80008f0 <write+0x70>)
  uint8_t txData[2]={0x0f,0x00};
  uint8_t rxData[2]={0x00,0x00};

  my_log(0,SPI_MODULE,"HAL_SPI_TransmitReceive tx/rx\r\n");

  HAL_GPIO_WritePin (SPI1_PORTE_GPIO_PORT, SPI1_CS_PIN, GPIO_PIN_RESET);
 8000884:	4e1b      	ldr	r6, [pc, #108]	; (80008f4 <write+0x74>)

uint8_t write()
{


  my_log(0,SPI_MODULE,"SPI tx/rx\r\n");
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <write+0x78>)
    HAL_GPIO_Init(SPI1_PORTE_GPIO_PORT, &GPIO_InitStructE);

}

uint8_t write()
{
 8000888:	b085      	sub	sp, #20


  my_log(0,SPI_MODULE,"SPI tx/rx\r\n");
  HAL_StatusTypeDef ret;
  uint8_t txData[2]={0x0f,0x00};
 800088a:	2400      	movs	r4, #0

uint8_t write()
{


  my_log(0,SPI_MODULE,"SPI tx/rx\r\n");
 800088c:	4629      	mov	r1, r5
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ff20 	bl	80006d4 <my_log>
  HAL_StatusTypeDef ret;
  uint8_t txData[2]={0x0f,0x00};
 8000894:	230f      	movs	r3, #15
  uint8_t rxData[2]={0x00,0x00};

  my_log(0,SPI_MODULE,"HAL_SPI_TransmitReceive tx/rx\r\n");
 8000896:	4629      	mov	r1, r5
 8000898:	4620      	mov	r0, r4
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <write+0x7c>)
{


  my_log(0,SPI_MODULE,"SPI tx/rx\r\n");
  HAL_StatusTypeDef ret;
  uint8_t txData[2]={0x0f,0x00};
 800089c:	f88d 3008 	strb.w	r3, [sp, #8]
 80008a0:	f88d 4009 	strb.w	r4, [sp, #9]
  uint8_t rxData[2]={0x00,0x00};
 80008a4:	f88d 400c 	strb.w	r4, [sp, #12]
 80008a8:	f88d 400d 	strb.w	r4, [sp, #13]

  my_log(0,SPI_MODULE,"HAL_SPI_TransmitReceive tx/rx\r\n");
 80008ac:	f7ff ff12 	bl	80006d4 <my_log>

  HAL_GPIO_WritePin (SPI1_PORTE_GPIO_PORT, SPI1_CS_PIN, GPIO_PIN_RESET);
 80008b0:	4630      	mov	r0, r6
 80008b2:	4622      	mov	r2, r4
 80008b4:	2108      	movs	r1, #8
 80008b6:	f000 fa59 	bl	8000d6c <HAL_GPIO_WritePin>

  ret = HAL_SPI_TransmitReceive(&hspi, txData, rxData, 1, 500);
 80008ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	a902      	add	r1, sp, #8
 80008c2:	aa03      	add	r2, sp, #12
 80008c4:	2301      	movs	r3, #1
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <write+0x80>)
 80008c8:	f000 fb0f 	bl	8000eea <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin (SPI1_PORTE_GPIO_PORT, SPI1_CS_PIN, GPIO_PIN_SET);
 80008cc:	2108      	movs	r1, #8

  my_log(0,SPI_MODULE,"HAL_SPI_TransmitReceive tx/rx\r\n");

  HAL_GPIO_WritePin (SPI1_PORTE_GPIO_PORT, SPI1_CS_PIN, GPIO_PIN_RESET);

  ret = HAL_SPI_TransmitReceive(&hspi, txData, rxData, 1, 500);
 80008ce:	4607      	mov	r7, r0
  HAL_GPIO_WritePin (SPI1_PORTE_GPIO_PORT, SPI1_CS_PIN, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	4630      	mov	r0, r6
 80008d4:	f000 fa4a 	bl	8000d6c <HAL_GPIO_WritePin>

  //ret = HAL_SPI_Transmit(&hspi, txData, 1, 1000);
  my_log(0,SPI_MODULE,"HAL_SPI_TransmitReceive returned <ret=%d>, res = <%x>\n",ret,rxData[0]);
 80008d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4620      	mov	r0, r4
 80008e0:	4629      	mov	r1, r5
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <write+0x84>)
 80008e4:	463b      	mov	r3, r7
 80008e6:	f7ff fef5 	bl	80006d4 <my_log>

  return 0;
}
 80008ea:	4620      	mov	r0, r4
 80008ec:	b005      	add	sp, #20
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	08002fc2 	.word	0x08002fc2
 80008f4:	40021000 	.word	0x40021000
 80008f8:	08002fd3 	.word	0x08002fd3
 80008fc:	08002fdf 	.word	0x08002fdf
 8000900:	200008ec 	.word	0x200008ec
 8000904:	08002fff 	.word	0x08002fff

08000908 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b508      	push	{r3, lr}
  printf("============== Error_Handler ==========\r\n" );
 800090a:	4808      	ldr	r0, [pc, #32]	; (800092c <Error_Handler+0x24>)
 800090c:	f000 ff3a 	bl	8001784 <puts>
  /* Turn LED5 on */
  BSP_LED_On(LED3);
 8000910:	2001      	movs	r0, #1
 8000912:	f000 fe73 	bl	80015fc <BSP_LED_On>
  BSP_LED_Off(LED4);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fe7e 	bl	8001618 <BSP_LED_Off>
  BSP_LED_Off(LED5);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fe7b 	bl	8001618 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8000922:	2003      	movs	r0, #3
 8000924:	f000 fe78 	bl	8001618 <BSP_LED_Off>
  while(1)
  {
  }
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x20>
 800092a:	bf00      	nop
 800092c:	08003036 	.word	0x08003036

08000930 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000930:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <SystemInit+0xd0>)
 8000932:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000934:	2100      	movs	r1, #0
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000936:	f042 0201 	orr.w	r2, r2, #1
 800093a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800093c:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000944:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000948:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800094a:	4a2e      	ldr	r2, [pc, #184]	; (8000a04 <SystemInit+0xd4>)
 800094c:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800094e:	681a      	ldr	r2, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000952:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000956:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000958:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800095a:	9100      	str	r1, [sp, #0]
 800095c:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000964:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <SystemInit+0xd0>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800096e:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8000970:	9a00      	ldr	r2, [sp, #0]
 8000972:	3201      	adds	r2, #1
 8000974:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000976:	9a01      	ldr	r2, [sp, #4]
 8000978:	b912      	cbnz	r2, 8000980 <SystemInit+0x50>
 800097a:	9a00      	ldr	r2, [sp, #0]
 800097c:	2a64      	cmp	r2, #100	; 0x64
 800097e:	d1f2      	bne.n	8000966 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000986:	bf18      	it	ne
 8000988:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800098a:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 800098c:	9b01      	ldr	r3, [sp, #4]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d005      	beq.n	800099e <SystemInit+0x6e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <SystemInit+0xd8>)
 8000994:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000998:	609a      	str	r2, [r3, #8]
#endif
}
 800099a:	b002      	add	sp, #8
 800099c:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <SystemInit+0xd0>)
    PWR->CR |= PWR_CR_PMODE;  
 80009a0:	491a      	ldr	r1, [pc, #104]	; (8000a0c <SystemInit+0xdc>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80009a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80009aa:	680a      	ldr	r2, [r1, #0]
 80009ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009b0:	600a      	str	r2, [r1, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009bc:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80009c4:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <SystemInit+0xe0>)
 80009c8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80009d0:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <SystemInit+0xd0>)
 80009d6:	0189      	lsls	r1, r1, #6
 80009d8:	d5fb      	bpl.n	80009d2 <SystemInit+0xa2>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <SystemInit+0xe4>)
 80009dc:	f240 6105 	movw	r1, #1541	; 0x605
 80009e0:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80009e2:	6893      	ldr	r3, [r2, #8]
 80009e4:	f023 0303 	bic.w	r3, r3, #3
 80009e8:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80009ea:	6893      	ldr	r3, [r2, #8]
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80009f2:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <SystemInit+0xd0>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 030c 	and.w	r3, r3, #12
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d1f9      	bne.n	80009f2 <SystemInit+0xc2>
 80009fe:	e7c8      	b.n	8000992 <SystemInit+0x62>
 8000a00:	40023800 	.word	0x40023800
 8000a04:	24003010 	.word	0x24003010
 8000a08:	e000ed00 	.word	0xe000ed00
 8000a0c:	40007000 	.word	0x40007000
 8000a10:	07405408 	.word	0x07405408
 8000a14:	40023c00 	.word	0x40023c00

08000a18 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a18:	4770      	bx	lr

08000a1a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler>

08000a1c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler>

08000a1e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler>

08000a20 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler>

08000a22 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a24:	4770      	bx	lr

08000a26 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000a28:	f7ff bca0 	b.w	800036c <HAL_IncTick>

08000a2c <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 b9a3 	b.w	8000d78 <HAL_GPIO_EXTI_IRQHandler>
	...

08000a34 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_RCC_GetPCLK1Freq+0x24>)
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a36:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	fa92 f2a2 	rbit	r2, r2
 8000a40:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a44:	fab2 f282 	clz	r2, r2
 8000a48:	40d3      	lsrs	r3, r2
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000a4c:	5cd3      	ldrb	r3, [r2, r3]
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000a50:	6810      	ldr	r0, [r2, #0]
}
 8000a52:	40d8      	lsrs	r0, r3
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	0800305f 	.word	0x0800305f
 8000a60:	20000000 	.word	0x20000000

08000a64 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000a66:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	fa92 f2a2 	rbit	r2, r2
 8000a70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a74:	fab2 f282 	clz	r2, r2
 8000a78:	40d3      	lsrs	r3, r2
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000a7c:	5cd3      	ldrb	r3, [r2, r3]
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000a80:	6810      	ldr	r0, [r2, #0]
} 
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	0800305f 	.word	0x0800305f
 8000a90:	20000000 	.word	0x20000000

08000a94 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000a94:	4770      	bx	lr
	...

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000aa8:	f000 f866 	bl	8000b78 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f000 f830 	bl	8000b18 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ab8:	2000      	movs	r0, #0
 8000aba:	bd10      	pop	{r4, pc}
 8000abc:	20000000 	.word	0x20000000

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_Init+0x30>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000aca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ad2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ada:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f809 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f7ff ffd8 	bl	8000a98 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff ffd4 	bl	8000a94 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000aec:	2000      	movs	r0, #0
 8000aee:	bd08      	pop	{r3, pc}
 8000af0:	40023c00 	.word	0x40023c00

08000af4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000af6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000b0c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000b10:	60d3      	str	r3, [r2, #12]
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_NVIC_SetPriority+0x58>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b20:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b22:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	1d1c      	adds	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	2d04      	cmp	r5, #4
 8000b2a:	bf28      	it	cs
 8000b2c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	2c06      	cmp	r4, #6
 8000b30:	bf8c      	ite	hi
 8000b32:	3b03      	subhi	r3, #3
 8000b34:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b36:	2401      	movs	r4, #1
 8000b38:	fa04 f603 	lsl.w	r6, r4, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	40ac      	lsls	r4, r5
 8000b3e:	3c01      	subs	r4, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b42:	4021      	ands	r1, r4
 8000b44:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b46:	4032      	ands	r2, r6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000b48:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000b4a:	ea42 0201 	orr.w	r2, r2, r1
 8000b4e:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	bfaf      	iteee	ge
 8000b54:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	f000 000f 	andlt.w	r0, r0, #15
 8000b5c:	4b05      	ldrlt	r3, [pc, #20]	; (8000b74 <HAL_NVIC_SetPriority+0x5c>)
 8000b5e:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	bfa5      	ittet	ge
 8000b62:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000b66:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	e000ed14 	.word	0xe000ed14

08000b78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	3801      	subs	r0, #1
 8000b7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	bf3f      	itttt	cc
 8000b80:	4b06      	ldrcc	r3, [pc, #24]	; (8000b9c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	4a07      	ldrcc	r2, [pc, #28]	; (8000ba0 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b84:	6058      	strcc	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	21f0      	movcc	r1, #240	; 0xf0
 8000b88:	bf3f      	itttt	cc
 8000b8a:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8e:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b90:	2207      	movcc	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b92:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b94:	bf34      	ite	cc
 8000b96:	601a      	strcc	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b98:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e010 	.word	0xe000e010
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba8:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000baa:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000bac:	2301      	movs	r3, #1
 8000bae:	4093      	lsls	r3, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb0:	ea03 0507 	and.w	r5, r3, r7

    if(iocurrent == ioposition)
 8000bb4:	429d      	cmp	r5, r3
 8000bb6:	f040 80cb 	bne.w	8000d50 <HAL_GPIO_Init+0x1ac>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bba:	684c      	ldr	r4, [r1, #4]
 8000bbc:	f024 0c10 	bic.w	ip, r4, #16
 8000bc0:	f1bc 0f02 	cmp.w	ip, #2
 8000bc4:	d114      	bne.n	8000bf0 <HAL_GPIO_Init+0x4c>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bc6:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 8000bca:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000bce:	f002 0607 	and.w	r6, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd2:	f8de 3020 	ldr.w	r3, [lr, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000bd6:	00b6      	lsls	r6, r6, #2
 8000bd8:	f04f 080f 	mov.w	r8, #15
 8000bdc:	fa08 f806 	lsl.w	r8, r8, r6
 8000be0:	ea23 0808 	bic.w	r8, r3, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000be4:	690b      	ldr	r3, [r1, #16]
 8000be6:	40b3      	lsls	r3, r6
 8000be8:	ea48 0303 	orr.w	r3, r8, r3
        GPIOx->AFR[position >> 3U] = temp;
 8000bec:	f8ce 3020 	str.w	r3, [lr, #32]
 8000bf0:	ea4f 0e42 	mov.w	lr, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf4:	2303      	movs	r3, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf8:	fa03 f30e 	lsl.w	r3, r3, lr
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	ea03 0806 	and.w	r8, r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c02:	f004 0603 	and.w	r6, r4, #3
 8000c06:	fa06 f60e 	lsl.w	r6, r6, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c0e:	ea48 0606 	orr.w	r6, r8, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c12:	f1bc 0f01 	cmp.w	ip, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000c16:	6006      	str	r6, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c18:	d811      	bhi.n	8000c3e <HAL_GPIO_Init+0x9a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c1c:	ea03 0c06 	and.w	ip, r3, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c20:	68ce      	ldr	r6, [r1, #12]
 8000c22:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c26:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OSPEEDR = temp;
 8000c2a:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2e:	ea26 0c05 	bic.w	ip, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c32:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000c36:	4096      	lsls	r6, r2
 8000c38:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OTYPER = temp;
 8000c3c:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c3e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c40:	ea03 0c06 	and.w	ip, r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c44:	688b      	ldr	r3, [r1, #8]
 8000c46:	fa03 f60e 	lsl.w	r6, r3, lr
 8000c4a:	ea4c 0306 	orr.w	r3, ip, r6
      GPIOx->PUPDR = temp;
 8000c4e:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c50:	00e3      	lsls	r3, r4, #3
 8000c52:	d57d      	bpl.n	8000d50 <HAL_GPIO_Init+0x1ac>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c54:	4e42      	ldr	r6, [pc, #264]	; (8000d60 <HAL_GPIO_Init+0x1bc>)
 8000c56:	2300      	movs	r3, #0
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	f8d6 e044 	ldr.w	lr, [r6, #68]	; 0x44
 8000c5e:	f44e 4e80 	orr.w	lr, lr, #16384	; 0x4000
 8000c62:	f8c6 e044 	str.w	lr, [r6, #68]	; 0x44
 8000c66:	6c76      	ldr	r6, [r6, #68]	; 0x44
 8000c68:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000c6c:	9601      	str	r6, [sp, #4]
 8000c6e:	9e01      	ldr	r6, [sp, #4]
 8000c70:	f022 0603 	bic.w	r6, r2, #3
 8000c74:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000c78:	f506 369c 	add.w	r6, r6, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000c7c:	f002 0c03 	and.w	ip, r2, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c80:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000c84:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c88:	f04f 0e0f 	mov.w	lr, #15
 8000c8c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8000c90:	ea28 0e0e 	bic.w	lr, r8, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d68 <HAL_GPIO_Init+0x1c4>
 8000c98:	4540      	cmp	r0, r8
 8000c9a:	d02b      	beq.n	8000cf4 <HAL_GPIO_Init+0x150>
 8000c9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ca0:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000ca4:	4298      	cmp	r0, r3
 8000ca6:	d01a      	beq.n	8000cde <HAL_GPIO_Init+0x13a>
 8000ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d018      	beq.n	8000ce2 <HAL_GPIO_Init+0x13e>
 8000cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cb4:	4298      	cmp	r0, r3
 8000cb6:	d016      	beq.n	8000ce6 <HAL_GPIO_Init+0x142>
 8000cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	d014      	beq.n	8000cea <HAL_GPIO_Init+0x146>
 8000cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cc4:	4298      	cmp	r0, r3
 8000cc6:	d012      	beq.n	8000cee <HAL_GPIO_Init+0x14a>
 8000cc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d010      	beq.n	8000cf2 <HAL_GPIO_Init+0x14e>
 8000cd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2307      	moveq	r3, #7
 8000cda:	2308      	movne	r3, #8
 8000cdc:	e00a      	b.n	8000cf4 <HAL_GPIO_Init+0x150>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e008      	b.n	8000cf4 <HAL_GPIO_Init+0x150>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e006      	b.n	8000cf4 <HAL_GPIO_Init+0x150>
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e004      	b.n	8000cf4 <HAL_GPIO_Init+0x150>
 8000cea:	2304      	movs	r3, #4
 8000cec:	e002      	b.n	8000cf4 <HAL_GPIO_Init+0x150>
 8000cee:	2305      	movs	r3, #5
 8000cf0:	e000      	b.n	8000cf4 <HAL_GPIO_Init+0x150>
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	fa03 f30c 	lsl.w	r3, r3, ip
 8000cf8:	ea43 030e 	orr.w	r3, r3, lr
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cfc:	f8df e064 	ldr.w	lr, [pc, #100]	; 8000d64 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d00:	60b3      	str	r3, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d02:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000d06:	43ee      	mvns	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d08:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 8000d0c:	bf14      	ite	ne
 8000d0e:	432b      	orrne	r3, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000d10:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000d12:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000d16:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000d1a:	f8df e048 	ldr.w	lr, [pc, #72]	; 8000d64 <HAL_GPIO_Init+0x1c0>
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d1e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        {
          temp |= iocurrent;
 8000d22:	bf14      	ite	ne
 8000d24:	432b      	orrne	r3, r5
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000d26:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000d28:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d2c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d30:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8000d34:	bf14      	ite	ne
 8000d36:	432b      	orrne	r3, r5
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000d38:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000d3a:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000d3e:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d42:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000d44:	bf54      	ite	pl
 8000d46:	ea06 0503 	andpl.w	r5, r6, r3
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000d4a:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR = temp;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_GPIO_Init+0x1c0>)
 8000d4e:	60dd      	str	r5, [r3, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d50:	3201      	adds	r2, #1
 8000d52:	2a10      	cmp	r2, #16
 8000d54:	f47f af2a 	bne.w	8000bac <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000d58:	b002      	add	sp, #8
 8000d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40013c00 	.word	0x40013c00
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d6c:	b902      	cbnz	r2, 8000d70 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d6e:	0409      	lsls	r1, r1, #16
 8000d70:	6181      	str	r1, [r0, #24]
 8000d72:	4770      	bx	lr

08000d74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d74:	4770      	bx	lr
	...

08000d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d78:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000d7c:	6959      	ldr	r1, [r3, #20]
 8000d7e:	4208      	tst	r0, r1
 8000d80:	d002      	beq.n	8000d88 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d82:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d84:	f7ff fff6 	bl	8000d74 <HAL_GPIO_EXTI_Callback>
 8000d88:	bd08      	pop	{r3, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40013c00 	.word	0x40013c00

08000d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d94:	9d06      	ldr	r5, [sp, #24]
 8000d96:	4604      	mov	r4, r0
 8000d98:	460f      	mov	r7, r1
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	461e      	mov	r6, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	6898      	ldr	r0, [r3, #8]
 8000da2:	4038      	ands	r0, r7
 8000da4:	1bc2      	subs	r2, r0, r7
 8000da6:	4250      	negs	r0, r2
 8000da8:	4150      	adcs	r0, r2
 8000daa:	4540      	cmp	r0, r8
 8000dac:	d033      	beq.n	8000e16 <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000dae:	1c71      	adds	r1, r6, #1
 8000db0:	d0f6      	beq.n	8000da0 <SPI_WaitFlagStateUntilTimeout+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000db2:	b94e      	cbnz	r6, 8000dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000dbc:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dbe:	6862      	ldr	r2, [r4, #4]
 8000dc0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000dc4:	d111      	bne.n	8000dea <SPI_WaitFlagStateUntilTimeout+0x5a>
 8000dc6:	e005      	b.n	8000dd4 <SPI_WaitFlagStateUntilTimeout+0x44>
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000dc8:	f7ff fad8 	bl	800037c <HAL_GetTick>
 8000dcc:	1b40      	subs	r0, r0, r5
 8000dce:	42b0      	cmp	r0, r6
 8000dd0:	d3e5      	bcc.n	8000d9e <SPI_WaitFlagStateUntilTimeout+0xe>
 8000dd2:	e7ef      	b.n	8000db4 <SPI_WaitFlagStateUntilTimeout+0x24>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dd4:	68a2      	ldr	r2, [r4, #8]
 8000dd6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dda:	d002      	beq.n	8000de2 <SPI_WaitFlagStateUntilTimeout+0x52>
 8000ddc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000de0:	d103      	bne.n	8000dea <SPI_WaitFlagStateUntilTimeout+0x5a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000de8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000dea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000df0:	d108      	bne.n	8000e04 <SPI_WaitFlagStateUntilTimeout+0x74>
        {
          SPI_RESET_CRC(hspi);
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e02:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000e04:	2301      	movs	r3, #1
 8000e06:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e10:	2003      	movs	r0, #3
 8000e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000e16:	2000      	movs	r0, #0
}
 8000e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e1c <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e1c:	b513      	push	{r0, r1, r4, lr}
 8000e1e:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e20:	9200      	str	r2, [sp, #0]
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	2200      	movs	r2, #0
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e26:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e28:	f7ff ffb2 	bl	8000d90 <SPI_WaitFlagStateUntilTimeout>
 8000e2c:	b120      	cbz	r0, 8000e38 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000e36:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd10      	pop	{r4, pc}

08000e3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000e3c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000e3e:	4604      	mov	r4, r0
 8000e40:	2800      	cmp	r0, #0
 8000e42:	d039      	beq.n	8000eb8 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000e44:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e4c:	b91b      	cbnz	r3, 8000e56 <HAL_SPI_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000e4e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000e52:	f7ff fcd5 	bl	8000800 <HAL_SPI_MspInit>
 8000e56:	6861      	ldr	r1, [r4, #4]
 8000e58:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e5a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000e5c:	4308      	orrs	r0, r1
 8000e5e:	68e1      	ldr	r1, [r4, #12]
 8000e60:	4308      	orrs	r0, r1
 8000e62:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000e64:	2302      	movs	r3, #2
 8000e66:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8000e6a:	4308      	orrs	r0, r1

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	6961      	ldr	r1, [r4, #20]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4308      	orrs	r0, r1
 8000e74:	69e1      	ldr	r1, [r4, #28]
 8000e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e7a:	4308      	orrs	r0, r1
 8000e7c:	6a21      	ldr	r1, [r4, #32]
 8000e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e80:	69a2      	ldr	r2, [r4, #24]
 8000e82:	4301      	orrs	r1, r0
 8000e84:	4329      	orrs	r1, r5
 8000e86:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e8a:	4301      	orrs	r1, r0
 8000e8c:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e8e:	0c12      	lsrs	r2, r2, #16
 8000e90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e92:	f002 0204 	and.w	r2, r2, #4
 8000e96:	430a      	orrs	r2, r1

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e98:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e9c:	605a      	str	r2, [r3, #4]
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000e9e:	bf04      	itt	eq
 8000ea0:	6ae2      	ldreq	r2, [r4, #44]	; 0x2c
 8000ea2:	611a      	streq	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ea4:	69da      	ldr	r2, [r3, #28]
 8000ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eaa:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000eac:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000eae:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000eb0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000eb2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000eb6:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8000eb8:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8000eba:	bd38      	pop	{r3, r4, r5, pc}

08000ebc <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8000ebc:	4770      	bx	lr

08000ebe <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8000ebe:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	b180      	cbz	r0, 8000ee6 <HAL_SPI_DeInit+0x28>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8000ec4:	6802      	ldr	r2, [r0, #0]
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8000ecc:	6813      	ldr	r3, [r2, #0]
 8000ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ed2:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8000ed4:	f7ff fff2 	bl	8000ebc <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ed8:	2000      	movs	r0, #0
 8000eda:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8000edc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_RESET;
 8000ee0:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);

  return HAL_OK;
 8000ee4:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hspi);

  return HAL_OK;
}
 8000ee8:	bd10      	pop	{r4, pc}

08000eea <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8000eea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	4699      	mov	r9, r3
  uint32_t tmp = 0U, tmp1 = 0U;
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8ad 300a 	strh.w	r3, [sp, #10]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000ef8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8000efc:	9e0c      	ldr	r6, [sp, #48]	; 0x30

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000efe:	2b01      	cmp	r3, #1
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8000f00:	4604      	mov	r4, r0
 8000f02:	460d      	mov	r5, r1
 8000f04:	4690      	mov	r8, r2

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000f06:	f000 814d 	beq.w	80011a4 <HAL_SPI_TransmitReceive+0x2ba>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000f10:	f7ff fa34 	bl	800037c <HAL_GetTick>
  
  tmp  = hspi->State;
 8000f14:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8000f18:	6861      	ldr	r1, [r4, #4]
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
  
  tmp  = hspi->State;
 8000f1a:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000f1c:	2b01      	cmp	r3, #1

  /* Process Locked */
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000f1e:	4607      	mov	r7, r0
  
  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000f20:	d00a      	beq.n	8000f38 <HAL_SPI_TransmitReceive+0x4e>
 8000f22:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f26:	f040 8132 	bne.w	800118e <HAL_SPI_TransmitReceive+0x2a4>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000f2a:	68a2      	ldr	r2, [r4, #8]
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	f040 812e 	bne.w	800118e <HAL_SPI_TransmitReceive+0x2a4>
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	f040 812b 	bne.w	800118e <HAL_SPI_TransmitReceive+0x2a4>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	f000 812a 	beq.w	8001192 <HAL_SPI_TransmitReceive+0x2a8>
 8000f3e:	f1b8 0f00 	cmp.w	r8, #0
 8000f42:	f000 8126 	beq.w	8001192 <HAL_SPI_TransmitReceive+0x2a8>
 8000f46:	f1b9 0f00 	cmp.w	r9, #0
 8000f4a:	f000 8122 	beq.w	8001192 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8000f4e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f52:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8000f56:	2b01      	cmp	r3, #1
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f58:	bf04      	itt	eq
 8000f5a:	2305      	moveq	r3, #5
 8000f5c:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8000f64:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000f66:	6463      	str	r3, [r4, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 8000f6a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
  hspi->RxXferSize  = Size;
 8000f72:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000f76:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8000f78:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8000f7c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
 8000f80:	6823      	ldr	r3, [r4, #0]
  hspi->RxISR       = NULL;
  hspi->TxISR       = NULL;

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f82:	d108      	bne.n	8000f96 <HAL_SPI_TransmitReceive+0xac>
  {
    SPI_RESET_CRC(hspi);
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8000f8a:	4002      	ands	r2, r0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f94:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	0650      	lsls	r0, r2, #25
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000f9a:	bf5e      	ittt	pl
 8000f9c:	681a      	ldrpl	r2, [r3, #0]
 8000f9e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000fa2:	601a      	strpl	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fa4:	68e2      	ldr	r2, [r4, #12]
 8000fa6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000faa:	d156      	bne.n	800105a <HAL_SPI_TransmitReceive+0x170>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000fac:	b119      	cbz	r1, 8000fb6 <HAL_SPI_TransmitReceive+0xcc>
 8000fae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000fb0:	b292      	uxth	r2, r2
 8000fb2:	2a01      	cmp	r2, #1
 8000fb4:	d106      	bne.n	8000fc4 <HAL_SPI_TransmitReceive+0xda>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000fb6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fba:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
 8000fbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	86e3      	strh	r3, [r4, #54]	; 0x36
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
        pRxData += sizeof(uint16_t);
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8000fc4:	f04f 0901 	mov.w	r9, #1
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }

    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000fc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d03b      	beq.n	8001048 <HAL_SPI_TransmitReceive+0x15e>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000fd0:	f1b9 0f00 	cmp.w	r9, #0
 8000fd4:	d020      	beq.n	8001018 <HAL_SPI_TransmitReceive+0x12e>
 8000fd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b1b3      	cbz	r3, 800100a <HAL_SPI_TransmitReceive+0x120>
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	6893      	ldr	r3, [r2, #8]
 8000fe0:	0799      	lsls	r1, r3, #30
 8000fe2:	d512      	bpl.n	800100a <HAL_SPI_TransmitReceive+0x120>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000fe4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000fe8:	60d3      	str	r3, [r2, #12]
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount--;
 8000fea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	86e3      	strh	r3, [r4, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000ff2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b95b      	cbnz	r3, 8001010 <HAL_SPI_TransmitReceive+0x126>
 8000ff8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000ffa:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8000ffe:	d10a      	bne.n	8001016 <HAL_SPI_TransmitReceive+0x12c>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001006:	6011      	str	r1, [r2, #0]
 8001008:	e005      	b.n	8001016 <HAL_SPI_TransmitReceive+0x12c>
 800100a:	f04f 0901 	mov.w	r9, #1
 800100e:	e003      	b.n	8001018 <HAL_SPI_TransmitReceive+0x12e>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001010:	f04f 0900 	mov.w	r9, #0
 8001014:	e000      	b.n	8001018 <HAL_SPI_TransmitReceive+0x12e>
 8001016:	4699      	mov	r9, r3
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001018:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800101a:	b29b      	uxth	r3, r3
 800101c:	b163      	cbz	r3, 8001038 <HAL_SPI_TransmitReceive+0x14e>
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	07d2      	lsls	r2, r2, #31
 8001024:	d508      	bpl.n	8001038 <HAL_SPI_TransmitReceive+0x14e>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f828 3b02 	strh.w	r3, [r8], #2
        pRxData += sizeof(uint16_t);
        hspi->RxXferCount--;
 800102c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800102e:	3b01      	subs	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	87e3      	strh	r3, [r4, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001034:	f04f 0901 	mov.w	r9, #1
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001038:	1c70      	adds	r0, r6, #1
 800103a:	d0c5      	beq.n	8000fc8 <HAL_SPI_TransmitReceive+0xde>
 800103c:	f7ff f99e 	bl	800037c <HAL_GetTick>
 8001040:	1bc0      	subs	r0, r0, r7
 8001042:	42b0      	cmp	r0, r6
 8001044:	d3c0      	bcc.n	8000fc8 <HAL_SPI_TransmitReceive+0xde>
 8001046:	e06c      	b.n	8001122 <HAL_SPI_TransmitReceive+0x238>
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }

    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001048:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800104a:	b29b      	uxth	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1bf      	bne.n	8000fd0 <HAL_SPI_TransmitReceive+0xe6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001056:	d16d      	bne.n	8001134 <HAL_SPI_TransmitReceive+0x24a>
 8001058:	e057      	b.n	800110a <HAL_SPI_TransmitReceive+0x220>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800105a:	b119      	cbz	r1, 8001064 <HAL_SPI_TransmitReceive+0x17a>
 800105c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800105e:	b292      	uxth	r2, r2
 8001060:	2a01      	cmp	r2, #1
 8001062:	d106      	bne.n	8001072 <HAL_SPI_TransmitReceive+0x188>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001064:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001068:	731a      	strb	r2, [r3, #12]
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
 800106a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800106c:	3b01      	subs	r3, #1
 800106e:	b29b      	uxth	r3, r3
 8001070:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001072:	f04f 0901 	mov.w	r9, #1
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001076:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001078:	b29b      	uxth	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d040      	beq.n	8001100 <HAL_SPI_TransmitReceive+0x216>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800107e:	f1b9 0f00 	cmp.w	r9, #0
 8001082:	d023      	beq.n	80010cc <HAL_SPI_TransmitReceive+0x1e2>
 8001084:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001086:	b29b      	uxth	r3, r3
 8001088:	b1bb      	cbz	r3, 80010ba <HAL_SPI_TransmitReceive+0x1d0>
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	0791      	lsls	r1, r2, #30
 8001090:	d513      	bpl.n	80010ba <HAL_SPI_TransmitReceive+0x1d0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001092:	7829      	ldrb	r1, [r5, #0]
 8001094:	7319      	strb	r1, [r3, #12]
        hspi->TxXferCount--;
 8001096:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001098:	3b01      	subs	r3, #1
 800109a:	b29b      	uxth	r3, r3
 800109c:	86e3      	strh	r3, [r4, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800109e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a0:	b29b      	uxth	r3, r3
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010a2:	1c6a      	adds	r2, r5, #1
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80010a4:	b963      	cbnz	r3, 80010c0 <HAL_SPI_TransmitReceive+0x1d6>
 80010a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80010a8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80010ac:	d10c      	bne.n	80010c8 <HAL_SPI_TransmitReceive+0x1de>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80010ae:	6820      	ldr	r0, [r4, #0]
 80010b0:	6801      	ldr	r1, [r0, #0]
 80010b2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80010b6:	6001      	str	r1, [r0, #0]
 80010b8:	e006      	b.n	80010c8 <HAL_SPI_TransmitReceive+0x1de>
 80010ba:	f04f 0901 	mov.w	r9, #1
 80010be:	e005      	b.n	80010cc <HAL_SPI_TransmitReceive+0x1e2>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010c0:	4615      	mov	r5, r2
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80010c2:	f04f 0900 	mov.w	r9, #0
 80010c6:	e001      	b.n	80010cc <HAL_SPI_TransmitReceive+0x1e2>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80010c8:	4615      	mov	r5, r2
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80010ca:	4699      	mov	r9, r3
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80010cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	b173      	cbz	r3, 80010f0 <HAL_SPI_TransmitReceive+0x206>
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	07d2      	lsls	r2, r2, #31
 80010d8:	d50a      	bpl.n	80010f0 <HAL_SPI_TransmitReceive+0x206>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f888 3000 	strb.w	r3, [r8]
        hspi->RxXferCount--;
 80010e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80010e8:	f108 0801 	add.w	r8, r8, #1
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80010ec:	f04f 0901 	mov.w	r9, #1
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80010f0:	1c73      	adds	r3, r6, #1
 80010f2:	d0c0      	beq.n	8001076 <HAL_SPI_TransmitReceive+0x18c>
 80010f4:	f7ff f942 	bl	800037c <HAL_GetTick>
 80010f8:	1bc0      	subs	r0, r0, r7
 80010fa:	42b0      	cmp	r0, r6
 80010fc:	d3bb      	bcc.n	8001076 <HAL_SPI_TransmitReceive+0x18c>
 80010fe:	e010      	b.n	8001122 <HAL_SPI_TransmitReceive+0x238>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001100:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001102:	b29b      	uxth	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1ba      	bne.n	800107e <HAL_SPI_TransmitReceive+0x194>
 8001108:	e7a2      	b.n	8001050 <HAL_SPI_TransmitReceive+0x166>
#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800110a:	2101      	movs	r1, #1
 800110c:	9700      	str	r7, [sp, #0]
 800110e:	4620      	mov	r0, r4
 8001110:	460a      	mov	r2, r1
 8001112:	4633      	mov	r3, r6
 8001114:	f7ff fe3c 	bl	8000d90 <SPI_WaitFlagStateUntilTimeout>
 8001118:	b128      	cbz	r0, 8001126 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800111a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	6563      	str	r3, [r4, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8001122:	2503      	movs	r5, #3
      goto error;
 8001124:	e036      	b.n	8001194 <HAL_SPI_TransmitReceive+0x2aa>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	b29b      	uxth	r3, r3
 800112c:	f8ad 300a 	strh.w	r3, [sp, #10]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8001130:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	6895      	ldr	r5, [r2, #8]
 8001138:	f015 0510 	ands.w	r5, r5, #16
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800113c:	bf1f      	itttt	ne
 800113e:	6d63      	ldrne	r3, [r4, #84]	; 0x54
 8001140:	f043 0302 	orrne.w	r3, r3, #2
 8001144:	6563      	strne	r3, [r4, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8001146:	f64f 73ef 	movwne	r3, #65519	; 0xffef
 800114a:	bf18      	it	ne
 800114c:	6093      	strne	r3, [r2, #8]
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800114e:	4620      	mov	r0, r4
 8001150:	9700      	str	r7, [sp, #0]
 8001152:	f04f 0102 	mov.w	r1, #2
 8001156:	f04f 0201 	mov.w	r2, #1
 800115a:	4633      	mov	r3, r6
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);

    errorcode = HAL_ERROR;
 800115c:	bf18      	it	ne
 800115e:	2501      	movne	r5, #1
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001160:	f7ff fe16 	bl	8000d90 <SPI_WaitFlagStateUntilTimeout>
 8001164:	2800      	cmp	r0, #0
 8001166:	d1dc      	bne.n	8001122 <HAL_SPI_TransmitReceive+0x238>
    errorcode = HAL_TIMEOUT;
    goto error;
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001168:	4620      	mov	r0, r4
 800116a:	4631      	mov	r1, r6
 800116c:	463a      	mov	r2, r7
 800116e:	f7ff fe55 	bl	8000e1c <SPI_CheckFlag_BSY>
 8001172:	b110      	cbz	r0, 800117a <HAL_SPI_TransmitReceive+0x290>
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001174:	2320      	movs	r3, #32
 8001176:	6563      	str	r3, [r4, #84]	; 0x54
 8001178:	e00b      	b.n	8001192 <HAL_SPI_TransmitReceive+0x2a8>
    goto error;
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800117a:	68a3      	ldr	r3, [r4, #8]
 800117c:	b953      	cbnz	r3, 8001194 <HAL_SPI_TransmitReceive+0x2aa>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	9203      	str	r2, [sp, #12]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	9303      	str	r3, [sp, #12]
 800118a:	9b03      	ldr	r3, [sp, #12]
 800118c:	e002      	b.n	8001194 <HAL_SPI_TransmitReceive+0x2aa>
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800118e:	2502      	movs	r5, #2
 8001190:	e000      	b.n	8001194 <HAL_SPI_TransmitReceive+0x2aa>
    goto error;
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 8001192:	2501      	movs	r5, #1
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8001194:	2301      	movs	r3, #1
 8001196:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800119a:	2300      	movs	r3, #0
 800119c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80011a0:	4628      	mov	r0, r5
 80011a2:	e000      	b.n	80011a6 <HAL_SPI_TransmitReceive+0x2bc>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80011a4:	2002      	movs	r0, #2
  
error :
  hspi->State = HAL_SPI_STATE_READY;
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 80011a6:	b005      	add	sp, #20
 80011a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011ac <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80011b0:	6806      	ldr	r6, [r0, #0]
 80011b2:	6933      	ldr	r3, [r6, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011b4:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80011b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80011ba:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011bc:	6921      	ldr	r1, [r4, #16]
 80011be:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80011c0:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011c2:	68a2      	ldr	r2, [r4, #8]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80011c4:	6133      	str	r3, [r6, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80011c6:	68f3      	ldr	r3, [r6, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011c8:	4311      	orrs	r1, r2
 80011ca:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80011cc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011d0:	430a      	orrs	r2, r1
 80011d2:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80011d4:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011d8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80011da:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80011dc:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80011de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80011e2:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80011e8:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80011ec:	6173      	str	r3, [r6, #20]
 80011ee:	4b7b      	ldr	r3, [pc, #492]	; (80013dc <UART_SetConfig+0x230>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011f0:	d17c      	bne.n	80012ec <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80011f2:	429e      	cmp	r6, r3
 80011f4:	d003      	beq.n	80011fe <UART_SetConfig+0x52>
 80011f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011fa:	429e      	cmp	r6, r3
 80011fc:	d131      	bne.n	8001262 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011fe:	f7ff fc31 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8001202:	6863      	ldr	r3, [r4, #4]
 8001204:	2519      	movs	r5, #25
 8001206:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800120a:	4368      	muls	r0, r5
 800120c:	fbb0 f8f8 	udiv	r8, r0, r8
 8001210:	f7ff fc28 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8001214:	6867      	ldr	r7, [r4, #4]
 8001216:	4368      	muls	r0, r5
 8001218:	007f      	lsls	r7, r7, #1
 800121a:	fbb0 f7f7 	udiv	r7, r0, r7
 800121e:	f7ff fc21 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8001222:	6863      	ldr	r3, [r4, #4]
 8001224:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4368      	muls	r0, r5
 800122c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001230:	fbb0 f0f9 	udiv	r0, r0, r9
 8001234:	fb09 7710 	mls	r7, r9, r0, r7
 8001238:	f7ff fc14 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 800123c:	fbb8 f8f9 	udiv	r8, r8, r9
 8001240:	6862      	ldr	r2, [r4, #4]
 8001242:	00ff      	lsls	r7, r7, #3
 8001244:	3732      	adds	r7, #50	; 0x32
 8001246:	fbb7 f7f9 	udiv	r7, r7, r9
 800124a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 800124e:	4368      	muls	r0, r5
 8001250:	0052      	lsls	r2, r2, #1
 8001252:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001256:	007f      	lsls	r7, r7, #1
 8001258:	fbb0 faf2 	udiv	sl, r0, r2
 800125c:	f7ff fc02 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8001260:	e030      	b.n	80012c4 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001262:	f7ff fbe7 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 8001266:	6863      	ldr	r3, [r4, #4]
 8001268:	2519      	movs	r5, #25
 800126a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800126e:	4368      	muls	r0, r5
 8001270:	fbb0 f8f8 	udiv	r8, r0, r8
 8001274:	f7ff fbde 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 8001278:	6867      	ldr	r7, [r4, #4]
 800127a:	4368      	muls	r0, r5
 800127c:	007f      	lsls	r7, r7, #1
 800127e:	fbb0 f7f7 	udiv	r7, r0, r7
 8001282:	f7ff fbd7 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 8001286:	6863      	ldr	r3, [r4, #4]
 8001288:	f04f 0964 	mov.w	r9, #100	; 0x64
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4368      	muls	r0, r5
 8001290:	fbb0 f0f3 	udiv	r0, r0, r3
 8001294:	fbb0 f0f9 	udiv	r0, r0, r9
 8001298:	fb09 7710 	mls	r7, r9, r0, r7
 800129c:	f7ff fbca 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 80012a0:	fbb8 f8f9 	udiv	r8, r8, r9
 80012a4:	00ff      	lsls	r7, r7, #3
 80012a6:	6862      	ldr	r2, [r4, #4]
 80012a8:	3732      	adds	r7, #50	; 0x32
 80012aa:	fbb7 f7f9 	udiv	r7, r7, r9
 80012ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80012b2:	4368      	muls	r0, r5
 80012b4:	0052      	lsls	r2, r2, #1
 80012b6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80012ba:	007f      	lsls	r7, r7, #1
 80012bc:	fbb0 faf2 	udiv	sl, r0, r2
 80012c0:	f7ff fbb8 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 80012c4:	4345      	muls	r5, r0
 80012c6:	6860      	ldr	r0, [r4, #4]
 80012c8:	0040      	lsls	r0, r0, #1
 80012ca:	fbb5 f0f0 	udiv	r0, r5, r0
 80012ce:	fbb0 f0f9 	udiv	r0, r0, r9
 80012d2:	fb09 a210 	mls	r2, r9, r0, sl
 80012d6:	00d2      	lsls	r2, r2, #3
 80012d8:	3232      	adds	r2, #50	; 0x32
 80012da:	fbb2 f3f9 	udiv	r3, r2, r9
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	4443      	add	r3, r8
 80012e4:	441f      	add	r7, r3
 80012e6:	60b7      	str	r7, [r6, #8]
 80012e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80012ec:	429e      	cmp	r6, r3
 80012ee:	d002      	beq.n	80012f6 <UART_SetConfig+0x14a>
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <UART_SetConfig+0x234>)
 80012f2:	429e      	cmp	r6, r3
 80012f4:	d12e      	bne.n	8001354 <UART_SetConfig+0x1a8>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012f6:	f7ff fbb5 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 80012fa:	6867      	ldr	r7, [r4, #4]
 80012fc:	2519      	movs	r5, #25
 80012fe:	4368      	muls	r0, r5
 8001300:	00bf      	lsls	r7, r7, #2
 8001302:	fbb0 f7f7 	udiv	r7, r0, r7
 8001306:	f7ff fbad 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 800130a:	6863      	ldr	r3, [r4, #4]
 800130c:	4368      	muls	r0, r5
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fbb0 f8f3 	udiv	r8, r0, r3
 8001314:	f7ff fba6 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800131e:	4368      	muls	r0, r5
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	fbb0 f0f3 	udiv	r0, r0, r3
 8001326:	fbb0 f0f9 	udiv	r0, r0, r9
 800132a:	fb09 8310 	mls	r3, r9, r0, r8
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	3332      	adds	r3, #50	; 0x32
 8001332:	fbb3 f3f9 	udiv	r3, r3, r9
 8001336:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800133a:	f7ff fb93 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 800133e:	fbb7 f7f9 	udiv	r7, r7, r9
 8001342:	6862      	ldr	r2, [r4, #4]
 8001344:	4368      	muls	r0, r5
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	013f      	lsls	r7, r7, #4
 800134a:	fbb0 faf2 	udiv	sl, r0, r2
 800134e:	f7ff fb89 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8001352:	e02d      	b.n	80013b0 <UART_SetConfig+0x204>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001354:	f7ff fb6e 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 8001358:	6867      	ldr	r7, [r4, #4]
 800135a:	2519      	movs	r5, #25
 800135c:	4368      	muls	r0, r5
 800135e:	00bf      	lsls	r7, r7, #2
 8001360:	fbb0 f7f7 	udiv	r7, r0, r7
 8001364:	f7ff fb66 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 8001368:	6863      	ldr	r3, [r4, #4]
 800136a:	4368      	muls	r0, r5
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001372:	f7ff fb5f 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 8001376:	6863      	ldr	r3, [r4, #4]
 8001378:	f04f 0964 	mov.w	r9, #100	; 0x64
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4368      	muls	r0, r5
 8001380:	fbb0 f0f3 	udiv	r0, r0, r3
 8001384:	fbb0 f0f9 	udiv	r0, r0, r9
 8001388:	fb09 8310 	mls	r3, r9, r0, r8
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	3332      	adds	r3, #50	; 0x32
 8001390:	fbb3 f3f9 	udiv	r3, r3, r9
 8001394:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001398:	f7ff fb4c 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 800139c:	fbb7 f7f9 	udiv	r7, r7, r9
 80013a0:	6862      	ldr	r2, [r4, #4]
 80013a2:	4368      	muls	r0, r5
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	013f      	lsls	r7, r7, #4
 80013a8:	fbb0 faf2 	udiv	sl, r0, r2
 80013ac:	f7ff fb42 	bl	8000a34 <HAL_RCC_GetPCLK1Freq>
 80013b0:	4345      	muls	r5, r0
 80013b2:	6860      	ldr	r0, [r4, #4]
 80013b4:	0080      	lsls	r0, r0, #2
 80013b6:	fbb5 f0f0 	udiv	r0, r5, r0
 80013ba:	fbb0 f0f9 	udiv	r0, r0, r9
 80013be:	fb09 a210 	mls	r2, r9, r0, sl
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	3232      	adds	r2, #50	; 0x32
 80013c6:	fbb2 f2f9 	udiv	r2, r2, r9
 80013ca:	f002 020f 	and.w	r2, r2, #15
 80013ce:	eb08 0302 	add.w	r3, r8, r2
 80013d2:	443b      	add	r3, r7
 80013d4:	60b3      	str	r3, [r6, #8]
 80013d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013da:	bf00      	nop
 80013dc:	40011000 	.word	0x40011000
 80013e0:	40011400 	.word	0x40011400

080013e4 <UART_WaitOnFlagUntilTimeout.constprop.2>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	4604      	mov	r4, r0
 80013e8:	460e      	mov	r6, r1
 80013ea:	4617      	mov	r7, r2
 80013ec:	461d      	mov	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	4030      	ands	r0, r6
 80013f4:	42b0      	cmp	r0, r6
 80013f6:	d01b      	beq.n	8001430 <UART_WaitOnFlagUntilTimeout.constprop.2+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80013f8:	1c6a      	adds	r2, r5, #1
 80013fa:	d0f9      	beq.n	80013f0 <UART_WaitOnFlagUntilTimeout.constprop.2+0xc>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80013fc:	b995      	cbnz	r5, 8001424 <UART_WaitOnFlagUntilTimeout.constprop.2+0x40>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001406:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001410:	2320      	movs	r3, #32
 8001412:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001416:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800141a:	2300      	movs	r3, #0
 800141c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001420:	2003      	movs	r0, #3
 8001422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001424:	f7fe ffaa 	bl	800037c <HAL_GetTick>
 8001428:	1bc0      	subs	r0, r0, r7
 800142a:	42a8      	cmp	r0, r5
 800142c:	d9df      	bls.n	80013ee <UART_WaitOnFlagUntilTimeout.constprop.2+0xa>
 800142e:	e7e6      	b.n	80013fe <UART_WaitOnFlagUntilTimeout.constprop.2+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 8001430:	2000      	movs	r0, #0
}
 8001432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001434 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001434:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001436:	4604      	mov	r4, r0
 8001438:	b340      	cbz	r0, 800148c <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800143a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800143e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001442:	b91b      	cbnz	r3, 800144c <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001444:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001448:	f7ff f82e 	bl	80004a8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800144c:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800144e:	2324      	movs	r3, #36	; 0x24
 8001450:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001454:	68d3      	ldr	r3, [r2, #12]
 8001456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800145a:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800145c:	4620      	mov	r0, r4
 800145e:	f7ff fea5 	bl	80011ac <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800146a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001472:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800147a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800147c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800147e:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001480:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001482:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001486:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 800148a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 800148c:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 800148e:	bd10      	pop	{r4, pc}

08001490 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001494:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001496:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800149a:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80014a2:	d14d      	bne.n	8001540 <HAL_UART_Transmit+0xb0>
  {
    if((pData == NULL ) || (Size == 0U)) 
 80014a4:	2900      	cmp	r1, #0
 80014a6:	d048      	beq.n	800153a <HAL_UART_Transmit+0xaa>
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	d046      	beq.n	800153a <HAL_UART_Transmit+0xaa>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80014ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d045      	beq.n	8001540 <HAL_UART_Transmit+0xb0>
 80014b4:	2301      	movs	r3, #1
 80014b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014be:	2321      	movs	r3, #33	; 0x21
 80014c0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014c4:	f7fe ff5a 	bl	800037c <HAL_GetTick>

    huart->TxXferSize = Size;
 80014c8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014cc:	4607      	mov	r7, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 80014ce:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80014d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80014d4:	b313      	cbz	r3, 800151c <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 80014d6:	3b01      	subs	r3, #1
 80014d8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014da:	68a3      	ldr	r3, [r4, #8]
 80014dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014e0:	4620      	mov	r0, r4
 80014e2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80014e6:	463a      	mov	r2, r7
 80014e8:	4633      	mov	r3, r6
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014ea:	d10e      	bne.n	800150a <HAL_UART_Transmit+0x7a>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ec:	f7ff ff7a 	bl	80013e4 <UART_WaitOnFlagUntilTimeout.constprop.2>
 80014f0:	b110      	cbz	r0, 80014f8 <HAL_UART_Transmit+0x68>
        { 
          return HAL_TIMEOUT;
 80014f2:	2003      	movs	r0, #3
 80014f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 80014f8:	882b      	ldrh	r3, [r5, #0]
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001500:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001502:	6923      	ldr	r3, [r4, #16]
 8001504:	b943      	cbnz	r3, 8001518 <HAL_UART_Transmit+0x88>
        {
          pData +=2U;
 8001506:	3502      	adds	r5, #2
 8001508:	e7e3      	b.n	80014d2 <HAL_UART_Transmit+0x42>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800150a:	f7ff ff6b 	bl	80013e4 <UART_WaitOnFlagUntilTimeout.constprop.2>
 800150e:	2800      	cmp	r0, #0
 8001510:	d1ef      	bne.n	80014f2 <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	782a      	ldrb	r2, [r5, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	3501      	adds	r5, #1
 800151a:	e7da      	b.n	80014d2 <HAL_UART_Transmit+0x42>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800151c:	4620      	mov	r0, r4
 800151e:	2140      	movs	r1, #64	; 0x40
 8001520:	463a      	mov	r2, r7
 8001522:	4633      	mov	r3, r6
 8001524:	f7ff ff5e 	bl	80013e4 <UART_WaitOnFlagUntilTimeout.constprop.2>
 8001528:	2800      	cmp	r0, #0
 800152a:	d1e2      	bne.n	80014f2 <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800152c:	2320      	movs	r3, #32
 800152e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001532:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 8001536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 800153a:	2001      	movs	r0, #1
 800153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001540:	2002      	movs	r0, #2
  }
}
 8001542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001548 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001548:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800154a:	4604      	mov	r4, r0
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800154c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800154e:	b958      	cbnz	r0, 8001568 <BSP_LED_Init+0x20>
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <BSP_LED_Init+0xa8>)
 8001552:	9001      	str	r0, [sp, #4]
 8001554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001556:	f042 0208 	orr.w	r2, r2, #8
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	9b01      	ldr	r3, [sp, #4]
 8001566:	e02b      	b.n	80015c0 <BSP_LED_Init+0x78>
 8001568:	2801      	cmp	r0, #1
 800156a:	d10c      	bne.n	8001586 <BSP_LED_Init+0x3e>
 800156c:	2300      	movs	r3, #0
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <BSP_LED_Init+0xa8>)
 8001572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001574:	f042 0208 	orr.w	r2, r2, #8
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	9b02      	ldr	r3, [sp, #8]
 8001584:	e01c      	b.n	80015c0 <BSP_LED_Init+0x78>
 8001586:	2802      	cmp	r0, #2
 8001588:	d10c      	bne.n	80015a4 <BSP_LED_Init+0x5c>
 800158a:	2300      	movs	r3, #0
 800158c:	9303      	str	r3, [sp, #12]
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <BSP_LED_Init+0xa8>)
 8001590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001592:	f042 0208 	orr.w	r2, r2, #8
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	9303      	str	r3, [sp, #12]
 80015a0:	9b03      	ldr	r3, [sp, #12]
 80015a2:	e00d      	b.n	80015c0 <BSP_LED_Init+0x78>
 80015a4:	2803      	cmp	r0, #3
 80015a6:	d10b      	bne.n	80015c0 <BSP_LED_Init+0x78>
 80015a8:	2300      	movs	r3, #0
 80015aa:	9304      	str	r3, [sp, #16]
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <BSP_LED_Init+0xa8>)
 80015ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b0:	f042 0208 	orr.w	r2, r2, #8
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	9304      	str	r3, [sp, #16]
 80015be:	9b04      	ldr	r3, [sp, #16]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <BSP_LED_Init+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80015c2:	4e0d      	ldr	r6, [pc, #52]	; (80015f8 <BSP_LED_Init+0xb0>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80015c4:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80015c8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80015cc:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80015d4:	a905      	add	r1, sp, #20

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80015d6:	2302      	movs	r3, #2
 80015d8:	9308      	str	r3, [sp, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80015da:	f7ff fae3 	bl	8000ba4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80015de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80015e2:	4629      	mov	r1, r5
 80015e4:	2200      	movs	r2, #0
 80015e6:	f7ff fbc1 	bl	8000d6c <HAL_GPIO_WritePin>
}
 80015ea:	b00a      	add	sp, #40	; 0x28
 80015ec:	bd70      	pop	{r4, r5, r6, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	08003070 	.word	0x08003070
 80015f8:	20000004 	.word	0x20000004

080015fc <BSP_LED_On>:
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <BSP_LED_On+0x14>)
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80015fe:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001600:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <BSP_LED_On+0x18>)
 8001606:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800160a:	2201      	movs	r2, #1
 800160c:	f7ff bbae 	b.w	8000d6c <HAL_GPIO_WritePin>
 8001610:	20000004 	.word	0x20000004
 8001614:	08003070 	.word	0x08003070

08001618 <BSP_LED_Off>:
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <BSP_LED_Off+0x14>)
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800161a:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800161c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001620:	4a03      	ldr	r2, [pc, #12]	; (8001630 <BSP_LED_Off+0x18>)
 8001622:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001626:	2200      	movs	r2, #0
 8001628:	f7ff bba0 	b.w	8000d6c <HAL_GPIO_WritePin>
 800162c:	20000004 	.word	0x20000004
 8001630:	08003070 	.word	0x08003070

08001634 <__libc_init_array>:
 8001634:	b570      	push	{r4, r5, r6, lr}
 8001636:	4e0f      	ldr	r6, [pc, #60]	; (8001674 <__libc_init_array+0x40>)
 8001638:	4d0f      	ldr	r5, [pc, #60]	; (8001678 <__libc_init_array+0x44>)
 800163a:	1b76      	subs	r6, r6, r5
 800163c:	10b6      	asrs	r6, r6, #2
 800163e:	bf18      	it	ne
 8001640:	2400      	movne	r4, #0
 8001642:	d005      	beq.n	8001650 <__libc_init_array+0x1c>
 8001644:	3401      	adds	r4, #1
 8001646:	f855 3b04 	ldr.w	r3, [r5], #4
 800164a:	4798      	blx	r3
 800164c:	42a6      	cmp	r6, r4
 800164e:	d1f9      	bne.n	8001644 <__libc_init_array+0x10>
 8001650:	4e0a      	ldr	r6, [pc, #40]	; (800167c <__libc_init_array+0x48>)
 8001652:	4d0b      	ldr	r5, [pc, #44]	; (8001680 <__libc_init_array+0x4c>)
 8001654:	1b76      	subs	r6, r6, r5
 8001656:	f001 fc7d 	bl	8002f54 <_init>
 800165a:	10b6      	asrs	r6, r6, #2
 800165c:	bf18      	it	ne
 800165e:	2400      	movne	r4, #0
 8001660:	d006      	beq.n	8001670 <__libc_init_array+0x3c>
 8001662:	3401      	adds	r4, #1
 8001664:	f855 3b04 	ldr.w	r3, [r5], #4
 8001668:	4798      	blx	r3
 800166a:	42a6      	cmp	r6, r4
 800166c:	d1f9      	bne.n	8001662 <__libc_init_array+0x2e>
 800166e:	bd70      	pop	{r4, r5, r6, pc}
 8001670:	bd70      	pop	{r4, r5, r6, pc}
 8001672:	bf00      	nop
 8001674:	08003084 	.word	0x08003084
 8001678:	08003084 	.word	0x08003084
 800167c:	0800308c 	.word	0x0800308c
 8001680:	08003084 	.word	0x08003084

08001684 <memset>:
 8001684:	b470      	push	{r4, r5, r6}
 8001686:	0784      	lsls	r4, r0, #30
 8001688:	d046      	beq.n	8001718 <memset+0x94>
 800168a:	1e54      	subs	r4, r2, #1
 800168c:	2a00      	cmp	r2, #0
 800168e:	d041      	beq.n	8001714 <memset+0x90>
 8001690:	b2cd      	uxtb	r5, r1
 8001692:	4603      	mov	r3, r0
 8001694:	e002      	b.n	800169c <memset+0x18>
 8001696:	1e62      	subs	r2, r4, #1
 8001698:	b3e4      	cbz	r4, 8001714 <memset+0x90>
 800169a:	4614      	mov	r4, r2
 800169c:	f803 5b01 	strb.w	r5, [r3], #1
 80016a0:	079a      	lsls	r2, r3, #30
 80016a2:	d1f8      	bne.n	8001696 <memset+0x12>
 80016a4:	2c03      	cmp	r4, #3
 80016a6:	d92e      	bls.n	8001706 <memset+0x82>
 80016a8:	b2cd      	uxtb	r5, r1
 80016aa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80016ae:	2c0f      	cmp	r4, #15
 80016b0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80016b4:	d919      	bls.n	80016ea <memset+0x66>
 80016b6:	f103 0210 	add.w	r2, r3, #16
 80016ba:	4626      	mov	r6, r4
 80016bc:	3e10      	subs	r6, #16
 80016be:	2e0f      	cmp	r6, #15
 80016c0:	f842 5c10 	str.w	r5, [r2, #-16]
 80016c4:	f842 5c0c 	str.w	r5, [r2, #-12]
 80016c8:	f842 5c08 	str.w	r5, [r2, #-8]
 80016cc:	f842 5c04 	str.w	r5, [r2, #-4]
 80016d0:	f102 0210 	add.w	r2, r2, #16
 80016d4:	d8f2      	bhi.n	80016bc <memset+0x38>
 80016d6:	f1a4 0210 	sub.w	r2, r4, #16
 80016da:	f022 020f 	bic.w	r2, r2, #15
 80016de:	f004 040f 	and.w	r4, r4, #15
 80016e2:	3210      	adds	r2, #16
 80016e4:	2c03      	cmp	r4, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	d90d      	bls.n	8001706 <memset+0x82>
 80016ea:	461e      	mov	r6, r3
 80016ec:	4622      	mov	r2, r4
 80016ee:	3a04      	subs	r2, #4
 80016f0:	2a03      	cmp	r2, #3
 80016f2:	f846 5b04 	str.w	r5, [r6], #4
 80016f6:	d8fa      	bhi.n	80016ee <memset+0x6a>
 80016f8:	1f22      	subs	r2, r4, #4
 80016fa:	f022 0203 	bic.w	r2, r2, #3
 80016fe:	3204      	adds	r2, #4
 8001700:	4413      	add	r3, r2
 8001702:	f004 0403 	and.w	r4, r4, #3
 8001706:	b12c      	cbz	r4, 8001714 <memset+0x90>
 8001708:	b2c9      	uxtb	r1, r1
 800170a:	441c      	add	r4, r3
 800170c:	f803 1b01 	strb.w	r1, [r3], #1
 8001710:	42a3      	cmp	r3, r4
 8001712:	d1fb      	bne.n	800170c <memset+0x88>
 8001714:	bc70      	pop	{r4, r5, r6}
 8001716:	4770      	bx	lr
 8001718:	4614      	mov	r4, r2
 800171a:	4603      	mov	r3, r0
 800171c:	e7c2      	b.n	80016a4 <memset+0x20>
 800171e:	bf00      	nop

08001720 <_puts_r>:
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	4605      	mov	r5, r0
 8001724:	b089      	sub	sp, #36	; 0x24
 8001726:	4608      	mov	r0, r1
 8001728:	460c      	mov	r4, r1
 800172a:	f000 f833 	bl	8001794 <strlen>
 800172e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001730:	4f13      	ldr	r7, [pc, #76]	; (8001780 <_puts_r+0x60>)
 8001732:	9404      	str	r4, [sp, #16]
 8001734:	2601      	movs	r6, #1
 8001736:	1c44      	adds	r4, r0, #1
 8001738:	a904      	add	r1, sp, #16
 800173a:	2202      	movs	r2, #2
 800173c:	9403      	str	r4, [sp, #12]
 800173e:	9005      	str	r0, [sp, #20]
 8001740:	68ac      	ldr	r4, [r5, #8]
 8001742:	9706      	str	r7, [sp, #24]
 8001744:	9607      	str	r6, [sp, #28]
 8001746:	9101      	str	r1, [sp, #4]
 8001748:	9202      	str	r2, [sp, #8]
 800174a:	b1ab      	cbz	r3, 8001778 <_puts_r+0x58>
 800174c:	89a3      	ldrh	r3, [r4, #12]
 800174e:	049a      	lsls	r2, r3, #18
 8001750:	d406      	bmi.n	8001760 <_puts_r+0x40>
 8001752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001754:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800175c:	81a3      	strh	r3, [r4, #12]
 800175e:	6662      	str	r2, [r4, #100]	; 0x64
 8001760:	4628      	mov	r0, r5
 8001762:	4621      	mov	r1, r4
 8001764:	aa01      	add	r2, sp, #4
 8001766:	f000 fa17 	bl	8001b98 <__sfvwrite_r>
 800176a:	2800      	cmp	r0, #0
 800176c:	bf14      	ite	ne
 800176e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001772:	200a      	moveq	r0, #10
 8001774:	b009      	add	sp, #36	; 0x24
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001778:	4628      	mov	r0, r5
 800177a:	f000 f8c7 	bl	800190c <__sinit>
 800177e:	e7e5      	b.n	800174c <_puts_r+0x2c>
 8001780:	08003080 	.word	0x08003080

08001784 <puts>:
 8001784:	4b02      	ldr	r3, [pc, #8]	; (8001790 <puts+0xc>)
 8001786:	4601      	mov	r1, r0
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	f7ff bfc9 	b.w	8001720 <_puts_r>
 800178e:	bf00      	nop
 8001790:	20000440 	.word	0x20000440

08001794 <strlen>:
 8001794:	f020 0103 	bic.w	r1, r0, #3
 8001798:	f010 0003 	ands.w	r0, r0, #3
 800179c:	f1c0 0000 	rsb	r0, r0, #0
 80017a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80017a4:	f100 0c04 	add.w	ip, r0, #4
 80017a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80017ac:	f06f 0200 	mvn.w	r2, #0
 80017b0:	bf1c      	itt	ne
 80017b2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80017b6:	4313      	orrne	r3, r2
 80017b8:	f04f 0c01 	mov.w	ip, #1
 80017bc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80017c0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80017c4:	eba3 020c 	sub.w	r2, r3, ip
 80017c8:	ea22 0203 	bic.w	r2, r2, r3
 80017cc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80017d0:	bf04      	itt	eq
 80017d2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80017d6:	3004      	addeq	r0, #4
 80017d8:	d0f4      	beq.n	80017c4 <strlen+0x30>
 80017da:	f1c2 0100 	rsb	r1, r2, #0
 80017de:	ea02 0201 	and.w	r2, r2, r1
 80017e2:	fab2 f282 	clz	r2, r2
 80017e6:	f1c2 021f 	rsb	r2, r2, #31
 80017ea:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80017ee:	4770      	bx	lr

080017f0 <register_fini>:
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <register_fini+0xc>)
 80017f2:	b113      	cbz	r3, 80017fa <register_fini+0xa>
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <register_fini+0x10>)
 80017f6:	f000 b805 	b.w	8001804 <atexit>
 80017fa:	4770      	bx	lr
 80017fc:	00000000 	.word	0x00000000
 8001800:	08001921 	.word	0x08001921

08001804 <atexit>:
 8001804:	4601      	mov	r1, r0
 8001806:	2000      	movs	r0, #0
 8001808:	4602      	mov	r2, r0
 800180a:	4603      	mov	r3, r0
 800180c:	f001 b97e 	b.w	8002b0c <__register_exitproc>

08001810 <_cleanup_r>:
 8001810:	4901      	ldr	r1, [pc, #4]	; (8001818 <_cleanup_r+0x8>)
 8001812:	f000 bb4d 	b.w	8001eb0 <_fwalk_reent>
 8001816:	bf00      	nop
 8001818:	08002bd5 	.word	0x08002bd5

0800181c <__sinit.part.1>:
 800181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001820:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <__sinit.part.1+0xdc>)
 8001822:	6845      	ldr	r5, [r0, #4]
 8001824:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001826:	2400      	movs	r4, #0
 8001828:	4607      	mov	r7, r0
 800182a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800182e:	2304      	movs	r3, #4
 8001830:	2103      	movs	r1, #3
 8001832:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8001836:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800183a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800183e:	b083      	sub	sp, #12
 8001840:	602c      	str	r4, [r5, #0]
 8001842:	606c      	str	r4, [r5, #4]
 8001844:	60ac      	str	r4, [r5, #8]
 8001846:	666c      	str	r4, [r5, #100]	; 0x64
 8001848:	81ec      	strh	r4, [r5, #14]
 800184a:	612c      	str	r4, [r5, #16]
 800184c:	616c      	str	r4, [r5, #20]
 800184e:	61ac      	str	r4, [r5, #24]
 8001850:	81ab      	strh	r3, [r5, #12]
 8001852:	4621      	mov	r1, r4
 8001854:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8001858:	2208      	movs	r2, #8
 800185a:	f7ff ff13 	bl	8001684 <memset>
 800185e:	68be      	ldr	r6, [r7, #8]
 8001860:	f8df b098 	ldr.w	fp, [pc, #152]	; 80018fc <__sinit.part.1+0xe0>
 8001864:	f8df a098 	ldr.w	sl, [pc, #152]	; 8001900 <__sinit.part.1+0xe4>
 8001868:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001904 <__sinit.part.1+0xe8>
 800186c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001908 <__sinit.part.1+0xec>
 8001870:	f8c5 b020 	str.w	fp, [r5, #32]
 8001874:	2301      	movs	r3, #1
 8001876:	2209      	movs	r2, #9
 8001878:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800187c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8001880:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8001884:	61ed      	str	r5, [r5, #28]
 8001886:	4621      	mov	r1, r4
 8001888:	81f3      	strh	r3, [r6, #14]
 800188a:	81b2      	strh	r2, [r6, #12]
 800188c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8001890:	6034      	str	r4, [r6, #0]
 8001892:	6074      	str	r4, [r6, #4]
 8001894:	60b4      	str	r4, [r6, #8]
 8001896:	6674      	str	r4, [r6, #100]	; 0x64
 8001898:	6134      	str	r4, [r6, #16]
 800189a:	6174      	str	r4, [r6, #20]
 800189c:	61b4      	str	r4, [r6, #24]
 800189e:	2208      	movs	r2, #8
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	f7ff feef 	bl	8001684 <memset>
 80018a6:	68fd      	ldr	r5, [r7, #12]
 80018a8:	61f6      	str	r6, [r6, #28]
 80018aa:	2012      	movs	r0, #18
 80018ac:	2202      	movs	r2, #2
 80018ae:	f8c6 b020 	str.w	fp, [r6, #32]
 80018b2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80018b6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80018ba:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80018be:	4621      	mov	r1, r4
 80018c0:	81a8      	strh	r0, [r5, #12]
 80018c2:	81ea      	strh	r2, [r5, #14]
 80018c4:	602c      	str	r4, [r5, #0]
 80018c6:	606c      	str	r4, [r5, #4]
 80018c8:	60ac      	str	r4, [r5, #8]
 80018ca:	666c      	str	r4, [r5, #100]	; 0x64
 80018cc:	612c      	str	r4, [r5, #16]
 80018ce:	616c      	str	r4, [r5, #20]
 80018d0:	61ac      	str	r4, [r5, #24]
 80018d2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80018d6:	2208      	movs	r2, #8
 80018d8:	f7ff fed4 	bl	8001684 <memset>
 80018dc:	9b01      	ldr	r3, [sp, #4]
 80018de:	61ed      	str	r5, [r5, #28]
 80018e0:	f8c5 b020 	str.w	fp, [r5, #32]
 80018e4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80018e8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80018ec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80018f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f2:	b003      	add	sp, #12
 80018f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f8:	08001811 	.word	0x08001811
 80018fc:	0800299d 	.word	0x0800299d
 8001900:	080029c1 	.word	0x080029c1
 8001904:	080029f9 	.word	0x080029f9
 8001908:	08002a19 	.word	0x08002a19

0800190c <__sinit>:
 800190c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800190e:	b103      	cbz	r3, 8001912 <__sinit+0x6>
 8001910:	4770      	bx	lr
 8001912:	f7ff bf83 	b.w	800181c <__sinit.part.1>
 8001916:	bf00      	nop

08001918 <__sfp_lock_acquire>:
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop

0800191c <__sfp_lock_release>:
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop

08001920 <__libc_fini_array>:
 8001920:	b538      	push	{r3, r4, r5, lr}
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <__libc_fini_array+0x24>)
 8001924:	4d08      	ldr	r5, [pc, #32]	; (8001948 <__libc_fini_array+0x28>)
 8001926:	1aed      	subs	r5, r5, r3
 8001928:	10ac      	asrs	r4, r5, #2
 800192a:	bf18      	it	ne
 800192c:	18ed      	addne	r5, r5, r3
 800192e:	d005      	beq.n	800193c <__libc_fini_array+0x1c>
 8001930:	3c01      	subs	r4, #1
 8001932:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8001936:	4798      	blx	r3
 8001938:	2c00      	cmp	r4, #0
 800193a:	d1f9      	bne.n	8001930 <__libc_fini_array+0x10>
 800193c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001940:	f001 bb0e 	b.w	8002f60 <_fini>
 8001944:	0800308c 	.word	0x0800308c
 8001948:	08003090 	.word	0x08003090

0800194c <_malloc_trim_r>:
 800194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194e:	4f23      	ldr	r7, [pc, #140]	; (80019dc <_malloc_trim_r+0x90>)
 8001950:	460c      	mov	r4, r1
 8001952:	4606      	mov	r6, r0
 8001954:	f000 fe16 	bl	8002584 <__malloc_lock>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	685d      	ldr	r5, [r3, #4]
 800195c:	f025 0503 	bic.w	r5, r5, #3
 8001960:	1b29      	subs	r1, r5, r4
 8001962:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8001966:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800196a:	f021 010f 	bic.w	r1, r1, #15
 800196e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8001972:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001976:	db07      	blt.n	8001988 <_malloc_trim_r+0x3c>
 8001978:	4630      	mov	r0, r6
 800197a:	2100      	movs	r1, #0
 800197c:	f000 fffc 	bl	8002978 <_sbrk_r>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	442b      	add	r3, r5
 8001984:	4298      	cmp	r0, r3
 8001986:	d004      	beq.n	8001992 <_malloc_trim_r+0x46>
 8001988:	4630      	mov	r0, r6
 800198a:	f000 fdfd 	bl	8002588 <__malloc_unlock>
 800198e:	2000      	movs	r0, #0
 8001990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001992:	4630      	mov	r0, r6
 8001994:	4261      	negs	r1, r4
 8001996:	f000 ffef 	bl	8002978 <_sbrk_r>
 800199a:	3001      	adds	r0, #1
 800199c:	d00d      	beq.n	80019ba <_malloc_trim_r+0x6e>
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_malloc_trim_r+0x94>)
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	6819      	ldr	r1, [r3, #0]
 80019a4:	1b2d      	subs	r5, r5, r4
 80019a6:	f045 0501 	orr.w	r5, r5, #1
 80019aa:	4630      	mov	r0, r6
 80019ac:	1b09      	subs	r1, r1, r4
 80019ae:	6055      	str	r5, [r2, #4]
 80019b0:	6019      	str	r1, [r3, #0]
 80019b2:	f000 fde9 	bl	8002588 <__malloc_unlock>
 80019b6:	2001      	movs	r0, #1
 80019b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ba:	4630      	mov	r0, r6
 80019bc:	2100      	movs	r1, #0
 80019be:	f000 ffdb 	bl	8002978 <_sbrk_r>
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	1a83      	subs	r3, r0, r2
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	ddde      	ble.n	8001988 <_malloc_trim_r+0x3c>
 80019ca:	4c06      	ldr	r4, [pc, #24]	; (80019e4 <_malloc_trim_r+0x98>)
 80019cc:	4904      	ldr	r1, [pc, #16]	; (80019e0 <_malloc_trim_r+0x94>)
 80019ce:	6824      	ldr	r4, [r4, #0]
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	1b00      	subs	r0, r0, r4
 80019d6:	6053      	str	r3, [r2, #4]
 80019d8:	6008      	str	r0, [r1, #0]
 80019da:	e7d5      	b.n	8001988 <_malloc_trim_r+0x3c>
 80019dc:	20000444 	.word	0x20000444
 80019e0:	20000884 	.word	0x20000884
 80019e4:	20000850 	.word	0x20000850

080019e8 <_free_r>:
 80019e8:	2900      	cmp	r1, #0
 80019ea:	d04e      	beq.n	8001a8a <_free_r+0xa2>
 80019ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f0:	460c      	mov	r4, r1
 80019f2:	4680      	mov	r8, r0
 80019f4:	f000 fdc6 	bl	8002584 <__malloc_lock>
 80019f8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80019fc:	4962      	ldr	r1, [pc, #392]	; (8001b88 <_free_r+0x1a0>)
 80019fe:	f027 0201 	bic.w	r2, r7, #1
 8001a02:	f1a4 0508 	sub.w	r5, r4, #8
 8001a06:	18ab      	adds	r3, r5, r2
 8001a08:	688e      	ldr	r6, [r1, #8]
 8001a0a:	6858      	ldr	r0, [r3, #4]
 8001a0c:	429e      	cmp	r6, r3
 8001a0e:	f020 0003 	bic.w	r0, r0, #3
 8001a12:	d05a      	beq.n	8001aca <_free_r+0xe2>
 8001a14:	07fe      	lsls	r6, r7, #31
 8001a16:	6058      	str	r0, [r3, #4]
 8001a18:	d40b      	bmi.n	8001a32 <_free_r+0x4a>
 8001a1a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8001a1e:	1bed      	subs	r5, r5, r7
 8001a20:	f101 0e08 	add.w	lr, r1, #8
 8001a24:	68ac      	ldr	r4, [r5, #8]
 8001a26:	4574      	cmp	r4, lr
 8001a28:	443a      	add	r2, r7
 8001a2a:	d067      	beq.n	8001afc <_free_r+0x114>
 8001a2c:	68ef      	ldr	r7, [r5, #12]
 8001a2e:	60e7      	str	r7, [r4, #12]
 8001a30:	60bc      	str	r4, [r7, #8]
 8001a32:	181c      	adds	r4, r3, r0
 8001a34:	6864      	ldr	r4, [r4, #4]
 8001a36:	07e4      	lsls	r4, r4, #31
 8001a38:	d40c      	bmi.n	8001a54 <_free_r+0x6c>
 8001a3a:	4f54      	ldr	r7, [pc, #336]	; (8001b8c <_free_r+0x1a4>)
 8001a3c:	689c      	ldr	r4, [r3, #8]
 8001a3e:	42bc      	cmp	r4, r7
 8001a40:	4402      	add	r2, r0
 8001a42:	d07c      	beq.n	8001b3e <_free_r+0x156>
 8001a44:	68d8      	ldr	r0, [r3, #12]
 8001a46:	60e0      	str	r0, [r4, #12]
 8001a48:	f042 0301 	orr.w	r3, r2, #1
 8001a4c:	6084      	str	r4, [r0, #8]
 8001a4e:	606b      	str	r3, [r5, #4]
 8001a50:	50aa      	str	r2, [r5, r2]
 8001a52:	e003      	b.n	8001a5c <_free_r+0x74>
 8001a54:	f042 0301 	orr.w	r3, r2, #1
 8001a58:	606b      	str	r3, [r5, #4]
 8001a5a:	50aa      	str	r2, [r5, r2]
 8001a5c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001a60:	d214      	bcs.n	8001a8c <_free_r+0xa4>
 8001a62:	08d2      	lsrs	r2, r2, #3
 8001a64:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8001a68:	6848      	ldr	r0, [r1, #4]
 8001a6a:	689f      	ldr	r7, [r3, #8]
 8001a6c:	60af      	str	r7, [r5, #8]
 8001a6e:	1092      	asrs	r2, r2, #2
 8001a70:	2401      	movs	r4, #1
 8001a72:	fa04 f202 	lsl.w	r2, r4, r2
 8001a76:	4310      	orrs	r0, r2
 8001a78:	60eb      	str	r3, [r5, #12]
 8001a7a:	6048      	str	r0, [r1, #4]
 8001a7c:	609d      	str	r5, [r3, #8]
 8001a7e:	60fd      	str	r5, [r7, #12]
 8001a80:	4640      	mov	r0, r8
 8001a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a86:	f000 bd7f 	b.w	8002588 <__malloc_unlock>
 8001a8a:	4770      	bx	lr
 8001a8c:	0a53      	lsrs	r3, r2, #9
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d847      	bhi.n	8001b22 <_free_r+0x13a>
 8001a92:	0993      	lsrs	r3, r2, #6
 8001a94:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001a98:	0060      	lsls	r0, r4, #1
 8001a9a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8001a9e:	493a      	ldr	r1, [pc, #232]	; (8001b88 <_free_r+0x1a0>)
 8001aa0:	6883      	ldr	r3, [r0, #8]
 8001aa2:	4283      	cmp	r3, r0
 8001aa4:	d043      	beq.n	8001b2e <_free_r+0x146>
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	f021 0103 	bic.w	r1, r1, #3
 8001aac:	4291      	cmp	r1, r2
 8001aae:	d902      	bls.n	8001ab6 <_free_r+0xce>
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	4298      	cmp	r0, r3
 8001ab4:	d1f7      	bne.n	8001aa6 <_free_r+0xbe>
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	60ea      	str	r2, [r5, #12]
 8001aba:	60ab      	str	r3, [r5, #8]
 8001abc:	4640      	mov	r0, r8
 8001abe:	6095      	str	r5, [r2, #8]
 8001ac0:	60dd      	str	r5, [r3, #12]
 8001ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac6:	f000 bd5f 	b.w	8002588 <__malloc_unlock>
 8001aca:	07ff      	lsls	r7, r7, #31
 8001acc:	4402      	add	r2, r0
 8001ace:	d407      	bmi.n	8001ae0 <_free_r+0xf8>
 8001ad0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8001ad4:	1aed      	subs	r5, r5, r3
 8001ad6:	441a      	add	r2, r3
 8001ad8:	68a8      	ldr	r0, [r5, #8]
 8001ada:	68eb      	ldr	r3, [r5, #12]
 8001adc:	60c3      	str	r3, [r0, #12]
 8001ade:	6098      	str	r0, [r3, #8]
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <_free_r+0x1a8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0001 	orr.w	r0, r2, #1
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	6068      	str	r0, [r5, #4]
 8001aec:	608d      	str	r5, [r1, #8]
 8001aee:	d3c7      	bcc.n	8001a80 <_free_r+0x98>
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <_free_r+0x1ac>)
 8001af2:	4640      	mov	r0, r8
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	f7ff ff29 	bl	800194c <_malloc_trim_r>
 8001afa:	e7c1      	b.n	8001a80 <_free_r+0x98>
 8001afc:	1819      	adds	r1, r3, r0
 8001afe:	6849      	ldr	r1, [r1, #4]
 8001b00:	07c9      	lsls	r1, r1, #31
 8001b02:	d409      	bmi.n	8001b18 <_free_r+0x130>
 8001b04:	68d9      	ldr	r1, [r3, #12]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4402      	add	r2, r0
 8001b0a:	f042 0001 	orr.w	r0, r2, #1
 8001b0e:	60d9      	str	r1, [r3, #12]
 8001b10:	608b      	str	r3, [r1, #8]
 8001b12:	6068      	str	r0, [r5, #4]
 8001b14:	50aa      	str	r2, [r5, r2]
 8001b16:	e7b3      	b.n	8001a80 <_free_r+0x98>
 8001b18:	f042 0301 	orr.w	r3, r2, #1
 8001b1c:	606b      	str	r3, [r5, #4]
 8001b1e:	50aa      	str	r2, [r5, r2]
 8001b20:	e7ae      	b.n	8001a80 <_free_r+0x98>
 8001b22:	2b14      	cmp	r3, #20
 8001b24:	d814      	bhi.n	8001b50 <_free_r+0x168>
 8001b26:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8001b2a:	0060      	lsls	r0, r4, #1
 8001b2c:	e7b5      	b.n	8001a9a <_free_r+0xb2>
 8001b2e:	684a      	ldr	r2, [r1, #4]
 8001b30:	10a4      	asrs	r4, r4, #2
 8001b32:	2001      	movs	r0, #1
 8001b34:	40a0      	lsls	r0, r4
 8001b36:	4302      	orrs	r2, r0
 8001b38:	604a      	str	r2, [r1, #4]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	e7bc      	b.n	8001ab8 <_free_r+0xd0>
 8001b3e:	f042 0301 	orr.w	r3, r2, #1
 8001b42:	614d      	str	r5, [r1, #20]
 8001b44:	610d      	str	r5, [r1, #16]
 8001b46:	60ec      	str	r4, [r5, #12]
 8001b48:	60ac      	str	r4, [r5, #8]
 8001b4a:	606b      	str	r3, [r5, #4]
 8001b4c:	50aa      	str	r2, [r5, r2]
 8001b4e:	e797      	b.n	8001a80 <_free_r+0x98>
 8001b50:	2b54      	cmp	r3, #84	; 0x54
 8001b52:	d804      	bhi.n	8001b5e <_free_r+0x176>
 8001b54:	0b13      	lsrs	r3, r2, #12
 8001b56:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8001b5a:	0060      	lsls	r0, r4, #1
 8001b5c:	e79d      	b.n	8001a9a <_free_r+0xb2>
 8001b5e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001b62:	d804      	bhi.n	8001b6e <_free_r+0x186>
 8001b64:	0bd3      	lsrs	r3, r2, #15
 8001b66:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8001b6a:	0060      	lsls	r0, r4, #1
 8001b6c:	e795      	b.n	8001a9a <_free_r+0xb2>
 8001b6e:	f240 5054 	movw	r0, #1364	; 0x554
 8001b72:	4283      	cmp	r3, r0
 8001b74:	d804      	bhi.n	8001b80 <_free_r+0x198>
 8001b76:	0c93      	lsrs	r3, r2, #18
 8001b78:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8001b7c:	0060      	lsls	r0, r4, #1
 8001b7e:	e78c      	b.n	8001a9a <_free_r+0xb2>
 8001b80:	20fc      	movs	r0, #252	; 0xfc
 8001b82:	247e      	movs	r4, #126	; 0x7e
 8001b84:	e789      	b.n	8001a9a <_free_r+0xb2>
 8001b86:	bf00      	nop
 8001b88:	20000444 	.word	0x20000444
 8001b8c:	2000044c 	.word	0x2000044c
 8001b90:	2000084c 	.word	0x2000084c
 8001b94:	20000880 	.word	0x20000880

08001b98 <__sfvwrite_r>:
 8001b98:	6893      	ldr	r3, [r2, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d07a      	beq.n	8001c94 <__sfvwrite_r+0xfc>
 8001b9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8001ba6:	f01e 0f08 	tst.w	lr, #8
 8001baa:	b083      	sub	sp, #12
 8001bac:	460c      	mov	r4, r1
 8001bae:	4681      	mov	r9, r0
 8001bb0:	4616      	mov	r6, r2
 8001bb2:	d026      	beq.n	8001c02 <__sfvwrite_r+0x6a>
 8001bb4:	690b      	ldr	r3, [r1, #16]
 8001bb6:	b323      	cbz	r3, 8001c02 <__sfvwrite_r+0x6a>
 8001bb8:	f00e 0802 	and.w	r8, lr, #2
 8001bbc:	fa1f f088 	uxth.w	r0, r8
 8001bc0:	6835      	ldr	r5, [r6, #0]
 8001bc2:	b370      	cbz	r0, 8001c22 <__sfvwrite_r+0x8a>
 8001bc4:	f04f 0a00 	mov.w	sl, #0
 8001bc8:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8001eac <__sfvwrite_r+0x314>
 8001bcc:	46d0      	mov	r8, sl
 8001bce:	45d8      	cmp	r8, fp
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	4652      	mov	r2, sl
 8001bd4:	bf28      	it	cs
 8001bd6:	465b      	movcs	r3, fp
 8001bd8:	4648      	mov	r0, r9
 8001bda:	f1b8 0f00 	cmp.w	r8, #0
 8001bde:	d053      	beq.n	8001c88 <__sfvwrite_r+0xf0>
 8001be0:	69e1      	ldr	r1, [r4, #28]
 8001be2:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8001be4:	47b8      	blx	r7
 8001be6:	2800      	cmp	r0, #0
 8001be8:	dd73      	ble.n	8001cd2 <__sfvwrite_r+0x13a>
 8001bea:	68b3      	ldr	r3, [r6, #8]
 8001bec:	1a1b      	subs	r3, r3, r0
 8001bee:	4482      	add	sl, r0
 8001bf0:	ebc0 0808 	rsb	r8, r0, r8
 8001bf4:	60b3      	str	r3, [r6, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1e9      	bne.n	8001bce <__sfvwrite_r+0x36>
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	b003      	add	sp, #12
 8001bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c02:	4648      	mov	r0, r9
 8001c04:	4621      	mov	r1, r4
 8001c06:	f000 ff1f 	bl	8002a48 <__swsetup_r>
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	f040 8145 	bne.w	8001e9a <__sfvwrite_r+0x302>
 8001c10:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8001c14:	6835      	ldr	r5, [r6, #0]
 8001c16:	f00e 0802 	and.w	r8, lr, #2
 8001c1a:	fa1f f088 	uxth.w	r0, r8
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d1d0      	bne.n	8001bc4 <__sfvwrite_r+0x2c>
 8001c22:	f01e 0b01 	ands.w	fp, lr, #1
 8001c26:	d15d      	bne.n	8001ce4 <__sfvwrite_r+0x14c>
 8001c28:	46d8      	mov	r8, fp
 8001c2a:	f1b8 0f00 	cmp.w	r8, #0
 8001c2e:	d025      	beq.n	8001c7c <__sfvwrite_r+0xe4>
 8001c30:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8001c34:	68a7      	ldr	r7, [r4, #8]
 8001c36:	d02f      	beq.n	8001c98 <__sfvwrite_r+0x100>
 8001c38:	45b8      	cmp	r8, r7
 8001c3a:	46ba      	mov	sl, r7
 8001c3c:	f0c0 80a9 	bcc.w	8001d92 <__sfvwrite_r+0x1fa>
 8001c40:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8001c44:	f040 80b6 	bne.w	8001db4 <__sfvwrite_r+0x21c>
 8001c48:	6820      	ldr	r0, [r4, #0]
 8001c4a:	4652      	mov	r2, sl
 8001c4c:	4659      	mov	r1, fp
 8001c4e:	f000 fc35 	bl	80024bc <memmove>
 8001c52:	68a0      	ldr	r0, [r4, #8]
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	1bc0      	subs	r0, r0, r7
 8001c58:	eb02 030a 	add.w	r3, r2, sl
 8001c5c:	60a0      	str	r0, [r4, #8]
 8001c5e:	6023      	str	r3, [r4, #0]
 8001c60:	4640      	mov	r0, r8
 8001c62:	68b3      	ldr	r3, [r6, #8]
 8001c64:	1a1b      	subs	r3, r3, r0
 8001c66:	4483      	add	fp, r0
 8001c68:	ebc0 0808 	rsb	r8, r0, r8
 8001c6c:	60b3      	str	r3, [r6, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0c3      	beq.n	8001bfa <__sfvwrite_r+0x62>
 8001c72:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8001c76:	f1b8 0f00 	cmp.w	r8, #0
 8001c7a:	d1d9      	bne.n	8001c30 <__sfvwrite_r+0x98>
 8001c7c:	f8d5 b000 	ldr.w	fp, [r5]
 8001c80:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8001c84:	3508      	adds	r5, #8
 8001c86:	e7d0      	b.n	8001c2a <__sfvwrite_r+0x92>
 8001c88:	f8d5 a000 	ldr.w	sl, [r5]
 8001c8c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8001c90:	3508      	adds	r5, #8
 8001c92:	e79c      	b.n	8001bce <__sfvwrite_r+0x36>
 8001c94:	2000      	movs	r0, #0
 8001c96:	4770      	bx	lr
 8001c98:	6820      	ldr	r0, [r4, #0]
 8001c9a:	6923      	ldr	r3, [r4, #16]
 8001c9c:	4298      	cmp	r0, r3
 8001c9e:	d803      	bhi.n	8001ca8 <__sfvwrite_r+0x110>
 8001ca0:	6962      	ldr	r2, [r4, #20]
 8001ca2:	4590      	cmp	r8, r2
 8001ca4:	f080 80b9 	bcs.w	8001e1a <__sfvwrite_r+0x282>
 8001ca8:	4547      	cmp	r7, r8
 8001caa:	bf28      	it	cs
 8001cac:	4647      	movcs	r7, r8
 8001cae:	463a      	mov	r2, r7
 8001cb0:	4659      	mov	r1, fp
 8001cb2:	f000 fc03 	bl	80024bc <memmove>
 8001cb6:	68a3      	ldr	r3, [r4, #8]
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	1bdb      	subs	r3, r3, r7
 8001cbc:	443a      	add	r2, r7
 8001cbe:	60a3      	str	r3, [r4, #8]
 8001cc0:	6022      	str	r2, [r4, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d14a      	bne.n	8001d5c <__sfvwrite_r+0x1c4>
 8001cc6:	4648      	mov	r0, r9
 8001cc8:	4621      	mov	r1, r4
 8001cca:	f001 f86f 	bl	8002dac <_fflush_r>
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	d044      	beq.n	8001d5c <__sfvwrite_r+0x1c4>
 8001cd2:	89a3      	ldrh	r3, [r4, #12]
 8001cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cdc:	81a3      	strh	r3, [r4, #12]
 8001cde:	b003      	add	sp, #12
 8001ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ce4:	4680      	mov	r8, r0
 8001ce6:	9000      	str	r0, [sp, #0]
 8001ce8:	4683      	mov	fp, r0
 8001cea:	4682      	mov	sl, r0
 8001cec:	f1ba 0f00 	cmp.w	sl, #0
 8001cf0:	d02c      	beq.n	8001d4c <__sfvwrite_r+0x1b4>
 8001cf2:	9b00      	ldr	r3, [sp, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d050      	beq.n	8001d9a <__sfvwrite_r+0x202>
 8001cf8:	6820      	ldr	r0, [r4, #0]
 8001cfa:	6921      	ldr	r1, [r4, #16]
 8001cfc:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8001d00:	6962      	ldr	r2, [r4, #20]
 8001d02:	45d0      	cmp	r8, sl
 8001d04:	4643      	mov	r3, r8
 8001d06:	bf28      	it	cs
 8001d08:	4653      	movcs	r3, sl
 8001d0a:	4288      	cmp	r0, r1
 8001d0c:	461f      	mov	r7, r3
 8001d0e:	d904      	bls.n	8001d1a <__sfvwrite_r+0x182>
 8001d10:	eb0e 0c02 	add.w	ip, lr, r2
 8001d14:	4563      	cmp	r3, ip
 8001d16:	f300 8092 	bgt.w	8001e3e <__sfvwrite_r+0x2a6>
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	db20      	blt.n	8001d60 <__sfvwrite_r+0x1c8>
 8001d1e:	4613      	mov	r3, r2
 8001d20:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8001d22:	69e1      	ldr	r1, [r4, #28]
 8001d24:	4648      	mov	r0, r9
 8001d26:	465a      	mov	r2, fp
 8001d28:	47b8      	blx	r7
 8001d2a:	1e07      	subs	r7, r0, #0
 8001d2c:	ddd1      	ble.n	8001cd2 <__sfvwrite_r+0x13a>
 8001d2e:	ebb8 0807 	subs.w	r8, r8, r7
 8001d32:	d025      	beq.n	8001d80 <__sfvwrite_r+0x1e8>
 8001d34:	68b3      	ldr	r3, [r6, #8]
 8001d36:	1bdb      	subs	r3, r3, r7
 8001d38:	44bb      	add	fp, r7
 8001d3a:	ebc7 0a0a 	rsb	sl, r7, sl
 8001d3e:	60b3      	str	r3, [r6, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f43f af5a 	beq.w	8001bfa <__sfvwrite_r+0x62>
 8001d46:	f1ba 0f00 	cmp.w	sl, #0
 8001d4a:	d1d2      	bne.n	8001cf2 <__sfvwrite_r+0x15a>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8d5 b000 	ldr.w	fp, [r5]
 8001d52:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	3508      	adds	r5, #8
 8001d5a:	e7c7      	b.n	8001cec <__sfvwrite_r+0x154>
 8001d5c:	4638      	mov	r0, r7
 8001d5e:	e780      	b.n	8001c62 <__sfvwrite_r+0xca>
 8001d60:	461a      	mov	r2, r3
 8001d62:	4659      	mov	r1, fp
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	f000 fba9 	bl	80024bc <memmove>
 8001d6a:	68a2      	ldr	r2, [r4, #8]
 8001d6c:	6821      	ldr	r1, [r4, #0]
 8001d6e:	9b01      	ldr	r3, [sp, #4]
 8001d70:	ebb8 0807 	subs.w	r8, r8, r7
 8001d74:	eba2 0203 	sub.w	r2, r2, r3
 8001d78:	440b      	add	r3, r1
 8001d7a:	60a2      	str	r2, [r4, #8]
 8001d7c:	6023      	str	r3, [r4, #0]
 8001d7e:	d1d9      	bne.n	8001d34 <__sfvwrite_r+0x19c>
 8001d80:	4648      	mov	r0, r9
 8001d82:	4621      	mov	r1, r4
 8001d84:	f001 f812 	bl	8002dac <_fflush_r>
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d1a2      	bne.n	8001cd2 <__sfvwrite_r+0x13a>
 8001d8c:	f8cd 8000 	str.w	r8, [sp]
 8001d90:	e7d0      	b.n	8001d34 <__sfvwrite_r+0x19c>
 8001d92:	6820      	ldr	r0, [r4, #0]
 8001d94:	4647      	mov	r7, r8
 8001d96:	46c2      	mov	sl, r8
 8001d98:	e757      	b.n	8001c4a <__sfvwrite_r+0xb2>
 8001d9a:	4658      	mov	r0, fp
 8001d9c:	210a      	movs	r1, #10
 8001d9e:	4652      	mov	r2, sl
 8001da0:	f000 fb42 	bl	8002428 <memchr>
 8001da4:	2800      	cmp	r0, #0
 8001da6:	d073      	beq.n	8001e90 <__sfvwrite_r+0x2f8>
 8001da8:	3001      	adds	r0, #1
 8001daa:	2301      	movs	r3, #1
 8001dac:	ebcb 0800 	rsb	r8, fp, r0
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	e7a1      	b.n	8001cf8 <__sfvwrite_r+0x160>
 8001db4:	6967      	ldr	r7, [r4, #20]
 8001db6:	6921      	ldr	r1, [r4, #16]
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8001dbe:	1a5b      	subs	r3, r3, r1
 8001dc0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8001dc4:	1c58      	adds	r0, r3, #1
 8001dc6:	107f      	asrs	r7, r7, #1
 8001dc8:	4440      	add	r0, r8
 8001dca:	4287      	cmp	r7, r0
 8001dcc:	463a      	mov	r2, r7
 8001dce:	bf3c      	itt	cc
 8001dd0:	4607      	movcc	r7, r0
 8001dd2:	463a      	movcc	r2, r7
 8001dd4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	d046      	beq.n	8001e6a <__sfvwrite_r+0x2d2>
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4648      	mov	r0, r9
 8001de0:	f000 f890 	bl	8001f04 <_malloc_r>
 8001de4:	9b00      	ldr	r3, [sp, #0]
 8001de6:	4682      	mov	sl, r0
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d059      	beq.n	8001ea0 <__sfvwrite_r+0x308>
 8001dec:	461a      	mov	r2, r3
 8001dee:	6921      	ldr	r1, [r4, #16]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	f7fe f9f7 	bl	80001e4 <memcpy>
 8001df6:	89a2      	ldrh	r2, [r4, #12]
 8001df8:	9b00      	ldr	r3, [sp, #0]
 8001dfa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8001dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e02:	81a2      	strh	r2, [r4, #12]
 8001e04:	eb0a 0003 	add.w	r0, sl, r3
 8001e08:	1afb      	subs	r3, r7, r3
 8001e0a:	f8c4 a010 	str.w	sl, [r4, #16]
 8001e0e:	6167      	str	r7, [r4, #20]
 8001e10:	6020      	str	r0, [r4, #0]
 8001e12:	60a3      	str	r3, [r4, #8]
 8001e14:	4647      	mov	r7, r8
 8001e16:	46c2      	mov	sl, r8
 8001e18:	e717      	b.n	8001c4a <__sfvwrite_r+0xb2>
 8001e1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001e1e:	4543      	cmp	r3, r8
 8001e20:	bf28      	it	cs
 8001e22:	4643      	movcs	r3, r8
 8001e24:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8001e26:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e2a:	4648      	mov	r0, r9
 8001e2c:	fb03 f302 	mul.w	r3, r3, r2
 8001e30:	69e1      	ldr	r1, [r4, #28]
 8001e32:	465a      	mov	r2, fp
 8001e34:	47b8      	blx	r7
 8001e36:	2800      	cmp	r0, #0
 8001e38:	f73f af13 	bgt.w	8001c62 <__sfvwrite_r+0xca>
 8001e3c:	e749      	b.n	8001cd2 <__sfvwrite_r+0x13a>
 8001e3e:	4662      	mov	r2, ip
 8001e40:	4659      	mov	r1, fp
 8001e42:	f8cd c004 	str.w	ip, [sp, #4]
 8001e46:	f000 fb39 	bl	80024bc <memmove>
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001e50:	4463      	add	r3, ip
 8001e52:	6023      	str	r3, [r4, #0]
 8001e54:	4648      	mov	r0, r9
 8001e56:	4621      	mov	r1, r4
 8001e58:	f000 ffa8 	bl	8002dac <_fflush_r>
 8001e5c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001e60:	2800      	cmp	r0, #0
 8001e62:	f47f af36 	bne.w	8001cd2 <__sfvwrite_r+0x13a>
 8001e66:	4667      	mov	r7, ip
 8001e68:	e761      	b.n	8001d2e <__sfvwrite_r+0x196>
 8001e6a:	4648      	mov	r0, r9
 8001e6c:	f000 fb8e 	bl	800258c <_realloc_r>
 8001e70:	9b00      	ldr	r3, [sp, #0]
 8001e72:	4682      	mov	sl, r0
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d1c5      	bne.n	8001e04 <__sfvwrite_r+0x26c>
 8001e78:	4648      	mov	r0, r9
 8001e7a:	6921      	ldr	r1, [r4, #16]
 8001e7c:	f7ff fdb4 	bl	80019e8 <_free_r>
 8001e80:	89a3      	ldrh	r3, [r4, #12]
 8001e82:	220c      	movs	r2, #12
 8001e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f8c9 2000 	str.w	r2, [r9]
 8001e8e:	e721      	b.n	8001cd4 <__sfvwrite_r+0x13c>
 8001e90:	2301      	movs	r3, #1
 8001e92:	f10a 0801 	add.w	r8, sl, #1
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	e72e      	b.n	8001cf8 <__sfvwrite_r+0x160>
 8001e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e9e:	e6ad      	b.n	8001bfc <__sfvwrite_r+0x64>
 8001ea0:	230c      	movs	r3, #12
 8001ea2:	f8c9 3000 	str.w	r3, [r9]
 8001ea6:	89a3      	ldrh	r3, [r4, #12]
 8001ea8:	e714      	b.n	8001cd4 <__sfvwrite_r+0x13c>
 8001eaa:	bf00      	nop
 8001eac:	7ffffc00 	.word	0x7ffffc00

08001eb0 <_fwalk_reent>:
 8001eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eb4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8001eb8:	d01f      	beq.n	8001efa <_fwalk_reent+0x4a>
 8001eba:	4688      	mov	r8, r1
 8001ebc:	4606      	mov	r6, r0
 8001ebe:	f04f 0900 	mov.w	r9, #0
 8001ec2:	687d      	ldr	r5, [r7, #4]
 8001ec4:	68bc      	ldr	r4, [r7, #8]
 8001ec6:	3d01      	subs	r5, #1
 8001ec8:	d411      	bmi.n	8001eee <_fwalk_reent+0x3e>
 8001eca:	89a3      	ldrh	r3, [r4, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001ed2:	d908      	bls.n	8001ee6 <_fwalk_reent+0x36>
 8001ed4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4621      	mov	r1, r4
 8001edc:	4630      	mov	r0, r6
 8001ede:	d002      	beq.n	8001ee6 <_fwalk_reent+0x36>
 8001ee0:	47c0      	blx	r8
 8001ee2:	ea49 0900 	orr.w	r9, r9, r0
 8001ee6:	1c6b      	adds	r3, r5, #1
 8001ee8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001eec:	d1ed      	bne.n	8001eca <_fwalk_reent+0x1a>
 8001eee:	683f      	ldr	r7, [r7, #0]
 8001ef0:	2f00      	cmp	r7, #0
 8001ef2:	d1e6      	bne.n	8001ec2 <_fwalk_reent+0x12>
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001efa:	46b9      	mov	r9, r7
 8001efc:	4648      	mov	r0, r9
 8001efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f02:	bf00      	nop

08001f04 <_malloc_r>:
 8001f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f08:	f101 050b 	add.w	r5, r1, #11
 8001f0c:	2d16      	cmp	r5, #22
 8001f0e:	b083      	sub	sp, #12
 8001f10:	4606      	mov	r6, r0
 8001f12:	d927      	bls.n	8001f64 <_malloc_r+0x60>
 8001f14:	f035 0507 	bics.w	r5, r5, #7
 8001f18:	f100 80b6 	bmi.w	8002088 <_malloc_r+0x184>
 8001f1c:	42a9      	cmp	r1, r5
 8001f1e:	f200 80b3 	bhi.w	8002088 <_malloc_r+0x184>
 8001f22:	f000 fb2f 	bl	8002584 <__malloc_lock>
 8001f26:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8001f2a:	d222      	bcs.n	8001f72 <_malloc_r+0x6e>
 8001f2c:	4fc2      	ldr	r7, [pc, #776]	; (8002238 <_malloc_r+0x334>)
 8001f2e:	08e8      	lsrs	r0, r5, #3
 8001f30:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8001f34:	68dc      	ldr	r4, [r3, #12]
 8001f36:	429c      	cmp	r4, r3
 8001f38:	f000 81c8 	beq.w	80022cc <_malloc_r+0x3c8>
 8001f3c:	6863      	ldr	r3, [r4, #4]
 8001f3e:	68e1      	ldr	r1, [r4, #12]
 8001f40:	68a5      	ldr	r5, [r4, #8]
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	4423      	add	r3, r4
 8001f48:	4630      	mov	r0, r6
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	60e9      	str	r1, [r5, #12]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	608d      	str	r5, [r1, #8]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	f000 fb17 	bl	8002588 <__malloc_unlock>
 8001f5a:	3408      	adds	r4, #8
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	b003      	add	sp, #12
 8001f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f64:	2910      	cmp	r1, #16
 8001f66:	f200 808f 	bhi.w	8002088 <_malloc_r+0x184>
 8001f6a:	f000 fb0b 	bl	8002584 <__malloc_lock>
 8001f6e:	2510      	movs	r5, #16
 8001f70:	e7dc      	b.n	8001f2c <_malloc_r+0x28>
 8001f72:	0a68      	lsrs	r0, r5, #9
 8001f74:	f000 808f 	beq.w	8002096 <_malloc_r+0x192>
 8001f78:	2804      	cmp	r0, #4
 8001f7a:	f200 8154 	bhi.w	8002226 <_malloc_r+0x322>
 8001f7e:	09a8      	lsrs	r0, r5, #6
 8001f80:	3038      	adds	r0, #56	; 0x38
 8001f82:	0041      	lsls	r1, r0, #1
 8001f84:	4fac      	ldr	r7, [pc, #688]	; (8002238 <_malloc_r+0x334>)
 8001f86:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8001f8a:	68cc      	ldr	r4, [r1, #12]
 8001f8c:	42a1      	cmp	r1, r4
 8001f8e:	d106      	bne.n	8001f9e <_malloc_r+0x9a>
 8001f90:	e00c      	b.n	8001fac <_malloc_r+0xa8>
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	f280 8082 	bge.w	800209c <_malloc_r+0x198>
 8001f98:	68e4      	ldr	r4, [r4, #12]
 8001f9a:	42a1      	cmp	r1, r4
 8001f9c:	d006      	beq.n	8001fac <_malloc_r+0xa8>
 8001f9e:	6863      	ldr	r3, [r4, #4]
 8001fa0:	f023 0303 	bic.w	r3, r3, #3
 8001fa4:	1b5a      	subs	r2, r3, r5
 8001fa6:	2a0f      	cmp	r2, #15
 8001fa8:	ddf3      	ble.n	8001f92 <_malloc_r+0x8e>
 8001faa:	3801      	subs	r0, #1
 8001fac:	3001      	adds	r0, #1
 8001fae:	49a2      	ldr	r1, [pc, #648]	; (8002238 <_malloc_r+0x334>)
 8001fb0:	693c      	ldr	r4, [r7, #16]
 8001fb2:	f101 0e08 	add.w	lr, r1, #8
 8001fb6:	4574      	cmp	r4, lr
 8001fb8:	f000 817d 	beq.w	80022b6 <_malloc_r+0x3b2>
 8001fbc:	6863      	ldr	r3, [r4, #4]
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	1b5a      	subs	r2, r3, r5
 8001fc4:	2a0f      	cmp	r2, #15
 8001fc6:	f300 8163 	bgt.w	8002290 <_malloc_r+0x38c>
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	f8c1 e014 	str.w	lr, [r1, #20]
 8001fd0:	f8c1 e010 	str.w	lr, [r1, #16]
 8001fd4:	da73      	bge.n	80020be <_malloc_r+0x1ba>
 8001fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fda:	f080 8139 	bcs.w	8002250 <_malloc_r+0x34c>
 8001fde:	08db      	lsrs	r3, r3, #3
 8001fe0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8001fe4:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8001fe8:	684a      	ldr	r2, [r1, #4]
 8001fea:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8001fee:	f8c4 9008 	str.w	r9, [r4, #8]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	fa03 f30c 	lsl.w	r3, r3, ip
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c4 800c 	str.w	r8, [r4, #12]
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	f8c8 4008 	str.w	r4, [r8, #8]
 8002004:	f8c9 400c 	str.w	r4, [r9, #12]
 8002008:	1082      	asrs	r2, r0, #2
 800200a:	2401      	movs	r4, #1
 800200c:	4094      	lsls	r4, r2
 800200e:	429c      	cmp	r4, r3
 8002010:	d862      	bhi.n	80020d8 <_malloc_r+0x1d4>
 8002012:	4223      	tst	r3, r4
 8002014:	d106      	bne.n	8002024 <_malloc_r+0x120>
 8002016:	f020 0003 	bic.w	r0, r0, #3
 800201a:	0064      	lsls	r4, r4, #1
 800201c:	4223      	tst	r3, r4
 800201e:	f100 0004 	add.w	r0, r0, #4
 8002022:	d0fa      	beq.n	800201a <_malloc_r+0x116>
 8002024:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8002028:	46c4      	mov	ip, r8
 800202a:	4681      	mov	r9, r0
 800202c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8002030:	459c      	cmp	ip, r3
 8002032:	d107      	bne.n	8002044 <_malloc_r+0x140>
 8002034:	e141      	b.n	80022ba <_malloc_r+0x3b6>
 8002036:	2900      	cmp	r1, #0
 8002038:	f280 8151 	bge.w	80022de <_malloc_r+0x3da>
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	459c      	cmp	ip, r3
 8002040:	f000 813b 	beq.w	80022ba <_malloc_r+0x3b6>
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	f022 0203 	bic.w	r2, r2, #3
 800204a:	1b51      	subs	r1, r2, r5
 800204c:	290f      	cmp	r1, #15
 800204e:	ddf2      	ble.n	8002036 <_malloc_r+0x132>
 8002050:	461c      	mov	r4, r3
 8002052:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8002056:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800205a:	195a      	adds	r2, r3, r5
 800205c:	f045 0901 	orr.w	r9, r5, #1
 8002060:	f041 0501 	orr.w	r5, r1, #1
 8002064:	f8c3 9004 	str.w	r9, [r3, #4]
 8002068:	4630      	mov	r0, r6
 800206a:	f8c8 c00c 	str.w	ip, [r8, #12]
 800206e:	f8cc 8008 	str.w	r8, [ip, #8]
 8002072:	617a      	str	r2, [r7, #20]
 8002074:	613a      	str	r2, [r7, #16]
 8002076:	f8c2 e00c 	str.w	lr, [r2, #12]
 800207a:	f8c2 e008 	str.w	lr, [r2, #8]
 800207e:	6055      	str	r5, [r2, #4]
 8002080:	5051      	str	r1, [r2, r1]
 8002082:	f000 fa81 	bl	8002588 <__malloc_unlock>
 8002086:	e769      	b.n	8001f5c <_malloc_r+0x58>
 8002088:	2400      	movs	r4, #0
 800208a:	230c      	movs	r3, #12
 800208c:	4620      	mov	r0, r4
 800208e:	6033      	str	r3, [r6, #0]
 8002090:	b003      	add	sp, #12
 8002092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002096:	217e      	movs	r1, #126	; 0x7e
 8002098:	203f      	movs	r0, #63	; 0x3f
 800209a:	e773      	b.n	8001f84 <_malloc_r+0x80>
 800209c:	4423      	add	r3, r4
 800209e:	68e1      	ldr	r1, [r4, #12]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68a5      	ldr	r5, [r4, #8]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	60e9      	str	r1, [r5, #12]
 80020aa:	4630      	mov	r0, r6
 80020ac:	608d      	str	r5, [r1, #8]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	f000 fa6a 	bl	8002588 <__malloc_unlock>
 80020b4:	3408      	adds	r4, #8
 80020b6:	4620      	mov	r0, r4
 80020b8:	b003      	add	sp, #12
 80020ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020be:	4423      	add	r3, r4
 80020c0:	4630      	mov	r0, r6
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	f000 fa5d 	bl	8002588 <__malloc_unlock>
 80020ce:	3408      	adds	r4, #8
 80020d0:	4620      	mov	r0, r4
 80020d2:	b003      	add	sp, #12
 80020d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020d8:	68bc      	ldr	r4, [r7, #8]
 80020da:	6863      	ldr	r3, [r4, #4]
 80020dc:	f023 0803 	bic.w	r8, r3, #3
 80020e0:	4545      	cmp	r5, r8
 80020e2:	d804      	bhi.n	80020ee <_malloc_r+0x1ea>
 80020e4:	ebc5 0308 	rsb	r3, r5, r8
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	f300 808c 	bgt.w	8002206 <_malloc_r+0x302>
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <_malloc_r+0x338>)
 80020f0:	f8df a158 	ldr.w	sl, [pc, #344]	; 800224c <_malloc_r+0x348>
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	f8da 3000 	ldr.w	r3, [sl]
 80020fa:	3301      	adds	r3, #1
 80020fc:	442a      	add	r2, r5
 80020fe:	eb04 0b08 	add.w	fp, r4, r8
 8002102:	f000 8150 	beq.w	80023a6 <_malloc_r+0x4a2>
 8002106:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800210a:	320f      	adds	r2, #15
 800210c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002110:	f022 020f 	bic.w	r2, r2, #15
 8002114:	4611      	mov	r1, r2
 8002116:	4630      	mov	r0, r6
 8002118:	9201      	str	r2, [sp, #4]
 800211a:	f000 fc2d 	bl	8002978 <_sbrk_r>
 800211e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002122:	4681      	mov	r9, r0
 8002124:	9a01      	ldr	r2, [sp, #4]
 8002126:	f000 8147 	beq.w	80023b8 <_malloc_r+0x4b4>
 800212a:	4583      	cmp	fp, r0
 800212c:	f200 80ee 	bhi.w	800230c <_malloc_r+0x408>
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <_malloc_r+0x33c>)
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	45cb      	cmp	fp, r9
 8002136:	4411      	add	r1, r2
 8002138:	6019      	str	r1, [r3, #0]
 800213a:	f000 8142 	beq.w	80023c2 <_malloc_r+0x4be>
 800213e:	f8da 0000 	ldr.w	r0, [sl]
 8002142:	f8df e108 	ldr.w	lr, [pc, #264]	; 800224c <_malloc_r+0x348>
 8002146:	3001      	adds	r0, #1
 8002148:	bf1b      	ittet	ne
 800214a:	ebcb 0b09 	rsbne	fp, fp, r9
 800214e:	4459      	addne	r1, fp
 8002150:	f8ce 9000 	streq.w	r9, [lr]
 8002154:	6019      	strne	r1, [r3, #0]
 8002156:	f019 0107 	ands.w	r1, r9, #7
 800215a:	f000 8107 	beq.w	800236c <_malloc_r+0x468>
 800215e:	f1c1 0008 	rsb	r0, r1, #8
 8002162:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8002166:	4481      	add	r9, r0
 8002168:	3108      	adds	r1, #8
 800216a:	444a      	add	r2, r9
 800216c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002170:	ebc2 0a01 	rsb	sl, r2, r1
 8002174:	4651      	mov	r1, sl
 8002176:	4630      	mov	r0, r6
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	f000 fbfd 	bl	8002978 <_sbrk_r>
 800217e:	1c43      	adds	r3, r0, #1
 8002180:	9b01      	ldr	r3, [sp, #4]
 8002182:	f000 812c 	beq.w	80023de <_malloc_r+0x4da>
 8002186:	ebc9 0200 	rsb	r2, r9, r0
 800218a:	4452      	add	r2, sl
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	f8c7 9008 	str.w	r9, [r7, #8]
 8002196:	4451      	add	r1, sl
 8002198:	42bc      	cmp	r4, r7
 800219a:	f8c9 2004 	str.w	r2, [r9, #4]
 800219e:	6019      	str	r1, [r3, #0]
 80021a0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8002240 <_malloc_r+0x33c>
 80021a4:	d016      	beq.n	80021d4 <_malloc_r+0x2d0>
 80021a6:	f1b8 0f0f 	cmp.w	r8, #15
 80021aa:	f240 80ee 	bls.w	800238a <_malloc_r+0x486>
 80021ae:	6862      	ldr	r2, [r4, #4]
 80021b0:	f1a8 030c 	sub.w	r3, r8, #12
 80021b4:	f023 0307 	bic.w	r3, r3, #7
 80021b8:	18e0      	adds	r0, r4, r3
 80021ba:	f002 0201 	and.w	r2, r2, #1
 80021be:	f04f 0e05 	mov.w	lr, #5
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	6062      	str	r2, [r4, #4]
 80021c8:	f8c0 e004 	str.w	lr, [r0, #4]
 80021cc:	f8c0 e008 	str.w	lr, [r0, #8]
 80021d0:	f200 8109 	bhi.w	80023e6 <_malloc_r+0x4e2>
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <_malloc_r+0x340>)
 80021d6:	68bc      	ldr	r4, [r7, #8]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4291      	cmp	r1, r2
 80021dc:	bf88      	it	hi
 80021de:	6019      	strhi	r1, [r3, #0]
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <_malloc_r+0x344>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4291      	cmp	r1, r2
 80021e6:	6862      	ldr	r2, [r4, #4]
 80021e8:	bf88      	it	hi
 80021ea:	6019      	strhi	r1, [r3, #0]
 80021ec:	f022 0203 	bic.w	r2, r2, #3
 80021f0:	4295      	cmp	r5, r2
 80021f2:	eba2 0305 	sub.w	r3, r2, r5
 80021f6:	d801      	bhi.n	80021fc <_malloc_r+0x2f8>
 80021f8:	2b0f      	cmp	r3, #15
 80021fa:	dc04      	bgt.n	8002206 <_malloc_r+0x302>
 80021fc:	4630      	mov	r0, r6
 80021fe:	f000 f9c3 	bl	8002588 <__malloc_unlock>
 8002202:	2400      	movs	r4, #0
 8002204:	e6aa      	b.n	8001f5c <_malloc_r+0x58>
 8002206:	1962      	adds	r2, r4, r5
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f045 0501 	orr.w	r5, r5, #1
 8002210:	6065      	str	r5, [r4, #4]
 8002212:	4630      	mov	r0, r6
 8002214:	60ba      	str	r2, [r7, #8]
 8002216:	6053      	str	r3, [r2, #4]
 8002218:	f000 f9b6 	bl	8002588 <__malloc_unlock>
 800221c:	3408      	adds	r4, #8
 800221e:	4620      	mov	r0, r4
 8002220:	b003      	add	sp, #12
 8002222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002226:	2814      	cmp	r0, #20
 8002228:	d968      	bls.n	80022fc <_malloc_r+0x3f8>
 800222a:	2854      	cmp	r0, #84	; 0x54
 800222c:	f200 8097 	bhi.w	800235e <_malloc_r+0x45a>
 8002230:	0b28      	lsrs	r0, r5, #12
 8002232:	306e      	adds	r0, #110	; 0x6e
 8002234:	0041      	lsls	r1, r0, #1
 8002236:	e6a5      	b.n	8001f84 <_malloc_r+0x80>
 8002238:	20000444 	.word	0x20000444
 800223c:	20000880 	.word	0x20000880
 8002240:	20000884 	.word	0x20000884
 8002244:	2000087c 	.word	0x2000087c
 8002248:	20000878 	.word	0x20000878
 800224c:	20000850 	.word	0x20000850
 8002250:	0a5a      	lsrs	r2, r3, #9
 8002252:	2a04      	cmp	r2, #4
 8002254:	d955      	bls.n	8002302 <_malloc_r+0x3fe>
 8002256:	2a14      	cmp	r2, #20
 8002258:	f200 80a7 	bhi.w	80023aa <_malloc_r+0x4a6>
 800225c:	325b      	adds	r2, #91	; 0x5b
 800225e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8002262:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8002266:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002424 <_malloc_r+0x520>
 800226a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800226e:	4561      	cmp	r1, ip
 8002270:	d07f      	beq.n	8002372 <_malloc_r+0x46e>
 8002272:	684a      	ldr	r2, [r1, #4]
 8002274:	f022 0203 	bic.w	r2, r2, #3
 8002278:	4293      	cmp	r3, r2
 800227a:	d202      	bcs.n	8002282 <_malloc_r+0x37e>
 800227c:	6889      	ldr	r1, [r1, #8]
 800227e:	458c      	cmp	ip, r1
 8002280:	d1f7      	bne.n	8002272 <_malloc_r+0x36e>
 8002282:	68ca      	ldr	r2, [r1, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	60e2      	str	r2, [r4, #12]
 8002288:	60a1      	str	r1, [r4, #8]
 800228a:	6094      	str	r4, [r2, #8]
 800228c:	60cc      	str	r4, [r1, #12]
 800228e:	e6bb      	b.n	8002008 <_malloc_r+0x104>
 8002290:	1963      	adds	r3, r4, r5
 8002292:	f042 0701 	orr.w	r7, r2, #1
 8002296:	f045 0501 	orr.w	r5, r5, #1
 800229a:	6065      	str	r5, [r4, #4]
 800229c:	4630      	mov	r0, r6
 800229e:	614b      	str	r3, [r1, #20]
 80022a0:	610b      	str	r3, [r1, #16]
 80022a2:	f8c3 e00c 	str.w	lr, [r3, #12]
 80022a6:	f8c3 e008 	str.w	lr, [r3, #8]
 80022aa:	605f      	str	r7, [r3, #4]
 80022ac:	509a      	str	r2, [r3, r2]
 80022ae:	3408      	adds	r4, #8
 80022b0:	f000 f96a 	bl	8002588 <__malloc_unlock>
 80022b4:	e652      	b.n	8001f5c <_malloc_r+0x58>
 80022b6:	684b      	ldr	r3, [r1, #4]
 80022b8:	e6a6      	b.n	8002008 <_malloc_r+0x104>
 80022ba:	f109 0901 	add.w	r9, r9, #1
 80022be:	f019 0f03 	tst.w	r9, #3
 80022c2:	f10c 0c08 	add.w	ip, ip, #8
 80022c6:	f47f aeb1 	bne.w	800202c <_malloc_r+0x128>
 80022ca:	e02c      	b.n	8002326 <_malloc_r+0x422>
 80022cc:	f104 0308 	add.w	r3, r4, #8
 80022d0:	6964      	ldr	r4, [r4, #20]
 80022d2:	42a3      	cmp	r3, r4
 80022d4:	bf08      	it	eq
 80022d6:	3002      	addeq	r0, #2
 80022d8:	f43f ae69 	beq.w	8001fae <_malloc_r+0xaa>
 80022dc:	e62e      	b.n	8001f3c <_malloc_r+0x38>
 80022de:	441a      	add	r2, r3
 80022e0:	461c      	mov	r4, r3
 80022e2:	6851      	ldr	r1, [r2, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80022ea:	f041 0101 	orr.w	r1, r1, #1
 80022ee:	6051      	str	r1, [r2, #4]
 80022f0:	4630      	mov	r0, r6
 80022f2:	60eb      	str	r3, [r5, #12]
 80022f4:	609d      	str	r5, [r3, #8]
 80022f6:	f000 f947 	bl	8002588 <__malloc_unlock>
 80022fa:	e62f      	b.n	8001f5c <_malloc_r+0x58>
 80022fc:	305b      	adds	r0, #91	; 0x5b
 80022fe:	0041      	lsls	r1, r0, #1
 8002300:	e640      	b.n	8001f84 <_malloc_r+0x80>
 8002302:	099a      	lsrs	r2, r3, #6
 8002304:	3238      	adds	r2, #56	; 0x38
 8002306:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800230a:	e7aa      	b.n	8002262 <_malloc_r+0x35e>
 800230c:	42bc      	cmp	r4, r7
 800230e:	4b45      	ldr	r3, [pc, #276]	; (8002424 <_malloc_r+0x520>)
 8002310:	f43f af0e 	beq.w	8002130 <_malloc_r+0x22c>
 8002314:	689c      	ldr	r4, [r3, #8]
 8002316:	6862      	ldr	r2, [r4, #4]
 8002318:	f022 0203 	bic.w	r2, r2, #3
 800231c:	e768      	b.n	80021f0 <_malloc_r+0x2ec>
 800231e:	f8d8 8000 	ldr.w	r8, [r8]
 8002322:	4598      	cmp	r8, r3
 8002324:	d17c      	bne.n	8002420 <_malloc_r+0x51c>
 8002326:	f010 0f03 	tst.w	r0, #3
 800232a:	f1a8 0308 	sub.w	r3, r8, #8
 800232e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8002332:	d1f4      	bne.n	800231e <_malloc_r+0x41a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	ea23 0304 	bic.w	r3, r3, r4
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	0064      	lsls	r4, r4, #1
 800233e:	429c      	cmp	r4, r3
 8002340:	f63f aeca 	bhi.w	80020d8 <_malloc_r+0x1d4>
 8002344:	2c00      	cmp	r4, #0
 8002346:	f43f aec7 	beq.w	80020d8 <_malloc_r+0x1d4>
 800234a:	4223      	tst	r3, r4
 800234c:	4648      	mov	r0, r9
 800234e:	f47f ae69 	bne.w	8002024 <_malloc_r+0x120>
 8002352:	0064      	lsls	r4, r4, #1
 8002354:	4223      	tst	r3, r4
 8002356:	f100 0004 	add.w	r0, r0, #4
 800235a:	d0fa      	beq.n	8002352 <_malloc_r+0x44e>
 800235c:	e662      	b.n	8002024 <_malloc_r+0x120>
 800235e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8002362:	d818      	bhi.n	8002396 <_malloc_r+0x492>
 8002364:	0be8      	lsrs	r0, r5, #15
 8002366:	3077      	adds	r0, #119	; 0x77
 8002368:	0041      	lsls	r1, r0, #1
 800236a:	e60b      	b.n	8001f84 <_malloc_r+0x80>
 800236c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002370:	e6fb      	b.n	800216a <_malloc_r+0x266>
 8002372:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002376:	1092      	asrs	r2, r2, #2
 8002378:	f04f 0c01 	mov.w	ip, #1
 800237c:	fa0c f202 	lsl.w	r2, ip, r2
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c8 3004 	str.w	r3, [r8, #4]
 8002386:	460a      	mov	r2, r1
 8002388:	e77d      	b.n	8002286 <_malloc_r+0x382>
 800238a:	2301      	movs	r3, #1
 800238c:	f8c9 3004 	str.w	r3, [r9, #4]
 8002390:	464c      	mov	r4, r9
 8002392:	2200      	movs	r2, #0
 8002394:	e72c      	b.n	80021f0 <_malloc_r+0x2ec>
 8002396:	f240 5354 	movw	r3, #1364	; 0x554
 800239a:	4298      	cmp	r0, r3
 800239c:	d81c      	bhi.n	80023d8 <_malloc_r+0x4d4>
 800239e:	0ca8      	lsrs	r0, r5, #18
 80023a0:	307c      	adds	r0, #124	; 0x7c
 80023a2:	0041      	lsls	r1, r0, #1
 80023a4:	e5ee      	b.n	8001f84 <_malloc_r+0x80>
 80023a6:	3210      	adds	r2, #16
 80023a8:	e6b4      	b.n	8002114 <_malloc_r+0x210>
 80023aa:	2a54      	cmp	r2, #84	; 0x54
 80023ac:	d823      	bhi.n	80023f6 <_malloc_r+0x4f2>
 80023ae:	0b1a      	lsrs	r2, r3, #12
 80023b0:	326e      	adds	r2, #110	; 0x6e
 80023b2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80023b6:	e754      	b.n	8002262 <_malloc_r+0x35e>
 80023b8:	68bc      	ldr	r4, [r7, #8]
 80023ba:	6862      	ldr	r2, [r4, #4]
 80023bc:	f022 0203 	bic.w	r2, r2, #3
 80023c0:	e716      	b.n	80021f0 <_malloc_r+0x2ec>
 80023c2:	f3cb 000b 	ubfx	r0, fp, #0, #12
 80023c6:	2800      	cmp	r0, #0
 80023c8:	f47f aeb9 	bne.w	800213e <_malloc_r+0x23a>
 80023cc:	4442      	add	r2, r8
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	e6fd      	b.n	80021d4 <_malloc_r+0x2d0>
 80023d8:	21fc      	movs	r1, #252	; 0xfc
 80023da:	207e      	movs	r0, #126	; 0x7e
 80023dc:	e5d2      	b.n	8001f84 <_malloc_r+0x80>
 80023de:	2201      	movs	r2, #1
 80023e0:	f04f 0a00 	mov.w	sl, #0
 80023e4:	e6d4      	b.n	8002190 <_malloc_r+0x28c>
 80023e6:	f104 0108 	add.w	r1, r4, #8
 80023ea:	4630      	mov	r0, r6
 80023ec:	f7ff fafc 	bl	80019e8 <_free_r>
 80023f0:	f8da 1000 	ldr.w	r1, [sl]
 80023f4:	e6ee      	b.n	80021d4 <_malloc_r+0x2d0>
 80023f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80023fa:	d804      	bhi.n	8002406 <_malloc_r+0x502>
 80023fc:	0bda      	lsrs	r2, r3, #15
 80023fe:	3277      	adds	r2, #119	; 0x77
 8002400:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8002404:	e72d      	b.n	8002262 <_malloc_r+0x35e>
 8002406:	f240 5154 	movw	r1, #1364	; 0x554
 800240a:	428a      	cmp	r2, r1
 800240c:	d804      	bhi.n	8002418 <_malloc_r+0x514>
 800240e:	0c9a      	lsrs	r2, r3, #18
 8002410:	327c      	adds	r2, #124	; 0x7c
 8002412:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8002416:	e724      	b.n	8002262 <_malloc_r+0x35e>
 8002418:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 800241c:	227e      	movs	r2, #126	; 0x7e
 800241e:	e720      	b.n	8002262 <_malloc_r+0x35e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	e78b      	b.n	800233c <_malloc_r+0x438>
 8002424:	20000444 	.word	0x20000444

08002428 <memchr>:
 8002428:	0783      	lsls	r3, r0, #30
 800242a:	b470      	push	{r4, r5, r6}
 800242c:	b2c9      	uxtb	r1, r1
 800242e:	d040      	beq.n	80024b2 <memchr+0x8a>
 8002430:	1e54      	subs	r4, r2, #1
 8002432:	2a00      	cmp	r2, #0
 8002434:	d03f      	beq.n	80024b6 <memchr+0x8e>
 8002436:	7803      	ldrb	r3, [r0, #0]
 8002438:	428b      	cmp	r3, r1
 800243a:	bf18      	it	ne
 800243c:	1c43      	addne	r3, r0, #1
 800243e:	d106      	bne.n	800244e <memchr+0x26>
 8002440:	e01d      	b.n	800247e <memchr+0x56>
 8002442:	b1f4      	cbz	r4, 8002482 <memchr+0x5a>
 8002444:	7802      	ldrb	r2, [r0, #0]
 8002446:	428a      	cmp	r2, r1
 8002448:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800244c:	d017      	beq.n	800247e <memchr+0x56>
 800244e:	f013 0f03 	tst.w	r3, #3
 8002452:	4618      	mov	r0, r3
 8002454:	f103 0301 	add.w	r3, r3, #1
 8002458:	d1f3      	bne.n	8002442 <memchr+0x1a>
 800245a:	2c03      	cmp	r4, #3
 800245c:	d814      	bhi.n	8002488 <memchr+0x60>
 800245e:	b184      	cbz	r4, 8002482 <memchr+0x5a>
 8002460:	7803      	ldrb	r3, [r0, #0]
 8002462:	428b      	cmp	r3, r1
 8002464:	d00b      	beq.n	800247e <memchr+0x56>
 8002466:	1905      	adds	r5, r0, r4
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	e002      	b.n	8002472 <memchr+0x4a>
 800246c:	7802      	ldrb	r2, [r0, #0]
 800246e:	428a      	cmp	r2, r1
 8002470:	d005      	beq.n	800247e <memchr+0x56>
 8002472:	42ab      	cmp	r3, r5
 8002474:	4618      	mov	r0, r3
 8002476:	f103 0301 	add.w	r3, r3, #1
 800247a:	d1f7      	bne.n	800246c <memchr+0x44>
 800247c:	2000      	movs	r0, #0
 800247e:	bc70      	pop	{r4, r5, r6}
 8002480:	4770      	bx	lr
 8002482:	4620      	mov	r0, r4
 8002484:	bc70      	pop	{r4, r5, r6}
 8002486:	4770      	bx	lr
 8002488:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800248c:	4602      	mov	r2, r0
 800248e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8002492:	4610      	mov	r0, r2
 8002494:	3204      	adds	r2, #4
 8002496:	6803      	ldr	r3, [r0, #0]
 8002498:	4073      	eors	r3, r6
 800249a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800249e:	ea25 0303 	bic.w	r3, r5, r3
 80024a2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80024a6:	d1da      	bne.n	800245e <memchr+0x36>
 80024a8:	3c04      	subs	r4, #4
 80024aa:	2c03      	cmp	r4, #3
 80024ac:	4610      	mov	r0, r2
 80024ae:	d8f0      	bhi.n	8002492 <memchr+0x6a>
 80024b0:	e7d5      	b.n	800245e <memchr+0x36>
 80024b2:	4614      	mov	r4, r2
 80024b4:	e7d1      	b.n	800245a <memchr+0x32>
 80024b6:	4610      	mov	r0, r2
 80024b8:	e7e1      	b.n	800247e <memchr+0x56>
 80024ba:	bf00      	nop

080024bc <memmove>:
 80024bc:	4288      	cmp	r0, r1
 80024be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c0:	d90d      	bls.n	80024de <memmove+0x22>
 80024c2:	188b      	adds	r3, r1, r2
 80024c4:	4298      	cmp	r0, r3
 80024c6:	d20a      	bcs.n	80024de <memmove+0x22>
 80024c8:	1881      	adds	r1, r0, r2
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d054      	beq.n	8002578 <memmove+0xbc>
 80024ce:	1a9a      	subs	r2, r3, r2
 80024d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80024d8:	4293      	cmp	r3, r2
 80024da:	d1f9      	bne.n	80024d0 <memmove+0x14>
 80024dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024de:	2a0f      	cmp	r2, #15
 80024e0:	d948      	bls.n	8002574 <memmove+0xb8>
 80024e2:	ea40 0301 	orr.w	r3, r0, r1
 80024e6:	079b      	lsls	r3, r3, #30
 80024e8:	d147      	bne.n	800257a <memmove+0xbe>
 80024ea:	f100 0410 	add.w	r4, r0, #16
 80024ee:	f101 0310 	add.w	r3, r1, #16
 80024f2:	4615      	mov	r5, r2
 80024f4:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80024f8:	f844 6c10 	str.w	r6, [r4, #-16]
 80024fc:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8002500:	f844 6c0c 	str.w	r6, [r4, #-12]
 8002504:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8002508:	f844 6c08 	str.w	r6, [r4, #-8]
 800250c:	3d10      	subs	r5, #16
 800250e:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8002512:	f844 6c04 	str.w	r6, [r4, #-4]
 8002516:	2d0f      	cmp	r5, #15
 8002518:	f103 0310 	add.w	r3, r3, #16
 800251c:	f104 0410 	add.w	r4, r4, #16
 8002520:	d8e8      	bhi.n	80024f4 <memmove+0x38>
 8002522:	f1a2 0310 	sub.w	r3, r2, #16
 8002526:	f023 030f 	bic.w	r3, r3, #15
 800252a:	f002 0e0f 	and.w	lr, r2, #15
 800252e:	3310      	adds	r3, #16
 8002530:	f1be 0f03 	cmp.w	lr, #3
 8002534:	4419      	add	r1, r3
 8002536:	4403      	add	r3, r0
 8002538:	d921      	bls.n	800257e <memmove+0xc2>
 800253a:	1f1e      	subs	r6, r3, #4
 800253c:	460d      	mov	r5, r1
 800253e:	4674      	mov	r4, lr
 8002540:	3c04      	subs	r4, #4
 8002542:	f855 7b04 	ldr.w	r7, [r5], #4
 8002546:	f846 7f04 	str.w	r7, [r6, #4]!
 800254a:	2c03      	cmp	r4, #3
 800254c:	d8f8      	bhi.n	8002540 <memmove+0x84>
 800254e:	f1ae 0404 	sub.w	r4, lr, #4
 8002552:	f024 0403 	bic.w	r4, r4, #3
 8002556:	3404      	adds	r4, #4
 8002558:	4423      	add	r3, r4
 800255a:	4421      	add	r1, r4
 800255c:	f002 0203 	and.w	r2, r2, #3
 8002560:	b152      	cbz	r2, 8002578 <memmove+0xbc>
 8002562:	3b01      	subs	r3, #1
 8002564:	440a      	add	r2, r1
 8002566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800256a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800256e:	4291      	cmp	r1, r2
 8002570:	d1f9      	bne.n	8002566 <memmove+0xaa>
 8002572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002574:	4603      	mov	r3, r0
 8002576:	e7f3      	b.n	8002560 <memmove+0xa4>
 8002578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800257a:	4603      	mov	r3, r0
 800257c:	e7f1      	b.n	8002562 <memmove+0xa6>
 800257e:	4672      	mov	r2, lr
 8002580:	e7ee      	b.n	8002560 <memmove+0xa4>
 8002582:	bf00      	nop

08002584 <__malloc_lock>:
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop

08002588 <__malloc_unlock>:
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <_realloc_r>:
 800258c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002590:	4617      	mov	r7, r2
 8002592:	b083      	sub	sp, #12
 8002594:	460e      	mov	r6, r1
 8002596:	2900      	cmp	r1, #0
 8002598:	f000 80e7 	beq.w	800276a <_realloc_r+0x1de>
 800259c:	4681      	mov	r9, r0
 800259e:	f107 050b 	add.w	r5, r7, #11
 80025a2:	f7ff ffef 	bl	8002584 <__malloc_lock>
 80025a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80025aa:	2d16      	cmp	r5, #22
 80025ac:	f023 0403 	bic.w	r4, r3, #3
 80025b0:	f1a6 0808 	sub.w	r8, r6, #8
 80025b4:	d84c      	bhi.n	8002650 <_realloc_r+0xc4>
 80025b6:	2210      	movs	r2, #16
 80025b8:	4615      	mov	r5, r2
 80025ba:	42af      	cmp	r7, r5
 80025bc:	d84d      	bhi.n	800265a <_realloc_r+0xce>
 80025be:	4294      	cmp	r4, r2
 80025c0:	f280 8084 	bge.w	80026cc <_realloc_r+0x140>
 80025c4:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8002974 <_realloc_r+0x3e8>
 80025c8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80025cc:	eb08 0104 	add.w	r1, r8, r4
 80025d0:	4288      	cmp	r0, r1
 80025d2:	f000 80d6 	beq.w	8002782 <_realloc_r+0x1f6>
 80025d6:	6848      	ldr	r0, [r1, #4]
 80025d8:	f020 0e01 	bic.w	lr, r0, #1
 80025dc:	448e      	add	lr, r1
 80025de:	f8de e004 	ldr.w	lr, [lr, #4]
 80025e2:	f01e 0f01 	tst.w	lr, #1
 80025e6:	d13f      	bne.n	8002668 <_realloc_r+0xdc>
 80025e8:	f020 0003 	bic.w	r0, r0, #3
 80025ec:	4420      	add	r0, r4
 80025ee:	4290      	cmp	r0, r2
 80025f0:	f280 80c1 	bge.w	8002776 <_realloc_r+0x1ea>
 80025f4:	07db      	lsls	r3, r3, #31
 80025f6:	f100 808f 	bmi.w	8002718 <_realloc_r+0x18c>
 80025fa:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80025fe:	ebc3 0a08 	rsb	sl, r3, r8
 8002602:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002606:	f023 0303 	bic.w	r3, r3, #3
 800260a:	eb00 0e03 	add.w	lr, r0, r3
 800260e:	4596      	cmp	lr, r2
 8002610:	db34      	blt.n	800267c <_realloc_r+0xf0>
 8002612:	68cb      	ldr	r3, [r1, #12]
 8002614:	688a      	ldr	r2, [r1, #8]
 8002616:	4657      	mov	r7, sl
 8002618:	60d3      	str	r3, [r2, #12]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8002620:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002624:	60cb      	str	r3, [r1, #12]
 8002626:	1f22      	subs	r2, r4, #4
 8002628:	2a24      	cmp	r2, #36	; 0x24
 800262a:	6099      	str	r1, [r3, #8]
 800262c:	f200 8136 	bhi.w	800289c <_realloc_r+0x310>
 8002630:	2a13      	cmp	r2, #19
 8002632:	f240 80fd 	bls.w	8002830 <_realloc_r+0x2a4>
 8002636:	6833      	ldr	r3, [r6, #0]
 8002638:	f8ca 3008 	str.w	r3, [sl, #8]
 800263c:	6873      	ldr	r3, [r6, #4]
 800263e:	f8ca 300c 	str.w	r3, [sl, #12]
 8002642:	2a1b      	cmp	r2, #27
 8002644:	f200 8140 	bhi.w	80028c8 <_realloc_r+0x33c>
 8002648:	3608      	adds	r6, #8
 800264a:	f10a 0310 	add.w	r3, sl, #16
 800264e:	e0f0      	b.n	8002832 <_realloc_r+0x2a6>
 8002650:	f025 0507 	bic.w	r5, r5, #7
 8002654:	2d00      	cmp	r5, #0
 8002656:	462a      	mov	r2, r5
 8002658:	daaf      	bge.n	80025ba <_realloc_r+0x2e>
 800265a:	230c      	movs	r3, #12
 800265c:	2000      	movs	r0, #0
 800265e:	f8c9 3000 	str.w	r3, [r9]
 8002662:	b003      	add	sp, #12
 8002664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002668:	07d9      	lsls	r1, r3, #31
 800266a:	d455      	bmi.n	8002718 <_realloc_r+0x18c>
 800266c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8002670:	ebc3 0a08 	rsb	sl, r3, r8
 8002674:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002678:	f023 0303 	bic.w	r3, r3, #3
 800267c:	4423      	add	r3, r4
 800267e:	4293      	cmp	r3, r2
 8002680:	db4a      	blt.n	8002718 <_realloc_r+0x18c>
 8002682:	4657      	mov	r7, sl
 8002684:	f8da 100c 	ldr.w	r1, [sl, #12]
 8002688:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800268c:	1f22      	subs	r2, r4, #4
 800268e:	2a24      	cmp	r2, #36	; 0x24
 8002690:	60c1      	str	r1, [r0, #12]
 8002692:	6088      	str	r0, [r1, #8]
 8002694:	f200 810e 	bhi.w	80028b4 <_realloc_r+0x328>
 8002698:	2a13      	cmp	r2, #19
 800269a:	f240 8109 	bls.w	80028b0 <_realloc_r+0x324>
 800269e:	6831      	ldr	r1, [r6, #0]
 80026a0:	f8ca 1008 	str.w	r1, [sl, #8]
 80026a4:	6871      	ldr	r1, [r6, #4]
 80026a6:	f8ca 100c 	str.w	r1, [sl, #12]
 80026aa:	2a1b      	cmp	r2, #27
 80026ac:	f200 8121 	bhi.w	80028f2 <_realloc_r+0x366>
 80026b0:	3608      	adds	r6, #8
 80026b2:	f10a 0210 	add.w	r2, sl, #16
 80026b6:	6831      	ldr	r1, [r6, #0]
 80026b8:	6011      	str	r1, [r2, #0]
 80026ba:	6871      	ldr	r1, [r6, #4]
 80026bc:	6051      	str	r1, [r2, #4]
 80026be:	68b1      	ldr	r1, [r6, #8]
 80026c0:	6091      	str	r1, [r2, #8]
 80026c2:	461c      	mov	r4, r3
 80026c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80026c8:	463e      	mov	r6, r7
 80026ca:	46d0      	mov	r8, sl
 80026cc:	1b62      	subs	r2, r4, r5
 80026ce:	2a0f      	cmp	r2, #15
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	d80e      	bhi.n	80026f4 <_realloc_r+0x168>
 80026d6:	4323      	orrs	r3, r4
 80026d8:	4444      	add	r4, r8
 80026da:	f8c8 3004 	str.w	r3, [r8, #4]
 80026de:	6863      	ldr	r3, [r4, #4]
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6063      	str	r3, [r4, #4]
 80026e6:	4648      	mov	r0, r9
 80026e8:	f7ff ff4e 	bl	8002588 <__malloc_unlock>
 80026ec:	4630      	mov	r0, r6
 80026ee:	b003      	add	sp, #12
 80026f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026f4:	eb08 0105 	add.w	r1, r8, r5
 80026f8:	431d      	orrs	r5, r3
 80026fa:	f042 0301 	orr.w	r3, r2, #1
 80026fe:	440a      	add	r2, r1
 8002700:	f8c8 5004 	str.w	r5, [r8, #4]
 8002704:	604b      	str	r3, [r1, #4]
 8002706:	6853      	ldr	r3, [r2, #4]
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	3108      	adds	r1, #8
 800270e:	6053      	str	r3, [r2, #4]
 8002710:	4648      	mov	r0, r9
 8002712:	f7ff f969 	bl	80019e8 <_free_r>
 8002716:	e7e6      	b.n	80026e6 <_realloc_r+0x15a>
 8002718:	4639      	mov	r1, r7
 800271a:	4648      	mov	r0, r9
 800271c:	f7ff fbf2 	bl	8001f04 <_malloc_r>
 8002720:	4607      	mov	r7, r0
 8002722:	b1d8      	cbz	r0, 800275c <_realloc_r+0x1d0>
 8002724:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8002728:	f023 0201 	bic.w	r2, r3, #1
 800272c:	4442      	add	r2, r8
 800272e:	f1a0 0108 	sub.w	r1, r0, #8
 8002732:	4291      	cmp	r1, r2
 8002734:	f000 80ac 	beq.w	8002890 <_realloc_r+0x304>
 8002738:	1f22      	subs	r2, r4, #4
 800273a:	2a24      	cmp	r2, #36	; 0x24
 800273c:	f200 8099 	bhi.w	8002872 <_realloc_r+0x2e6>
 8002740:	2a13      	cmp	r2, #19
 8002742:	d86a      	bhi.n	800281a <_realloc_r+0x28e>
 8002744:	4603      	mov	r3, r0
 8002746:	4632      	mov	r2, r6
 8002748:	6811      	ldr	r1, [r2, #0]
 800274a:	6019      	str	r1, [r3, #0]
 800274c:	6851      	ldr	r1, [r2, #4]
 800274e:	6059      	str	r1, [r3, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	4631      	mov	r1, r6
 8002756:	4648      	mov	r0, r9
 8002758:	f7ff f946 	bl	80019e8 <_free_r>
 800275c:	4648      	mov	r0, r9
 800275e:	f7ff ff13 	bl	8002588 <__malloc_unlock>
 8002762:	4638      	mov	r0, r7
 8002764:	b003      	add	sp, #12
 8002766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800276a:	4611      	mov	r1, r2
 800276c:	b003      	add	sp, #12
 800276e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002772:	f7ff bbc7 	b.w	8001f04 <_malloc_r>
 8002776:	68ca      	ldr	r2, [r1, #12]
 8002778:	6889      	ldr	r1, [r1, #8]
 800277a:	4604      	mov	r4, r0
 800277c:	60ca      	str	r2, [r1, #12]
 800277e:	6091      	str	r1, [r2, #8]
 8002780:	e7a4      	b.n	80026cc <_realloc_r+0x140>
 8002782:	6841      	ldr	r1, [r0, #4]
 8002784:	f021 0103 	bic.w	r1, r1, #3
 8002788:	4421      	add	r1, r4
 800278a:	f105 0010 	add.w	r0, r5, #16
 800278e:	4281      	cmp	r1, r0
 8002790:	da5b      	bge.n	800284a <_realloc_r+0x2be>
 8002792:	07db      	lsls	r3, r3, #31
 8002794:	d4c0      	bmi.n	8002718 <_realloc_r+0x18c>
 8002796:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800279a:	ebc3 0a08 	rsb	sl, r3, r8
 800279e:	f8da 3004 	ldr.w	r3, [sl, #4]
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	eb01 0c03 	add.w	ip, r1, r3
 80027aa:	4560      	cmp	r0, ip
 80027ac:	f73f af66 	bgt.w	800267c <_realloc_r+0xf0>
 80027b0:	4657      	mov	r7, sl
 80027b2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80027b6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80027ba:	1f22      	subs	r2, r4, #4
 80027bc:	2a24      	cmp	r2, #36	; 0x24
 80027be:	60cb      	str	r3, [r1, #12]
 80027c0:	6099      	str	r1, [r3, #8]
 80027c2:	f200 80b8 	bhi.w	8002936 <_realloc_r+0x3aa>
 80027c6:	2a13      	cmp	r2, #19
 80027c8:	f240 80a9 	bls.w	800291e <_realloc_r+0x392>
 80027cc:	6833      	ldr	r3, [r6, #0]
 80027ce:	f8ca 3008 	str.w	r3, [sl, #8]
 80027d2:	6873      	ldr	r3, [r6, #4]
 80027d4:	f8ca 300c 	str.w	r3, [sl, #12]
 80027d8:	2a1b      	cmp	r2, #27
 80027da:	f200 80b5 	bhi.w	8002948 <_realloc_r+0x3bc>
 80027de:	3608      	adds	r6, #8
 80027e0:	f10a 0310 	add.w	r3, sl, #16
 80027e4:	6832      	ldr	r2, [r6, #0]
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	6872      	ldr	r2, [r6, #4]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	68b2      	ldr	r2, [r6, #8]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	eb0a 0205 	add.w	r2, sl, r5
 80027f4:	ebc5 030c 	rsb	r3, r5, ip
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	f8cb 2008 	str.w	r2, [fp, #8]
 8002800:	6053      	str	r3, [r2, #4]
 8002802:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	431d      	orrs	r5, r3
 800280c:	4648      	mov	r0, r9
 800280e:	f8ca 5004 	str.w	r5, [sl, #4]
 8002812:	f7ff feb9 	bl	8002588 <__malloc_unlock>
 8002816:	4638      	mov	r0, r7
 8002818:	e769      	b.n	80026ee <_realloc_r+0x162>
 800281a:	6833      	ldr	r3, [r6, #0]
 800281c:	6003      	str	r3, [r0, #0]
 800281e:	6873      	ldr	r3, [r6, #4]
 8002820:	6043      	str	r3, [r0, #4]
 8002822:	2a1b      	cmp	r2, #27
 8002824:	d829      	bhi.n	800287a <_realloc_r+0x2ee>
 8002826:	f100 0308 	add.w	r3, r0, #8
 800282a:	f106 0208 	add.w	r2, r6, #8
 800282e:	e78b      	b.n	8002748 <_realloc_r+0x1bc>
 8002830:	463b      	mov	r3, r7
 8002832:	6832      	ldr	r2, [r6, #0]
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	6872      	ldr	r2, [r6, #4]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	68b2      	ldr	r2, [r6, #8]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	463e      	mov	r6, r7
 8002840:	4674      	mov	r4, lr
 8002842:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002846:	46d0      	mov	r8, sl
 8002848:	e740      	b.n	80026cc <_realloc_r+0x140>
 800284a:	eb08 0205 	add.w	r2, r8, r5
 800284e:	1b4b      	subs	r3, r1, r5
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	f8cb 2008 	str.w	r2, [fp, #8]
 8002858:	6053      	str	r3, [r2, #4]
 800285a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	431d      	orrs	r5, r3
 8002864:	4648      	mov	r0, r9
 8002866:	f846 5c04 	str.w	r5, [r6, #-4]
 800286a:	f7ff fe8d 	bl	8002588 <__malloc_unlock>
 800286e:	4630      	mov	r0, r6
 8002870:	e73d      	b.n	80026ee <_realloc_r+0x162>
 8002872:	4631      	mov	r1, r6
 8002874:	f7ff fe22 	bl	80024bc <memmove>
 8002878:	e76c      	b.n	8002754 <_realloc_r+0x1c8>
 800287a:	68b3      	ldr	r3, [r6, #8]
 800287c:	6083      	str	r3, [r0, #8]
 800287e:	68f3      	ldr	r3, [r6, #12]
 8002880:	60c3      	str	r3, [r0, #12]
 8002882:	2a24      	cmp	r2, #36	; 0x24
 8002884:	d02c      	beq.n	80028e0 <_realloc_r+0x354>
 8002886:	f100 0310 	add.w	r3, r0, #16
 800288a:	f106 0210 	add.w	r2, r6, #16
 800288e:	e75b      	b.n	8002748 <_realloc_r+0x1bc>
 8002890:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8002894:	f022 0203 	bic.w	r2, r2, #3
 8002898:	4414      	add	r4, r2
 800289a:	e717      	b.n	80026cc <_realloc_r+0x140>
 800289c:	4631      	mov	r1, r6
 800289e:	4638      	mov	r0, r7
 80028a0:	4674      	mov	r4, lr
 80028a2:	463e      	mov	r6, r7
 80028a4:	f7ff fe0a 	bl	80024bc <memmove>
 80028a8:	46d0      	mov	r8, sl
 80028aa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80028ae:	e70d      	b.n	80026cc <_realloc_r+0x140>
 80028b0:	463a      	mov	r2, r7
 80028b2:	e700      	b.n	80026b6 <_realloc_r+0x12a>
 80028b4:	4631      	mov	r1, r6
 80028b6:	4638      	mov	r0, r7
 80028b8:	461c      	mov	r4, r3
 80028ba:	463e      	mov	r6, r7
 80028bc:	f7ff fdfe 	bl	80024bc <memmove>
 80028c0:	46d0      	mov	r8, sl
 80028c2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80028c6:	e701      	b.n	80026cc <_realloc_r+0x140>
 80028c8:	68b3      	ldr	r3, [r6, #8]
 80028ca:	f8ca 3010 	str.w	r3, [sl, #16]
 80028ce:	68f3      	ldr	r3, [r6, #12]
 80028d0:	f8ca 3014 	str.w	r3, [sl, #20]
 80028d4:	2a24      	cmp	r2, #36	; 0x24
 80028d6:	d018      	beq.n	800290a <_realloc_r+0x37e>
 80028d8:	3610      	adds	r6, #16
 80028da:	f10a 0318 	add.w	r3, sl, #24
 80028de:	e7a8      	b.n	8002832 <_realloc_r+0x2a6>
 80028e0:	6933      	ldr	r3, [r6, #16]
 80028e2:	6103      	str	r3, [r0, #16]
 80028e4:	6973      	ldr	r3, [r6, #20]
 80028e6:	6143      	str	r3, [r0, #20]
 80028e8:	f106 0218 	add.w	r2, r6, #24
 80028ec:	f100 0318 	add.w	r3, r0, #24
 80028f0:	e72a      	b.n	8002748 <_realloc_r+0x1bc>
 80028f2:	68b1      	ldr	r1, [r6, #8]
 80028f4:	f8ca 1010 	str.w	r1, [sl, #16]
 80028f8:	68f1      	ldr	r1, [r6, #12]
 80028fa:	f8ca 1014 	str.w	r1, [sl, #20]
 80028fe:	2a24      	cmp	r2, #36	; 0x24
 8002900:	d00f      	beq.n	8002922 <_realloc_r+0x396>
 8002902:	3610      	adds	r6, #16
 8002904:	f10a 0218 	add.w	r2, sl, #24
 8002908:	e6d5      	b.n	80026b6 <_realloc_r+0x12a>
 800290a:	6933      	ldr	r3, [r6, #16]
 800290c:	f8ca 3018 	str.w	r3, [sl, #24]
 8002910:	6973      	ldr	r3, [r6, #20]
 8002912:	f8ca 301c 	str.w	r3, [sl, #28]
 8002916:	3618      	adds	r6, #24
 8002918:	f10a 0320 	add.w	r3, sl, #32
 800291c:	e789      	b.n	8002832 <_realloc_r+0x2a6>
 800291e:	463b      	mov	r3, r7
 8002920:	e760      	b.n	80027e4 <_realloc_r+0x258>
 8002922:	6932      	ldr	r2, [r6, #16]
 8002924:	f8ca 2018 	str.w	r2, [sl, #24]
 8002928:	6972      	ldr	r2, [r6, #20]
 800292a:	f8ca 201c 	str.w	r2, [sl, #28]
 800292e:	3618      	adds	r6, #24
 8002930:	f10a 0220 	add.w	r2, sl, #32
 8002934:	e6bf      	b.n	80026b6 <_realloc_r+0x12a>
 8002936:	4631      	mov	r1, r6
 8002938:	4638      	mov	r0, r7
 800293a:	f8cd c004 	str.w	ip, [sp, #4]
 800293e:	f7ff fdbd 	bl	80024bc <memmove>
 8002942:	f8dd c004 	ldr.w	ip, [sp, #4]
 8002946:	e753      	b.n	80027f0 <_realloc_r+0x264>
 8002948:	68b3      	ldr	r3, [r6, #8]
 800294a:	f8ca 3010 	str.w	r3, [sl, #16]
 800294e:	68f3      	ldr	r3, [r6, #12]
 8002950:	f8ca 3014 	str.w	r3, [sl, #20]
 8002954:	2a24      	cmp	r2, #36	; 0x24
 8002956:	d003      	beq.n	8002960 <_realloc_r+0x3d4>
 8002958:	3610      	adds	r6, #16
 800295a:	f10a 0318 	add.w	r3, sl, #24
 800295e:	e741      	b.n	80027e4 <_realloc_r+0x258>
 8002960:	6933      	ldr	r3, [r6, #16]
 8002962:	f8ca 3018 	str.w	r3, [sl, #24]
 8002966:	6973      	ldr	r3, [r6, #20]
 8002968:	f8ca 301c 	str.w	r3, [sl, #28]
 800296c:	3618      	adds	r6, #24
 800296e:	f10a 0320 	add.w	r3, sl, #32
 8002972:	e737      	b.n	80027e4 <_realloc_r+0x258>
 8002974:	20000444 	.word	0x20000444

08002978 <_sbrk_r>:
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4c07      	ldr	r4, [pc, #28]	; (8002998 <_sbrk_r+0x20>)
 800297c:	2300      	movs	r3, #0
 800297e:	4605      	mov	r5, r0
 8002980:	4608      	mov	r0, r1
 8002982:	6023      	str	r3, [r4, #0]
 8002984:	f7fd fd4c 	bl	8000420 <_sbrk>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d000      	beq.n	800298e <_sbrk_r+0x16>
 800298c:	bd38      	pop	{r3, r4, r5, pc}
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0fb      	beq.n	800298c <_sbrk_r+0x14>
 8002994:	602b      	str	r3, [r5, #0]
 8002996:	bd38      	pop	{r3, r4, r5, pc}
 8002998:	20000944 	.word	0x20000944

0800299c <__sread>:
 800299c:	b510      	push	{r4, lr}
 800299e:	460c      	mov	r4, r1
 80029a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a4:	f000 fa9c 	bl	8002ee0 <_read_r>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	db03      	blt.n	80029b4 <__sread+0x18>
 80029ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029ae:	4403      	add	r3, r0
 80029b0:	6523      	str	r3, [r4, #80]	; 0x50
 80029b2:	bd10      	pop	{r4, pc}
 80029b4:	89a3      	ldrh	r3, [r4, #12]
 80029b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029ba:	81a3      	strh	r3, [r4, #12]
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	bf00      	nop

080029c0 <__swrite>:
 80029c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c4:	4616      	mov	r6, r2
 80029c6:	898a      	ldrh	r2, [r1, #12]
 80029c8:	461d      	mov	r5, r3
 80029ca:	05d3      	lsls	r3, r2, #23
 80029cc:	460c      	mov	r4, r1
 80029ce:	4607      	mov	r7, r0
 80029d0:	d506      	bpl.n	80029e0 <__swrite+0x20>
 80029d2:	2200      	movs	r2, #0
 80029d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029d8:	2302      	movs	r3, #2
 80029da:	f000 f9fd 	bl	8002dd8 <_lseek_r>
 80029de:	89a2      	ldrh	r2, [r4, #12]
 80029e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029e8:	81a2      	strh	r2, [r4, #12]
 80029ea:	4638      	mov	r0, r7
 80029ec:	4632      	mov	r2, r6
 80029ee:	462b      	mov	r3, r5
 80029f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029f4:	f000 b814 	b.w	8002a20 <_write_r>

080029f8 <__sseek>:
 80029f8:	b510      	push	{r4, lr}
 80029fa:	460c      	mov	r4, r1
 80029fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a00:	f000 f9ea 	bl	8002dd8 <_lseek_r>
 8002a04:	89a3      	ldrh	r3, [r4, #12]
 8002a06:	1c42      	adds	r2, r0, #1
 8002a08:	bf0e      	itee	eq
 8002a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a12:	6520      	strne	r0, [r4, #80]	; 0x50
 8002a14:	81a3      	strh	r3, [r4, #12]
 8002a16:	bd10      	pop	{r4, pc}

08002a18 <__sclose>:
 8002a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a1c:	f000 b8c8 	b.w	8002bb0 <_close_r>

08002a20 <_write_r>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	4c08      	ldr	r4, [pc, #32]	; (8002a44 <_write_r+0x24>)
 8002a24:	4606      	mov	r6, r0
 8002a26:	2500      	movs	r5, #0
 8002a28:	4608      	mov	r0, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	6025      	str	r5, [r4, #0]
 8002a30:	f7fd fcea 	bl	8000408 <_write>
 8002a34:	1c43      	adds	r3, r0, #1
 8002a36:	d000      	beq.n	8002a3a <_write_r+0x1a>
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0fb      	beq.n	8002a38 <_write_r+0x18>
 8002a40:	6033      	str	r3, [r6, #0]
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	20000944 	.word	0x20000944

08002a48 <__swsetup_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <__swsetup_r+0xc0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4605      	mov	r5, r0
 8002a50:	460c      	mov	r4, r1
 8002a52:	b113      	cbz	r3, 8002a5a <__swsetup_r+0x12>
 8002a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a56:	2a00      	cmp	r2, #0
 8002a58:	d036      	beq.n	8002ac8 <__swsetup_r+0x80>
 8002a5a:	89a2      	ldrh	r2, [r4, #12]
 8002a5c:	b293      	uxth	r3, r2
 8002a5e:	0718      	lsls	r0, r3, #28
 8002a60:	d50c      	bpl.n	8002a7c <__swsetup_r+0x34>
 8002a62:	6920      	ldr	r0, [r4, #16]
 8002a64:	b1a8      	cbz	r0, 8002a92 <__swsetup_r+0x4a>
 8002a66:	f013 0201 	ands.w	r2, r3, #1
 8002a6a:	d01e      	beq.n	8002aaa <__swsetup_r+0x62>
 8002a6c:	6963      	ldr	r3, [r4, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	425b      	negs	r3, r3
 8002a72:	61a3      	str	r3, [r4, #24]
 8002a74:	60a2      	str	r2, [r4, #8]
 8002a76:	b1f0      	cbz	r0, 8002ab6 <__swsetup_r+0x6e>
 8002a78:	2000      	movs	r0, #0
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
 8002a7c:	06d9      	lsls	r1, r3, #27
 8002a7e:	d53b      	bpl.n	8002af8 <__swsetup_r+0xb0>
 8002a80:	0758      	lsls	r0, r3, #29
 8002a82:	d425      	bmi.n	8002ad0 <__swsetup_r+0x88>
 8002a84:	6920      	ldr	r0, [r4, #16]
 8002a86:	f042 0308 	orr.w	r3, r2, #8
 8002a8a:	81a3      	strh	r3, [r4, #12]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d1e9      	bne.n	8002a66 <__swsetup_r+0x1e>
 8002a92:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8002a96:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002a9a:	d0e4      	beq.n	8002a66 <__swsetup_r+0x1e>
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	f000 f9ae 	bl	8002e00 <__smakebuf_r>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	6920      	ldr	r0, [r4, #16]
 8002aa8:	e7dd      	b.n	8002a66 <__swsetup_r+0x1e>
 8002aaa:	0799      	lsls	r1, r3, #30
 8002aac:	bf58      	it	pl
 8002aae:	6962      	ldrpl	r2, [r4, #20]
 8002ab0:	60a2      	str	r2, [r4, #8]
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d1e0      	bne.n	8002a78 <__swsetup_r+0x30>
 8002ab6:	89a3      	ldrh	r3, [r4, #12]
 8002ab8:	061a      	lsls	r2, r3, #24
 8002aba:	d5de      	bpl.n	8002a7a <__swsetup_r+0x32>
 8002abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac0:	81a3      	strh	r3, [r4, #12]
 8002ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ac6:	bd38      	pop	{r3, r4, r5, pc}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe ff1f 	bl	800190c <__sinit>
 8002ace:	e7c4      	b.n	8002a5a <__swsetup_r+0x12>
 8002ad0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002ad2:	b149      	cbz	r1, 8002ae8 <__swsetup_r+0xa0>
 8002ad4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8002ad8:	4299      	cmp	r1, r3
 8002ada:	d003      	beq.n	8002ae4 <__swsetup_r+0x9c>
 8002adc:	4628      	mov	r0, r5
 8002ade:	f7fe ff83 	bl	80019e8 <_free_r>
 8002ae2:	89a2      	ldrh	r2, [r4, #12]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8002ae8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8002aec:	2300      	movs	r3, #0
 8002aee:	6920      	ldr	r0, [r4, #16]
 8002af0:	6063      	str	r3, [r4, #4]
 8002af2:	b292      	uxth	r2, r2
 8002af4:	6020      	str	r0, [r4, #0]
 8002af6:	e7c6      	b.n	8002a86 <__swsetup_r+0x3e>
 8002af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afc:	2309      	movs	r3, #9
 8002afe:	602b      	str	r3, [r5, #0]
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b04:	81a2      	strh	r2, [r4, #12]
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
 8002b08:	20000440 	.word	0x20000440

08002b0c <__register_exitproc>:
 8002b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b10:	4c25      	ldr	r4, [pc, #148]	; (8002ba8 <__register_exitproc+0x9c>)
 8002b12:	6825      	ldr	r5, [r4, #0]
 8002b14:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8002b18:	4606      	mov	r6, r0
 8002b1a:	4688      	mov	r8, r1
 8002b1c:	4692      	mov	sl, r2
 8002b1e:	4699      	mov	r9, r3
 8002b20:	b3cc      	cbz	r4, 8002b96 <__register_exitproc+0x8a>
 8002b22:	6860      	ldr	r0, [r4, #4]
 8002b24:	281f      	cmp	r0, #31
 8002b26:	dc18      	bgt.n	8002b5a <__register_exitproc+0x4e>
 8002b28:	1c43      	adds	r3, r0, #1
 8002b2a:	b17e      	cbz	r6, 8002b4c <__register_exitproc+0x40>
 8002b2c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002b30:	2101      	movs	r1, #1
 8002b32:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8002b36:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8002b3a:	fa01 f200 	lsl.w	r2, r1, r0
 8002b3e:	4317      	orrs	r7, r2
 8002b40:	2e02      	cmp	r6, #2
 8002b42:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8002b46:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8002b4a:	d01e      	beq.n	8002b8a <__register_exitproc+0x7e>
 8002b4c:	3002      	adds	r0, #2
 8002b4e:	6063      	str	r3, [r4, #4]
 8002b50:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8002b54:	2000      	movs	r0, #0
 8002b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <__register_exitproc+0xa0>)
 8002b5c:	b303      	cbz	r3, 8002ba0 <__register_exitproc+0x94>
 8002b5e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002b62:	f3af 8000 	nop.w
 8002b66:	4604      	mov	r4, r0
 8002b68:	b1d0      	cbz	r0, 8002ba0 <__register_exitproc+0x94>
 8002b6a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8002b6e:	2700      	movs	r7, #0
 8002b70:	e880 0088 	stmia.w	r0, {r3, r7}
 8002b74:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8002b78:	4638      	mov	r0, r7
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8002b80:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8002b84:	2e00      	cmp	r6, #0
 8002b86:	d0e1      	beq.n	8002b4c <__register_exitproc+0x40>
 8002b88:	e7d0      	b.n	8002b2c <__register_exitproc+0x20>
 8002b8a:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8002b94:	e7da      	b.n	8002b4c <__register_exitproc+0x40>
 8002b96:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8002b9a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8002b9e:	e7c0      	b.n	8002b22 <__register_exitproc+0x16>
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba8:	0800307c 	.word	0x0800307c
 8002bac:	00000000 	.word	0x00000000

08002bb0 <_close_r>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4c07      	ldr	r4, [pc, #28]	; (8002bd0 <_close_r+0x20>)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	4608      	mov	r0, r1
 8002bba:	6023      	str	r3, [r4, #0]
 8002bbc:	f7fd fc4a 	bl	8000454 <_close>
 8002bc0:	1c43      	adds	r3, r0, #1
 8002bc2:	d000      	beq.n	8002bc6 <_close_r+0x16>
 8002bc4:	bd38      	pop	{r3, r4, r5, pc}
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0fb      	beq.n	8002bc4 <_close_r+0x14>
 8002bcc:	602b      	str	r3, [r5, #0]
 8002bce:	bd38      	pop	{r3, r4, r5, pc}
 8002bd0:	20000944 	.word	0x20000944

08002bd4 <_fclose_r>:
 8002bd4:	2900      	cmp	r1, #0
 8002bd6:	d03d      	beq.n	8002c54 <_fclose_r+0x80>
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	4605      	mov	r5, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	b108      	cbz	r0, 8002be4 <_fclose_r+0x10>
 8002be0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002be2:	b37b      	cbz	r3, 8002c44 <_fclose_r+0x70>
 8002be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002be8:	b90b      	cbnz	r3, 8002bee <_fclose_r+0x1a>
 8002bea:	2000      	movs	r0, #0
 8002bec:	bd70      	pop	{r4, r5, r6, pc}
 8002bee:	4628      	mov	r0, r5
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	f000 f831 	bl	8002c58 <__sflush_r>
 8002bf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bf8:	4606      	mov	r6, r0
 8002bfa:	b133      	cbz	r3, 8002c0a <_fclose_r+0x36>
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	69e1      	ldr	r1, [r4, #28]
 8002c00:	4798      	blx	r3
 8002c02:	2800      	cmp	r0, #0
 8002c04:	bfb8      	it	lt
 8002c06:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8002c0a:	89a3      	ldrh	r3, [r4, #12]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	d41c      	bmi.n	8002c4a <_fclose_r+0x76>
 8002c10:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002c12:	b141      	cbz	r1, 8002c26 <_fclose_r+0x52>
 8002c14:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8002c18:	4299      	cmp	r1, r3
 8002c1a:	d002      	beq.n	8002c22 <_fclose_r+0x4e>
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f7fe fee3 	bl	80019e8 <_free_r>
 8002c22:	2300      	movs	r3, #0
 8002c24:	6323      	str	r3, [r4, #48]	; 0x30
 8002c26:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002c28:	b121      	cbz	r1, 8002c34 <_fclose_r+0x60>
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f7fe fedc 	bl	80019e8 <_free_r>
 8002c30:	2300      	movs	r3, #0
 8002c32:	6463      	str	r3, [r4, #68]	; 0x44
 8002c34:	f7fe fe70 	bl	8001918 <__sfp_lock_acquire>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	81a3      	strh	r3, [r4, #12]
 8002c3c:	f7fe fe6e 	bl	800191c <__sfp_lock_release>
 8002c40:	4630      	mov	r0, r6
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	f7fe fe62 	bl	800190c <__sinit>
 8002c48:	e7cc      	b.n	8002be4 <_fclose_r+0x10>
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	6921      	ldr	r1, [r4, #16]
 8002c4e:	f7fe fecb 	bl	80019e8 <_free_r>
 8002c52:	e7dd      	b.n	8002c10 <_fclose_r+0x3c>
 8002c54:	2000      	movs	r0, #0
 8002c56:	4770      	bx	lr

08002c58 <__sflush_r>:
 8002c58:	898b      	ldrh	r3, [r1, #12]
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c60:	460d      	mov	r5, r1
 8002c62:	0711      	lsls	r1, r2, #28
 8002c64:	4680      	mov	r8, r0
 8002c66:	d43c      	bmi.n	8002ce2 <__sflush_r+0x8a>
 8002c68:	686a      	ldr	r2, [r5, #4]
 8002c6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c6e:	2a00      	cmp	r2, #0
 8002c70:	81ab      	strh	r3, [r5, #12]
 8002c72:	dd65      	ble.n	8002d40 <__sflush_r+0xe8>
 8002c74:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8002c76:	2e00      	cmp	r6, #0
 8002c78:	d04b      	beq.n	8002d12 <__sflush_r+0xba>
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c80:	2100      	movs	r1, #0
 8002c82:	b292      	uxth	r2, r2
 8002c84:	f8d8 4000 	ldr.w	r4, [r8]
 8002c88:	f8c8 1000 	str.w	r1, [r8]
 8002c8c:	2a00      	cmp	r2, #0
 8002c8e:	d05b      	beq.n	8002d48 <__sflush_r+0xf0>
 8002c90:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8002c92:	075f      	lsls	r7, r3, #29
 8002c94:	d505      	bpl.n	8002ca2 <__sflush_r+0x4a>
 8002c96:	6869      	ldr	r1, [r5, #4]
 8002c98:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c9a:	1a52      	subs	r2, r2, r1
 8002c9c:	b10b      	cbz	r3, 8002ca2 <__sflush_r+0x4a>
 8002c9e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002ca0:	1ad2      	subs	r2, r2, r3
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	69e9      	ldr	r1, [r5, #28]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	47b0      	blx	r6
 8002caa:	1c46      	adds	r6, r0, #1
 8002cac:	d056      	beq.n	8002d5c <__sflush_r+0x104>
 8002cae:	89ab      	ldrh	r3, [r5, #12]
 8002cb0:	692a      	ldr	r2, [r5, #16]
 8002cb2:	602a      	str	r2, [r5, #0]
 8002cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2200      	movs	r2, #0
 8002cbc:	606a      	str	r2, [r5, #4]
 8002cbe:	04da      	lsls	r2, r3, #19
 8002cc0:	81ab      	strh	r3, [r5, #12]
 8002cc2:	d43b      	bmi.n	8002d3c <__sflush_r+0xe4>
 8002cc4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002cc6:	f8c8 4000 	str.w	r4, [r8]
 8002cca:	b311      	cbz	r1, 8002d12 <__sflush_r+0xba>
 8002ccc:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8002cd0:	4299      	cmp	r1, r3
 8002cd2:	d002      	beq.n	8002cda <__sflush_r+0x82>
 8002cd4:	4640      	mov	r0, r8
 8002cd6:	f7fe fe87 	bl	80019e8 <_free_r>
 8002cda:	2000      	movs	r0, #0
 8002cdc:	6328      	str	r0, [r5, #48]	; 0x30
 8002cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ce2:	692e      	ldr	r6, [r5, #16]
 8002ce4:	b1ae      	cbz	r6, 8002d12 <__sflush_r+0xba>
 8002ce6:	682c      	ldr	r4, [r5, #0]
 8002ce8:	602e      	str	r6, [r5, #0]
 8002cea:	0791      	lsls	r1, r2, #30
 8002cec:	bf0c      	ite	eq
 8002cee:	696b      	ldreq	r3, [r5, #20]
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	1ba4      	subs	r4, r4, r6
 8002cf4:	60ab      	str	r3, [r5, #8]
 8002cf6:	e00a      	b.n	8002d0e <__sflush_r+0xb6>
 8002cf8:	4632      	mov	r2, r6
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8002cfe:	69e9      	ldr	r1, [r5, #28]
 8002d00:	4640      	mov	r0, r8
 8002d02:	47b8      	blx	r7
 8002d04:	2800      	cmp	r0, #0
 8002d06:	eba4 0400 	sub.w	r4, r4, r0
 8002d0a:	4406      	add	r6, r0
 8002d0c:	dd04      	ble.n	8002d18 <__sflush_r+0xc0>
 8002d0e:	2c00      	cmp	r4, #0
 8002d10:	dcf2      	bgt.n	8002cf8 <__sflush_r+0xa0>
 8002d12:	2000      	movs	r0, #0
 8002d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d18:	89ab      	ldrh	r3, [r5, #12]
 8002d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1e:	81ab      	strh	r3, [r5, #12]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d28:	89ab      	ldrh	r3, [r5, #12]
 8002d2a:	692a      	ldr	r2, [r5, #16]
 8002d2c:	6069      	str	r1, [r5, #4]
 8002d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	81ab      	strh	r3, [r5, #12]
 8002d36:	04db      	lsls	r3, r3, #19
 8002d38:	602a      	str	r2, [r5, #0]
 8002d3a:	d5c3      	bpl.n	8002cc4 <__sflush_r+0x6c>
 8002d3c:	6528      	str	r0, [r5, #80]	; 0x50
 8002d3e:	e7c1      	b.n	8002cc4 <__sflush_r+0x6c>
 8002d40:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	dc96      	bgt.n	8002c74 <__sflush_r+0x1c>
 8002d46:	e7e4      	b.n	8002d12 <__sflush_r+0xba>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	69e9      	ldr	r1, [r5, #28]
 8002d4e:	47b0      	blx	r6
 8002d50:	1c43      	adds	r3, r0, #1
 8002d52:	4602      	mov	r2, r0
 8002d54:	d019      	beq.n	8002d8a <__sflush_r+0x132>
 8002d56:	89ab      	ldrh	r3, [r5, #12]
 8002d58:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8002d5a:	e79a      	b.n	8002c92 <__sflush_r+0x3a>
 8002d5c:	f8d8 1000 	ldr.w	r1, [r8]
 8002d60:	2900      	cmp	r1, #0
 8002d62:	d0e1      	beq.n	8002d28 <__sflush_r+0xd0>
 8002d64:	291d      	cmp	r1, #29
 8002d66:	d007      	beq.n	8002d78 <__sflush_r+0x120>
 8002d68:	2916      	cmp	r1, #22
 8002d6a:	d005      	beq.n	8002d78 <__sflush_r+0x120>
 8002d6c:	89ab      	ldrh	r3, [r5, #12]
 8002d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d72:	81ab      	strh	r3, [r5, #12]
 8002d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d78:	89ab      	ldrh	r3, [r5, #12]
 8002d7a:	692a      	ldr	r2, [r5, #16]
 8002d7c:	602a      	str	r2, [r5, #0]
 8002d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d82:	2200      	movs	r2, #0
 8002d84:	81ab      	strh	r3, [r5, #12]
 8002d86:	606a      	str	r2, [r5, #4]
 8002d88:	e79c      	b.n	8002cc4 <__sflush_r+0x6c>
 8002d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0e1      	beq.n	8002d56 <__sflush_r+0xfe>
 8002d92:	2b1d      	cmp	r3, #29
 8002d94:	d007      	beq.n	8002da6 <__sflush_r+0x14e>
 8002d96:	2b16      	cmp	r3, #22
 8002d98:	d005      	beq.n	8002da6 <__sflush_r+0x14e>
 8002d9a:	89ab      	ldrh	r3, [r5, #12]
 8002d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da0:	81ab      	strh	r3, [r5, #12]
 8002da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da6:	f8c8 4000 	str.w	r4, [r8]
 8002daa:	e7b2      	b.n	8002d12 <__sflush_r+0xba>

08002dac <_fflush_r>:
 8002dac:	b510      	push	{r4, lr}
 8002dae:	4604      	mov	r4, r0
 8002db0:	b082      	sub	sp, #8
 8002db2:	b108      	cbz	r0, 8002db8 <_fflush_r+0xc>
 8002db4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002db6:	b153      	cbz	r3, 8002dce <_fflush_r+0x22>
 8002db8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8002dbc:	b908      	cbnz	r0, 8002dc2 <_fflush_r+0x16>
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	b002      	add	sp, #8
 8002dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dca:	f7ff bf45 	b.w	8002c58 <__sflush_r>
 8002dce:	9101      	str	r1, [sp, #4]
 8002dd0:	f7fe fd9c 	bl	800190c <__sinit>
 8002dd4:	9901      	ldr	r1, [sp, #4]
 8002dd6:	e7ef      	b.n	8002db8 <_fflush_r+0xc>

08002dd8 <_lseek_r>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4c08      	ldr	r4, [pc, #32]	; (8002dfc <_lseek_r+0x24>)
 8002ddc:	4606      	mov	r6, r0
 8002dde:	2500      	movs	r5, #0
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	6025      	str	r5, [r4, #0]
 8002de8:	f7fd fb3e 	bl	8000468 <_lseek>
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	d000      	beq.n	8002df2 <_lseek_r+0x1a>
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0fb      	beq.n	8002df0 <_lseek_r+0x18>
 8002df8:	6033      	str	r3, [r6, #0]
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	20000944 	.word	0x20000944

08002e00 <__smakebuf_r>:
 8002e00:	898b      	ldrh	r3, [r1, #12]
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	f012 0f02 	tst.w	r2, #2
 8002e08:	d13c      	bne.n	8002e84 <__smakebuf_r+0x84>
 8002e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e12:	2900      	cmp	r1, #0
 8002e14:	b091      	sub	sp, #68	; 0x44
 8002e16:	4605      	mov	r5, r0
 8002e18:	db19      	blt.n	8002e4e <__smakebuf_r+0x4e>
 8002e1a:	aa01      	add	r2, sp, #4
 8002e1c:	f000 f874 	bl	8002f08 <_fstat_r>
 8002e20:	2800      	cmp	r0, #0
 8002e22:	db12      	blt.n	8002e4a <__smakebuf_r+0x4a>
 8002e24:	9b02      	ldr	r3, [sp, #8]
 8002e26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8002e32:	fab7 f787 	clz	r7, r7
 8002e36:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8002e3a:	d02a      	beq.n	8002e92 <__smakebuf_r+0x92>
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e42:	81a3      	strh	r3, [r4, #12]
 8002e44:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8002e48:	e00b      	b.n	8002e62 <__smakebuf_r+0x62>
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e56:	81a3      	strh	r3, [r4, #12]
 8002e58:	bf0c      	ite	eq
 8002e5a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8002e5e:	2640      	movne	r6, #64	; 0x40
 8002e60:	2700      	movs	r7, #0
 8002e62:	4628      	mov	r0, r5
 8002e64:	4631      	mov	r1, r6
 8002e66:	f7ff f84d 	bl	8001f04 <_malloc_r>
 8002e6a:	89a3      	ldrh	r3, [r4, #12]
 8002e6c:	b340      	cbz	r0, 8002ec0 <__smakebuf_r+0xc0>
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <__smakebuf_r+0xd8>)
 8002e70:	63ea      	str	r2, [r5, #60]	; 0x3c
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	81a3      	strh	r3, [r4, #12]
 8002e78:	6020      	str	r0, [r4, #0]
 8002e7a:	6120      	str	r0, [r4, #16]
 8002e7c:	6166      	str	r6, [r4, #20]
 8002e7e:	b99f      	cbnz	r7, 8002ea8 <__smakebuf_r+0xa8>
 8002e80:	b011      	add	sp, #68	; 0x44
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e84:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8002e88:	2201      	movs	r2, #1
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	610b      	str	r3, [r1, #16]
 8002e8e:	614a      	str	r2, [r1, #20]
 8002e90:	4770      	bx	lr
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <__smakebuf_r+0xdc>)
 8002e94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d1d0      	bne.n	8002e3c <__smakebuf_r+0x3c>
 8002e9a:	89a3      	ldrh	r3, [r4, #12]
 8002e9c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8002ea0:	4333      	orrs	r3, r6
 8002ea2:	81a3      	strh	r3, [r4, #12]
 8002ea4:	64e6      	str	r6, [r4, #76]	; 0x4c
 8002ea6:	e7dc      	b.n	8002e62 <__smakebuf_r+0x62>
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eae:	f000 f83f 	bl	8002f30 <_isatty_r>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d0e4      	beq.n	8002e80 <__smakebuf_r+0x80>
 8002eb6:	89a3      	ldrh	r3, [r4, #12]
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	81a3      	strh	r3, [r4, #12]
 8002ebe:	e7df      	b.n	8002e80 <__smakebuf_r+0x80>
 8002ec0:	059a      	lsls	r2, r3, #22
 8002ec2:	d4dd      	bmi.n	8002e80 <__smakebuf_r+0x80>
 8002ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	2101      	movs	r1, #1
 8002ece:	81a3      	strh	r3, [r4, #12]
 8002ed0:	6022      	str	r2, [r4, #0]
 8002ed2:	6122      	str	r2, [r4, #16]
 8002ed4:	6161      	str	r1, [r4, #20]
 8002ed6:	e7d3      	b.n	8002e80 <__smakebuf_r+0x80>
 8002ed8:	08001811 	.word	0x08001811
 8002edc:	080029f9 	.word	0x080029f9

08002ee0 <_read_r>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4c08      	ldr	r4, [pc, #32]	; (8002f04 <_read_r+0x24>)
 8002ee4:	4606      	mov	r6, r0
 8002ee6:	2500      	movs	r5, #0
 8002ee8:	4608      	mov	r0, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	461a      	mov	r2, r3
 8002eee:	6025      	str	r5, [r4, #0]
 8002ef0:	f7fd fabc 	bl	800046c <_read>
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d000      	beq.n	8002efa <_read_r+0x1a>
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0fb      	beq.n	8002ef8 <_read_r+0x18>
 8002f00:	6033      	str	r3, [r6, #0]
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	20000944 	.word	0x20000944

08002f08 <_fstat_r>:
 8002f08:	b538      	push	{r3, r4, r5, lr}
 8002f0a:	4c08      	ldr	r4, [pc, #32]	; (8002f2c <_fstat_r+0x24>)
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	4605      	mov	r5, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	f7fd faa0 	bl	800045a <_fstat>
 8002f1a:	1c43      	adds	r3, r0, #1
 8002f1c:	d000      	beq.n	8002f20 <_fstat_r+0x18>
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0fb      	beq.n	8002f1e <_fstat_r+0x16>
 8002f26:	602b      	str	r3, [r5, #0]
 8002f28:	bd38      	pop	{r3, r4, r5, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000944 	.word	0x20000944

08002f30 <_isatty_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4c07      	ldr	r4, [pc, #28]	; (8002f50 <_isatty_r+0x20>)
 8002f34:	2300      	movs	r3, #0
 8002f36:	4605      	mov	r5, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	6023      	str	r3, [r4, #0]
 8002f3c:	f7fd fa92 	bl	8000464 <_isatty>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d000      	beq.n	8002f46 <_isatty_r+0x16>
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0fb      	beq.n	8002f44 <_isatty_r+0x14>
 8002f4c:	602b      	str	r3, [r5, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	20000944 	.word	0x20000944

08002f54 <_init>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr

08002f60 <_fini>:
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	bf00      	nop
 8002f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f66:	bc08      	pop	{r3}
 8002f68:	469e      	mov	lr, r3
 8002f6a:	4770      	bx	lr
